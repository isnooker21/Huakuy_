"""
üõ°Ô∏è Strategic Position Manager
‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÑ‡∏°‡πâ‡πÄ‡∏ä‡∏¥‡∏á‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå - HOLD ‡πÑ‡∏°‡πâ‡∏î‡∏µ ‡∏õ‡∏¥‡∏î‡πÑ‡∏°‡πâ‡πÅ‡∏¢‡πà‡πÄ‡∏£‡πá‡∏ß

Features:
- Strategic Hold System (HOLD ‡πÑ‡∏°‡πâ‡∏î‡∏µ‡∏ô‡∏≤‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô)
- Capital Protection (‡∏Å‡∏±‡πâ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏∏‡∏ô)
- Position Quality Classification
- Smart Exit Timing
- Portfolio Balance Optimization
"""

import logging
import numpy as np
from typing import Dict, List, Optional, Tuple, Any
from dataclasses import dataclass
from datetime import datetime, timedelta
from enum import Enum

logger = logging.getLogger(__name__)

class PositionQuality(Enum):
    """‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á"""
    STRATEGIC_ASSET = "STRATEGIC_ASSET"    # ‡πÑ‡∏°‡πâ‡∏î‡∏µ‡∏°‡∏≤‡∏Å - HOLD ‡∏ô‡∏≤‡∏ô
    GOOD_ENTRY = "GOOD_ENTRY"             # ‡πÑ‡∏°‡πâ‡∏î‡∏µ - HOLD ‡∏õ‡∏Å‡∏ï‡∏¥
    AVERAGE_ENTRY = "AVERAGE_ENTRY"       # ‡πÑ‡∏°‡πâ‡∏õ‡∏Å‡∏ï‡∏¥ - ‡∏ï‡∏≤‡∏° 7D
    POOR_ENTRY = "POOR_ENTRY"             # ‡πÑ‡∏°‡πâ‡πÅ‡∏¢‡πà - ‡∏´‡∏≤ exit ‡πÄ‡∏£‡πá‡∏ß
    PROBLEM_POSITION = "PROBLEM_POSITION"  # ‡πÑ‡∏°‡πâ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ - ‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç

class HoldStrategy(Enum):
    """‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏Å‡∏≤‡∏£ Hold"""
    HOLD_STRATEGIC = "HOLD_STRATEGIC"      # Hold ‡πÄ‡∏ä‡∏¥‡∏á‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå
    HOLD_RECOVERY = "HOLD_RECOVERY"        # Hold ‡∏£‡∏≠ recovery
    HOLD_BALANCE = "HOLD_BALANCE"          # Hold ‡πÄ‡∏û‡∏∑‡πà‡∏≠ balance
    ALLOW_CLOSE = "ALLOW_CLOSE"            # ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡∏õ‡∏¥‡∏î
    FORCE_CLOSE = "FORCE_CLOSE"            # ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏õ‡∏¥‡∏î

@dataclass
class PositionAnalysis:
    """‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á"""
    position: Any
    quality: PositionQuality
    hold_strategy: HoldStrategy
    strategic_value: float    # 0-100
    entry_quality_score: float
    current_performance: float
    expected_profit: float
    hold_duration_target: int  # ‡∏ô‡∏≤‡∏ó‡∏µ
    capital_protection_level: float
    should_override_close: bool
    reason: str

class StrategicPositionManager:
    """üõ°Ô∏è ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏ä‡∏¥‡∏á‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå"""
    
    def __init__(self, smart_entry_timing=None):
        self.smart_entry_timing = smart_entry_timing
        
        # üéØ Position Quality Thresholds
        self.strategic_asset_threshold = 85.0    # ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô entry > 85 = STRATEGIC_ASSET
        self.good_entry_threshold = 70.0         # ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô entry > 70 = GOOD_ENTRY
        self.poor_entry_threshold = 40.0         # ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô entry < 40 = POOR_ENTRY
        
        # ‚è∞ Hold Duration Targets (‡∏ô‡∏≤‡∏ó‡∏µ)
        self.strategic_hold_duration = 240       # 4 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
        self.good_hold_duration = 120           # 2 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
        self.average_hold_duration = 60         # 1 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
        self.poor_hold_duration = 30            # 30 ‡∏ô‡∏≤‡∏ó‡∏µ
        
        # üí∞ Profit Expectations
        self.strategic_profit_target = 50.0      # ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏Å‡∏≥‡πÑ‡∏£ strategic positions
        self.good_profit_target = 30.0          # ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏Å‡∏≥‡πÑ‡∏£ good positions
        self.average_profit_target = 15.0       # ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏Å‡∏≥‡πÑ‡∏£ average positions
        
        # üõ°Ô∏è Capital Protection
        self.protection_levels = {
            PositionQuality.STRATEGIC_ASSET: 0.9,    # ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô 90%
            PositionQuality.GOOD_ENTRY: 0.7,         # ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô 70%
            PositionQuality.AVERAGE_ENTRY: 0.5,      # ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô 50%
            PositionQuality.POOR_ENTRY: 0.2,         # ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô 20%
            PositionQuality.PROBLEM_POSITION: 0.0    # ‡πÑ‡∏°‡πà‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô
        }
        
        # üìä Performance Tracking
        self.position_entries = {}  # ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞ position
        
        logger.info("üõ°Ô∏è Strategic Position Manager initialized")
    
    def record_position_entry(self, position: Any, entry_analysis: Any):
        """üìù ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ç‡∏≠‡∏á position"""
        try:
            ticket = getattr(position, 'ticket', id(position))
            
            self.position_entries[ticket] = {
                'entry_time': datetime.now(),
                'entry_price': getattr(position, 'price_open', 0),
                'entry_quality': entry_analysis.quality if entry_analysis else PositionQuality.AVERAGE_ENTRY,
                'entry_score': entry_analysis.score if entry_analysis else 50.0,
                'strategic_value': entry_analysis.strategic_value if entry_analysis else 50.0,
                'expected_profit': self._calculate_expected_profit(position, entry_analysis)
            }
            
            logger.info(f"üìù Recorded entry for position {ticket}: "
                       f"{self.position_entries[ticket]['entry_quality'].value}")
            
        except Exception as e:
            logger.error(f"‚ùå Error recording position entry: {e}")
    
    def analyze_position_strategy(self, position: Any, current_price: float, 
                                 portfolio_context: Dict = None) -> PositionAnalysis:
        """
        üîç ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
        
        Args:
            position: ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå
            current_price: ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
            portfolio_context: ‡∏ö‡∏£‡∏¥‡∏ö‡∏ó‡∏Ç‡∏≠‡∏á portfolio
            
        Returns:
            PositionAnalysis: ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå
        """
        try:
            ticket = getattr(position, 'ticket', id(position))
            
            # 1. üìä ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤
            entry_info = self.position_entries.get(ticket, {})
            entry_quality = entry_info.get('entry_quality', PositionQuality.AVERAGE_ENTRY)
            entry_score = entry_info.get('entry_score', 50.0)
            
            # 2. üìà ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå Performance ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
            current_performance = self._analyze_current_performance(position, current_price)
            
            # 3. üéØ ‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
            position_quality = self._classify_position_quality(
                entry_score, current_performance, position
            )
            
            # 4. üõ°Ô∏è ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏Å‡∏≤‡∏£ Hold
            hold_strategy = self._determine_hold_strategy(
                position_quality, current_performance, entry_info, portfolio_context
            )
            
            # 5. üíé ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Strategic Value
            strategic_value = self._calculate_strategic_value(
                position, entry_info, current_performance, portfolio_context
            )
            
            # 6. ‚è∞ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ Hold
            hold_duration_target = self._calculate_hold_duration(position_quality, entry_info)
            
            # 7. üõ°Ô∏è ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏ó‡∏∏‡∏ô
            protection_level = self.protection_levels.get(position_quality, 0.5)
            
            # 8. üö´ ‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à Override Close
            should_override = self._should_override_close(
                position_quality, hold_strategy, current_performance, entry_info
            )
            
            # 9. üìã ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
            analysis = PositionAnalysis(
                position=position,
                quality=position_quality,
                hold_strategy=hold_strategy,
                strategic_value=strategic_value,
                entry_quality_score=entry_score,
                current_performance=current_performance,
                expected_profit=entry_info.get('expected_profit', 15.0),
                hold_duration_target=hold_duration_target,
                capital_protection_level=protection_level,
                should_override_close=should_override,
                reason=self._generate_strategy_reason(position_quality, hold_strategy, current_performance)
            )
            
            logger.debug(f"üîç Position {ticket} Strategy: {position_quality.value} ‚Üí {hold_strategy.value}")
            
            return analysis
            
        except Exception as e:
            logger.error(f"‚ùå Error analyzing position strategy: {e}")
            return self._create_default_analysis(position, current_price)
    
    def _calculate_expected_profit(self, position: Any, entry_analysis: Any) -> float:
        """üí∞ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏Å‡∏≥‡πÑ‡∏£‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏î‡∏´‡∏ß‡∏±‡∏á"""
        try:
            if not entry_analysis:
                return self.average_profit_target
            
            # ‡∏ï‡∏≤‡∏° Entry Quality
            if entry_analysis.quality == entry_analysis.quality.EXCELLENT:
                return self.strategic_profit_target
            elif entry_analysis.quality == entry_analysis.quality.GOOD:
                return self.good_profit_target
            else:
                return self.average_profit_target
                
        except Exception as e:
            logger.error(f"‚ùå Error calculating expected profit: {e}")
            return self.average_profit_target
    
    def _analyze_current_performance(self, position: Any, current_price: float) -> float:
        """üìà ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏á‡∏≤‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô"""
        try:
            current_profit = getattr(position, 'profit', 0.0)
            entry_price = getattr(position, 'price_open', current_price)
            position_type = getattr(position, 'type', 0)
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Points Profit/Loss
            if position_type == 0:  # BUY
                points_diff = current_price - entry_price
            else:  # SELL
                points_diff = entry_price - current_price
            
            # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô Performance Score (0-100)
            # +50 points = 100 score, -50 points = 0 score
            performance_score = 50 + (points_diff * 1.0)  # 1 point = 1 score
            
            return max(min(performance_score, 100.0), 0.0)
            
        except Exception as e:
            logger.error(f"‚ùå Error analyzing current performance: {e}")
            return 50.0
    
    def _classify_position_quality(self, entry_score: float, current_performance: float, 
                                  position: Any) -> PositionQuality:
        """üéØ ‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á"""
        try:
            current_profit = getattr(position, 'profit', 0.0)
            
            # Strategic Asset: Entry ‡∏î‡∏µ‡∏°‡∏≤‡∏Å ‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏Å‡∏≥‡πÑ‡∏£‡∏î‡∏µ
            if (entry_score >= self.strategic_asset_threshold and 
                current_performance >= 60.0):
                return PositionQuality.STRATEGIC_ASSET
            
            # Good Entry: Entry ‡∏î‡∏µ
            elif entry_score >= self.good_entry_threshold:
                return PositionQuality.GOOD_ENTRY
            
            # Problem Position: ‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡∏°‡∏≤‡∏Å‡πÅ‡∏•‡∏∞ entry ‡πÅ‡∏¢‡πà
            elif (entry_score <= self.poor_entry_threshold and 
                  current_profit < -100.0):
                return PositionQuality.PROBLEM_POSITION
            
            # Poor Entry: Entry ‡πÅ‡∏¢‡πà
            elif entry_score <= self.poor_entry_threshold:
                return PositionQuality.POOR_ENTRY
            
            # Average Entry: ‡∏õ‡∏Å‡∏ï‡∏¥
            else:
                return PositionQuality.AVERAGE_ENTRY
                
        except Exception as e:
            logger.error(f"‚ùå Error classifying position quality: {e}")
            return PositionQuality.AVERAGE_ENTRY
    
    def _determine_hold_strategy(self, quality: PositionQuality, performance: float,
                                entry_info: Dict, portfolio_context: Dict = None) -> HoldStrategy:
        """üõ°Ô∏è ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏Å‡∏≤‡∏£ Hold"""
        try:
            # Strategic Asset: HOLD ‡πÄ‡∏ä‡∏¥‡∏á‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå
            if quality == PositionQuality.STRATEGIC_ASSET:
                if performance >= 70.0:  # ‡∏Å‡∏≥‡πÑ‡∏£‡∏î‡∏µ‡∏°‡∏≤‡∏Å
                    return HoldStrategy.HOLD_STRATEGIC
                else:
                    return HoldStrategy.HOLD_RECOVERY
            
            # Good Entry: HOLD ‡∏õ‡∏Å‡∏ï‡∏¥
            elif quality == PositionQuality.GOOD_ENTRY:
                if performance >= 60.0:  # ‡∏Å‡∏≥‡πÑ‡∏£‡∏î‡∏µ
                    return HoldStrategy.HOLD_STRATEGIC
                elif performance >= 40.0:  # ‡∏Å‡∏≥‡πÑ‡∏£‡∏õ‡∏Å‡∏ï‡∏¥
                    return HoldStrategy.ALLOW_CLOSE
                else:  # ‡∏£‡∏≠ recovery
                    return HoldStrategy.HOLD_RECOVERY
            
            # Problem Position: ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏õ‡∏¥‡∏î
            elif quality == PositionQuality.PROBLEM_POSITION:
                return HoldStrategy.FORCE_CLOSE
            
            # Poor Entry: ‡∏´‡∏≤ exit ‡πÄ‡∏£‡πá‡∏ß
            elif quality == PositionQuality.POOR_ENTRY:
                if performance <= 30.0:  # ‡πÅ‡∏¢‡πà‡∏°‡∏≤‡∏Å
                    return HoldStrategy.FORCE_CLOSE
                else:
                    return HoldStrategy.ALLOW_CLOSE
            
            # Average: ‡∏ï‡∏≤‡∏° 7D ‡∏õ‡∏Å‡∏ï‡∏¥
            else:
                return HoldStrategy.ALLOW_CLOSE
                
        except Exception as e:
            logger.error(f"‚ùå Error determining hold strategy: {e}")
            return HoldStrategy.ALLOW_CLOSE
    
    def _calculate_strategic_value(self, position: Any, entry_info: Dict, 
                                  performance: float, portfolio_context: Dict = None) -> float:
        """üíé ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡πà‡∏≤‡πÄ‡∏ä‡∏¥‡∏á‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå"""
        try:
            base_value = entry_info.get('strategic_value', 50.0)
            
            # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡πà‡∏≤‡∏ï‡∏≤‡∏° Performance
            performance_bonus = (performance - 50.0) * 0.5  # Performance ‡πÅ‡∏ï‡πà‡∏•‡∏∞ point = +0.5 value
            
            # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡πà‡∏≤‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà Hold
            entry_time = entry_info.get('entry_time', datetime.now())
            hold_duration = (datetime.now() - entry_time).total_seconds() / 60  # ‡∏ô‡∏≤‡∏ó‡∏µ
            time_bonus = min(hold_duration / 60.0 * 10.0, 20.0)  # ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î +20 ‡∏à‡∏≤‡∏Å‡πÄ‡∏ß‡∏•‡∏≤
            
            # Portfolio Balance Bonus
            balance_bonus = 0.0
            if portfolio_context:
                # ‡∏ñ‡πâ‡∏≤ Portfolio ‡πÑ‡∏°‡πà‡∏™‡∏°‡∏î‡∏∏‡∏• ‚Üí ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ä‡πà‡∏ß‡∏¢‡∏™‡∏°‡∏î‡∏∏‡∏•‡∏à‡∏∞‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô
                position_type = getattr(position, 'type', 0)
                buy_ratio = portfolio_context.get('buy_ratio', 0.5)
                
                if position_type == 0 and buy_ratio < 0.4:  # BUY ‡∏ô‡πâ‡∏≠‡∏¢
                    balance_bonus = 15.0
                elif position_type == 1 and buy_ratio > 0.6:  # SELL ‡∏ô‡πâ‡∏≠‡∏¢
                    balance_bonus = 15.0
            
            total_value = base_value + performance_bonus + time_bonus + balance_bonus
            
            return max(min(total_value, 100.0), 0.0)
            
        except Exception as e:
            logger.error(f"‚ùå Error calculating strategic value: {e}")
            return 50.0
    
    def _calculate_hold_duration(self, quality: PositionQuality, entry_info: Dict) -> int:
        """‚è∞ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤ Hold ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°"""
        try:
            base_duration = {
                PositionQuality.STRATEGIC_ASSET: self.strategic_hold_duration,
                PositionQuality.GOOD_ENTRY: self.good_hold_duration,
                PositionQuality.AVERAGE_ENTRY: self.average_hold_duration,
                PositionQuality.POOR_ENTRY: self.poor_hold_duration,
                PositionQuality.PROBLEM_POSITION: 10  # ‡∏õ‡∏¥‡∏î‡πÄ‡∏£‡πá‡∏ß‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
            }.get(quality, self.average_hold_duration)
            
            return base_duration
            
        except Exception as e:
            logger.error(f"‚ùå Error calculating hold duration: {e}")
            return self.average_hold_duration
    
    def _should_override_close(self, quality: PositionQuality, strategy: HoldStrategy,
                              performance: float, entry_info: Dict) -> bool:
        """üö´ ‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏Ñ‡∏ß‡∏£ Override ‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"""
        try:
            # Strategic positions: Override ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏∂‡∏á‡πÄ‡∏õ‡πâ‡∏≤
            if (quality == PositionQuality.STRATEGIC_ASSET and 
                strategy == HoldStrategy.HOLD_STRATEGIC):
                expected_profit = entry_info.get('expected_profit', 50.0)
                current_profit = performance - 50.0  # ‡πÅ‡∏õ‡∏•‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô points
                
                if current_profit < expected_profit * 0.7:  # ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏∂‡∏á 70% ‡∏Ç‡∏≠‡∏á‡πÄ‡∏õ‡πâ‡∏≤
                    return True
            
            # Good positions: Override ‡∏ñ‡πâ‡∏≤‡∏Å‡∏≥‡πÑ‡∏£‡∏¢‡∏±‡∏á‡∏ô‡πâ‡∏≠‡∏¢
            elif (quality == PositionQuality.GOOD_ENTRY and 
                  strategy == HoldStrategy.HOLD_STRATEGIC):
                if performance < 65.0:  # ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏∂‡∏á‡∏Å‡∏≥‡πÑ‡∏£‡∏ó‡∏µ‡πà‡∏î‡∏µ
                    return True
            
            # Recovery positions: Override ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô
            elif strategy == HoldStrategy.HOLD_RECOVERY:
                if performance < 45.0:  # ‡∏¢‡∏±‡∏á‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡∏≠‡∏¢‡∏π‡πà
                    return True
            
            return False
            
        except Exception as e:
            logger.error(f"‚ùå Error determining override close: {e}")
            return False
    
    def _generate_strategy_reason(self, quality: PositionQuality, strategy: HoldStrategy, 
                                 performance: float) -> str:
        """üìù ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏Ç‡∏≠‡∏á‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå"""
        try:
            perf_desc = "excellent" if performance >= 70 else "good" if performance >= 50 else "poor"
            
            if strategy == HoldStrategy.HOLD_STRATEGIC:
                return f"{quality.value.lower()} with {perf_desc} performance - strategic hold"
            elif strategy == HoldStrategy.HOLD_RECOVERY:
                return f"{quality.value.lower()} waiting for recovery"
            elif strategy == HoldStrategy.FORCE_CLOSE:
                return f"{quality.value.lower()} requires immediate exit"
            else:
                return f"{quality.value.lower()} - standard management"
                
        except Exception as e:
            logger.error(f"‚ùå Error generating strategy reason: {e}")
            return "Standard position management"
    
    def _create_default_analysis(self, position: Any, current_price: float) -> PositionAnalysis:
        """üìã ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô"""
        return PositionAnalysis(
            position=position,
            quality=PositionQuality.AVERAGE_ENTRY,
            hold_strategy=HoldStrategy.ALLOW_CLOSE,
            strategic_value=50.0,
            entry_quality_score=50.0,
            current_performance=50.0,
            expected_profit=15.0,
            hold_duration_target=60,
            capital_protection_level=0.5,
            should_override_close=False,
            reason="Default analysis due to error"
        )
    
    def get_portfolio_strategic_summary(self, positions: List[Any]) -> Dict[str, Any]:
        """üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå Portfolio"""
        try:
            if not positions:
                return {}
            
            quality_counts = {}
            strategy_counts = {}
            total_strategic_value = 0.0
            override_count = 0
            
            for position in positions:
                analysis = self.analyze_position_strategy(position, 0.0)  # ‡πÉ‡∏ä‡πâ current_price = 0 ‡πÄ‡∏õ‡πá‡∏ô placeholder
                
                quality = analysis.quality.value
                strategy = analysis.hold_strategy.value
                
                quality_counts[quality] = quality_counts.get(quality, 0) + 1
                strategy_counts[strategy] = strategy_counts.get(strategy, 0) + 1
                total_strategic_value += analysis.strategic_value
                
                if analysis.should_override_close:
                    override_count += 1
            
            return {
                'total_positions': len(positions),
                'quality_distribution': quality_counts,
                'strategy_distribution': strategy_counts,
                'average_strategic_value': total_strategic_value / len(positions),
                'positions_with_override': override_count,
                'strategic_assets': quality_counts.get('STRATEGIC_ASSET', 0),
                'problem_positions': quality_counts.get('PROBLEM_POSITION', 0)
            }
            
        except Exception as e:
            logger.error(f"‚ùå Error getting portfolio strategic summary: {e}")
            return {}

# üè≠ Factory Function
def create_strategic_position_manager(smart_entry_timing=None) -> StrategicPositionManager:
    """üè≠ ‡∏™‡∏£‡πâ‡∏≤‡∏á Strategic Position Manager"""
    return StrategicPositionManager(smart_entry_timing)
