# -*- coding: utf-8 -*-
"""
Zone Rebalancer & Smart Distribution System
‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡∏£‡∏±‡∏ö‡∏™‡∏°‡∏î‡∏∏‡∏•‡πÇ‡∏ã‡∏ô‡πÅ‡∏•‡∏∞‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢ Orders ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ä‡∏≤‡∏ç‡∏â‡∏•‡∏≤‡∏î
"""

import logging
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Tuple, Any
from dataclasses import dataclass
from enum import Enum
from calculations import Position
from price_zone_analysis import PriceZoneAnalyzer, ZoneAnalysisResult, SmartEntryRecommendation

logger = logging.getLogger(__name__)

class RebalanceAction(Enum):
    ADD_BUY = "ADD_BUY"
    ADD_SELL = "ADD_SELL"
    CLOSE_EXCESS = "CLOSE_EXCESS"
    MOVE_ORDER = "MOVE_ORDER"
    WAIT = "WAIT"

class RebalancePriority(Enum):
    CRITICAL = "CRITICAL"    # ‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
    HIGH = "HIGH"           # ‡∏Ñ‡∏ß‡∏£‡∏ó‡∏≥‡πÄ‡∏£‡πá‡∏ß
    MEDIUM = "MEDIUM"       # ‡∏ó‡∏≥‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™
    LOW = "LOW"             # ‡∏ó‡∏≥‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏∞‡∏î‡∏ß‡∏Å

@dataclass
class RebalanceRecommendation:
    action: RebalanceAction
    priority: RebalancePriority
    target_zone_id: int
    target_price_range: Tuple[float, float]
    order_type: str  # BUY, SELL
    suggested_volume: float
    confidence_score: float
    reason: str
    expected_improvement: float  # ‡∏Ñ‡∏≤‡∏î‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÑ‡∏î‡πâ‡πÄ‡∏ó‡πà‡∏≤‡πÑ‡∏´‡∏£‡πà
    alternative_actions: List[Dict[str, Any]]

@dataclass
class RebalanceResult:
    total_recommendations: int
    critical_actions: int
    high_priority_actions: int
    expected_score_improvement: float
    estimated_time_to_balance: int  # ‡∏ô‡∏≤‡∏ó‡∏µ
    recommendations: List[RebalanceRecommendation]
    summary: str

class ZoneRebalancer:
    """‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡∏£‡∏±‡∏ö‡∏™‡∏°‡∏î‡∏∏‡∏•‡πÇ‡∏ã‡∏ô‡πÅ‡∏•‡∏∞‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢ Orders"""
    
    def __init__(self, zone_analyzer: PriceZoneAnalyzer):
        self.zone_analyzer = zone_analyzer
        self.last_rebalance_time = None
        self.rebalance_history: List[Dict] = []
        
        # ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
        self.min_rebalance_interval = 300  # 5 ‡∏ô‡∏≤‡∏ó‡∏µ
        self.critical_imbalance_threshold = 0.8  # 80% ‡πÑ‡∏°‡πà‡∏™‡∏°‡∏î‡∏∏‡∏•‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡∏ß‡∏¥‡∏Å‡∏§‡∏ï
        self.target_balance_ratio = 0.6  # ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢ 60:40 ‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡∏™‡∏°‡∏î‡∏∏‡∏•‡∏î‡∏µ
        self.max_zone_density = 5  # Orders ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏ï‡πà‡∏≠‡πÇ‡∏ã‡∏ô
        self.min_improvement_threshold = 5.0  # ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á
        
    def analyze_rebalance_needs(self, positions: List[Position], 
                              current_price: float) -> RebalanceResult:
        """‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏™‡∏°‡∏î‡∏∏‡∏•"""
        try:
            # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
            analysis = self.zone_analyzer.analyze_position_distribution(positions)
            
            if analysis.overall_health_score >= 80:
                return RebalanceResult(
                    total_recommendations=0,
                    critical_actions=0,
                    high_priority_actions=0,
                    expected_score_improvement=0.0,
                    estimated_time_to_balance=0,
                    recommendations=[],
                    summary="‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏î‡∏µ‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏° - ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏™‡∏°‡∏î‡∏∏‡∏•"
                )
            
            # ‡∏´‡∏≤‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
            recommendations = []
            
            # 1. ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÇ‡∏ã‡∏ô‡∏ß‡∏¥‡∏Å‡∏§‡∏ï
            critical_recs = self._handle_critical_zones(analysis, current_price)
            recommendations.extend(critical_recs)
            
            # 2. ‡∏Å‡∏£‡∏≠‡∏Å‡πÇ‡∏ã‡∏ô‡∏ß‡πà‡∏≤‡∏á
            fill_recs = self._handle_empty_zones(analysis, positions, current_price)
            recommendations.extend(fill_recs)
            
            # 3. ‡∏õ‡∏£‡∏±‡∏ö‡∏™‡∏°‡∏î‡∏∏‡∏•‡πÇ‡∏ã‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏™‡∏°‡∏î‡∏∏‡∏•
            balance_recs = self._handle_imbalanced_zones(analysis, current_price)
            recommendations.extend(balance_recs)
            
            # 4. ‡∏•‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏ô‡∏≤‡πÅ‡∏ô‡πà‡∏ô‡πÇ‡∏ã‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏∞‡∏à‡∏∏‡∏Å
            density_recs = self._handle_high_density_zones(analysis, current_price)
            recommendations.extend(density_recs)
            
            # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
            recommendations.sort(key=lambda x: self._get_priority_score(x.priority), reverse=True)
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
            result = self._compile_rebalance_result(recommendations, analysis)
            
            logger.info(f"üéØ ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏™‡∏°‡∏î‡∏∏‡∏•:")
            logger.info(f"   ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: {analysis.overall_health_score:.1f}/100")
            logger.info(f"   ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {result.total_recommendations}")
            logger.info(f"   ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå: +{result.expected_score_improvement:.1f}")
            
            return result
            
        except Exception as e:
            logger.error(f"Error analyzing rebalance needs: {e}")
            return RebalanceResult(
                total_recommendations=0,
                critical_actions=0,
                high_priority_actions=0,
                expected_score_improvement=0.0,
                estimated_time_to_balance=0,
                recommendations=[],
                summary=f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}"
            )
    
    def _handle_critical_zones(self, analysis: ZoneAnalysisResult, 
                             current_price: float) -> List[RebalanceRecommendation]:
        """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÇ‡∏ã‡∏ô‡∏ß‡∏¥‡∏Å‡∏§‡∏ï"""
        recommendations = []
        
        try:
            for zone_id, zone in analysis.zone_map.items():
                if zone.zone_health.value != "CRITICAL":
                    continue
                
                total_orders = zone.buy_count + zone.sell_count
                if total_orders == 0:
                    continue  # ‡πÇ‡∏ã‡∏ô‡∏ß‡πà‡∏≤‡∏á‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏ß‡∏¥‡∏Å‡∏§‡∏ï
                
                # ‡∏´‡∏≤‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î
                buy_ratio = zone.buy_count / total_orders
                sell_ratio = zone.sell_count / total_orders
                
                if buy_ratio > 0.8:  # ‡∏Å‡∏£‡∏∞‡∏à‡∏∏‡∏Å BUY
                    needed_action = RebalanceAction.ADD_SELL
                    order_type = "SELL"
                    imbalance = buy_ratio - 0.5
                elif sell_ratio > 0.8:  # ‡∏Å‡∏£‡∏∞‡∏à‡∏∏‡∏Å SELL
                    needed_action = RebalanceAction.ADD_BUY
                    order_type = "BUY"
                    imbalance = sell_ratio - 0.5
                else:
                    continue
                
                # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°
                suggested_volume = self._calculate_rebalance_volume(zone, order_type)
                
                # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå
                expected_improvement = imbalance * 50  # ‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏Å‡∏≤‡∏£
                
                recommendation = RebalanceRecommendation(
                    action=needed_action,
                    priority=RebalancePriority.CRITICAL,
                    target_zone_id=zone_id,
                    target_price_range=(zone.price_min, zone.price_max),
                    order_type=order_type,
                    suggested_volume=suggested_volume,
                    confidence_score=90.0,
                    reason=f"‡πÇ‡∏ã‡∏ô‡∏ß‡∏¥‡∏Å‡∏§‡∏ï - ‡∏Å‡∏£‡∏∞‡∏à‡∏∏‡∏Å {order_type} {imbalance*100:.1f}%",
                    expected_improvement=expected_improvement,
                    alternative_actions=[]
                )
                
                recommendations.append(recommendation)
                
        except Exception as e:
            logger.error(f"Error handling critical zones: {e}")
        
        return recommendations
    
    def _handle_empty_zones(self, analysis: ZoneAnalysisResult, positions: List[Position],
                          current_price: float) -> List[RebalanceRecommendation]:
        """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÇ‡∏ã‡∏ô‡∏ß‡πà‡∏≤‡∏á"""
        recommendations = []
        
        try:
            if analysis.empty_zones <= 2:  # ‡πÇ‡∏ã‡∏ô‡∏ß‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏±‡∏ç‡∏´‡∏≤
                return recommendations
            
            # ‡∏´‡∏≤‡πÇ‡∏ã‡∏ô‡∏ß‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£‡∏Å‡∏£‡∏≠‡∏Å
            empty_zones = [zone_id for zone_id, zone in analysis.zone_map.items()
                          if zone.buy_count + zone.sell_count == 0]
            
            # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏ã‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏õ‡πá‡∏ô Hot zone
            priority_zones = []
            for zone_id in empty_zones:
                zone = analysis.zone_map[zone_id]
                distance_from_current = abs(zone.price_center - current_price)
                
                # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
                if zone.zone_type.value == "HOT":
                    priority = RebalancePriority.HIGH
                    confidence = 80.0
                elif distance_from_current < 50:  # ‡πÉ‡∏Å‡∏•‡πâ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
                    priority = RebalancePriority.MEDIUM
                    confidence = 70.0
                else:
                    priority = RebalancePriority.LOW
                    confidence = 60.0
                
                # ‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á - ‡∏™‡∏•‡∏±‡∏ö‡∏Å‡∏±‡∏ö‡πÇ‡∏ã‡∏ô‡∏Ç‡πâ‡∏≤‡∏á‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á
                adjacent_zones = self._get_adjacent_zones(zone_id, analysis.zone_map)
                suggested_direction = self._suggest_direction_for_empty_zone(
                    adjacent_zones, positions
                )
                
                suggested_volume = 0.01  # Volume ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
                
                recommendation = RebalanceRecommendation(
                    action=RebalanceAction.ADD_BUY if suggested_direction == "BUY" else RebalanceAction.ADD_SELL,
                    priority=priority,
                    target_zone_id=zone_id,
                    target_price_range=(zone.price_min, zone.price_max),
                    order_type=suggested_direction,
                    suggested_volume=suggested_volume,
                    confidence_score=confidence,
                    reason=f"‡∏Å‡∏£‡∏≠‡∏Å‡πÇ‡∏ã‡∏ô‡∏ß‡πà‡∏≤‡∏á - ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢",
                    expected_improvement=5.0,
                    alternative_actions=[]
                )
                
                priority_zones.append(recommendation)
            
            # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏Ñ‡πà‡πÇ‡∏ã‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î 3 ‡∏≠‡∏±‡∏ô
            priority_zones.sort(key=lambda x: self._get_priority_score(x.priority), reverse=True)
            recommendations.extend(priority_zones[:3])
            
        except Exception as e:
            logger.error(f"Error handling empty zones: {e}")
        
        return recommendations
    
    def _handle_imbalanced_zones(self, analysis: ZoneAnalysisResult,
                               current_price: float) -> List[RebalanceRecommendation]:
        """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÇ‡∏ã‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏™‡∏°‡∏î‡∏∏‡∏•"""
        recommendations = []
        
        try:
            for zone_id, zone in analysis.zone_map.items():
                total_orders = zone.buy_count + zone.sell_count
                if total_orders <= 1:  # ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏´‡∏£‡∏∑‡∏≠‡∏°‡∏µ order ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Ç‡πâ‡∏≤‡∏°
                    continue
                
                buy_ratio = zone.buy_count / total_orders
                imbalance = abs(buy_ratio - 0.5)
                
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡∏™‡∏°‡∏î‡∏∏‡∏•‡πÄ‡∏Å‡∏¥‡∏ô‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                if imbalance < 0.3:  # ‡∏™‡∏°‡∏î‡∏∏‡∏•‡∏û‡∏≠‡πÉ‡∏ä‡πâ
                    continue
                
                # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
                if imbalance > 0.6:
                    priority = RebalancePriority.HIGH
                elif imbalance > 0.4:
                    priority = RebalancePriority.MEDIUM
                else:
                    priority = RebalancePriority.LOW
                
                # ‡∏´‡∏≤‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°
                if buy_ratio > 0.6:
                    needed_action = RebalanceAction.ADD_SELL
                    order_type = "SELL"
                else:
                    needed_action = RebalanceAction.ADD_BUY
                    order_type = "BUY"
                
                suggested_volume = self._calculate_rebalance_volume(zone, order_type)
                expected_improvement = imbalance * 30
                
                recommendation = RebalanceRecommendation(
                    action=needed_action,
                    priority=priority,
                    target_zone_id=zone_id,
                    target_price_range=(zone.price_min, zone.price_max),
                    order_type=order_type,
                    suggested_volume=suggested_volume,
                    confidence_score=75.0,
                    reason=f"‡∏õ‡∏£‡∏±‡∏ö‡∏™‡∏°‡∏î‡∏∏‡∏• - ‡πÑ‡∏°‡πà‡∏™‡∏°‡∏î‡∏∏‡∏• {imbalance*100:.1f}%",
                    expected_improvement=expected_improvement,
                    alternative_actions=[]
                )
                
                recommendations.append(recommendation)
                
        except Exception as e:
            logger.error(f"Error handling imbalanced zones: {e}")
        
        return recommendations
    
    def _handle_high_density_zones(self, analysis: ZoneAnalysisResult,
                                 current_price: float) -> List[RebalanceRecommendation]:
        """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÇ‡∏ã‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏ô‡∏≤‡πÅ‡∏ô‡πà‡∏ô‡∏™‡∏π‡∏á"""
        recommendations = []
        
        try:
            for zone_id, zone in analysis.zone_map.items():
                total_orders = zone.buy_count + zone.sell_count
                if total_orders <= self.max_zone_density:
                    continue
                
                # ‡πÇ‡∏ã‡∏ô‡∏°‡∏µ orders ‡πÄ‡∏¢‡∏≠‡∏∞‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ
                excess_orders = total_orders - self.max_zone_density
                
                # ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡∏õ‡∏¥‡∏î‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô ‡∏´‡∏£‡∏∑‡∏≠ ‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡πÑ‡∏õ‡πÇ‡∏ã‡∏ô‡∏≠‡∏∑‡πà‡∏ô
                recommendation = RebalanceRecommendation(
                    action=RebalanceAction.CLOSE_EXCESS,
                    priority=RebalancePriority.MEDIUM,
                    target_zone_id=zone_id,
                    target_price_range=(zone.price_min, zone.price_max),
                    order_type="MIXED",
                    suggested_volume=excess_orders * 0.01,  # ‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏Å‡∏≤‡∏£
                    confidence_score=65.0,
                    reason=f"‡∏•‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏ô‡∏≤‡πÅ‡∏ô‡πà‡∏ô - ‡πÄ‡∏Å‡∏¥‡∏ô {excess_orders} orders",
                    expected_improvement=10.0,
                    alternative_actions=[]
                )
                
                recommendations.append(recommendation)
                
        except Exception as e:
            logger.error(f"Error handling high density zones: {e}")
        
        return recommendations
    
    def _calculate_rebalance_volume(self, zone, order_type: str) -> float:
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì volume ‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏±‡∏ö‡∏™‡∏°‡∏î‡∏∏‡∏•"""
        try:
            total_orders = zone.buy_count + zone.sell_count
            if total_orders == 0:
                return 0.01  # Volume ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏™‡∏°‡∏î‡∏∏‡∏•
            if order_type == "BUY":
                current_buy = zone.buy_count
                target_buy = (total_orders + 1) // 2
                needed = max(1, target_buy - current_buy)
            else:  # SELL
                current_sell = zone.sell_count
                target_sell = (total_orders + 1) // 2
                needed = max(1, target_sell - current_sell)
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì volume ‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢
            avg_volume = (zone.buy_volume + zone.sell_volume) / total_orders if total_orders > 0 else 0.01
            
            return max(0.01, min(avg_volume * needed, 0.1))  # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 0.1
            
        except Exception as e:
            logger.error(f"Error calculating rebalance volume: {e}")
            return 0.01
    
    def _get_adjacent_zones(self, zone_id: int, zone_map: Dict) -> List[int]:
        """‡∏´‡∏≤‡πÇ‡∏ã‡∏ô‡∏Ç‡πâ‡∏≤‡∏á‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á"""
        adjacent = []
        if zone_id - 1 in zone_map:
            adjacent.append(zone_id - 1)
        if zone_id + 1 in zone_map:
            adjacent.append(zone_id + 1)
        return adjacent
    
    def _suggest_direction_for_empty_zone(self, adjacent_zones: List[int], 
                                        positions: List[Position]) -> str:
        """‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏ã‡∏ô‡∏ß‡πà‡∏≤‡∏á"""
        try:
            if not adjacent_zones:
                # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÇ‡∏ã‡∏ô‡∏Ç‡πâ‡∏≤‡∏á‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á ‡∏î‡∏π‡∏à‡∏≤‡∏Å‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏£‡∏ß‡∏°
                total_buy = sum(1 for pos in positions if pos.type.upper() == 'BUY')
                total_sell = sum(1 for pos in positions if pos.type.upper() == 'SELL')
                
                return "SELL" if total_buy > total_sell else "BUY"
            
            # ‡∏î‡∏π‡∏à‡∏≤‡∏Å‡πÇ‡∏ã‡∏ô‡∏Ç‡πâ‡∏≤‡∏á‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏ï‡∏£‡∏á‡∏Ç‡πâ‡∏≤‡∏°
            adjacent_buy_count = 0
            adjacent_sell_count = 0
            
            for adj_zone_id in adjacent_zones:
                zone = self.zone_analyzer.zones.get(adj_zone_id)
                if zone:
                    adjacent_buy_count += zone.buy_count
                    adjacent_sell_count += zone.sell_count
            
            # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î
            return "BUY" if adjacent_sell_count > adjacent_buy_count else "SELL"
            
        except Exception as e:
            logger.error(f"Error suggesting direction for empty zone: {e}")
            return "BUY"
    
    def _get_priority_score(self, priority: RebalancePriority) -> int:
        """‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô"""
        return {
            RebalancePriority.CRITICAL: 4,
            RebalancePriority.HIGH: 3,
            RebalancePriority.MEDIUM: 2,
            RebalancePriority.LOW: 1
        }.get(priority, 1)
    
    def _compile_rebalance_result(self, recommendations: List[RebalanceRecommendation],
                                analysis: ZoneAnalysisResult) -> RebalanceResult:
        """‡∏£‡∏ß‡∏ö‡∏£‡∏ß‡∏°‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå"""
        try:
            total_recommendations = len(recommendations)
            critical_actions = sum(1 for rec in recommendations 
                                 if rec.priority == RebalancePriority.CRITICAL)
            high_priority_actions = sum(1 for rec in recommendations 
                                      if rec.priority == RebalancePriority.HIGH)
            
            expected_score_improvement = sum(rec.expected_improvement for rec in recommendations)
            
            # ‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏™‡∏°‡∏î‡∏∏‡∏•
            estimated_time = critical_actions * 2 + high_priority_actions * 5  # ‡∏ô‡∏≤‡∏ó‡∏µ
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏∏‡∏õ
            if total_recommendations == 0:
                summary = "‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏î‡∏µ - ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏™‡∏°‡∏î‡∏∏‡∏•"
            elif critical_actions > 0:
                summary = f"‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏™‡∏°‡∏î‡∏∏‡∏•‡∏î‡πà‡∏ß‡∏ô - ‡∏°‡∏µ {critical_actions} ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ó‡∏≥‡∏ß‡∏¥‡∏Å‡∏§‡∏ï"
            elif high_priority_actions > 0:
                summary = f"‡∏Ñ‡∏ß‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏™‡∏°‡∏î‡∏∏‡∏• - ‡∏°‡∏µ {high_priority_actions} ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ó‡∏≥‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç"
            else:
                summary = f"‡∏õ‡∏£‡∏±‡∏ö‡∏™‡∏°‡∏î‡∏∏‡∏•‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏∞‡∏î‡∏ß‡∏Å - ‡∏°‡∏µ {total_recommendations} ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥"
            
            return RebalanceResult(
                total_recommendations=total_recommendations,
                critical_actions=critical_actions,
                high_priority_actions=high_priority_actions,
                expected_score_improvement=expected_score_improvement,
                estimated_time_to_balance=estimated_time,
                recommendations=recommendations,
                summary=summary
            )
            
        except Exception as e:
            logger.error(f"Error compiling rebalance result: {e}")
            return RebalanceResult(
                total_recommendations=0,
                critical_actions=0,
                high_priority_actions=0,
                expected_score_improvement=0.0,
                estimated_time_to_balance=0,
                recommendations=[],
                summary="‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå"
            )
    
    def should_trigger_rebalance(self, analysis: ZoneAnalysisResult) -> bool:
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡∏ß‡∏£ trigger ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏™‡∏°‡∏î‡∏∏‡∏•‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"""
        try:
            # ‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏ß‡∏•‡∏≤
            if self.last_rebalance_time:
                time_since_last = (datetime.now() - self.last_rebalance_time).total_seconds()
                if time_since_last < self.min_rebalance_interval:
                    return False
            
            # ‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç trigger
            conditions_met = 0
            
            # 1. ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏ß‡∏°‡∏ï‡πà‡∏≥
            if analysis.overall_health_score < 60:
                conditions_met += 1
            
            # 2. ‡∏°‡∏µ‡πÇ‡∏ã‡∏ô‡∏ß‡∏¥‡∏Å‡∏§‡∏ï
            if analysis.critical_zones > 0:
                conditions_met += 1
            
            # 3. ‡πÇ‡∏ã‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏°‡∏î‡∏∏‡∏•‡∏°‡∏≤‡∏Å
            if analysis.imbalanced_zones > analysis.total_zones * 0.5:
                conditions_met += 1
            
            # 4. ‡πÇ‡∏ã‡∏ô‡∏ß‡πà‡∏≤‡∏á‡∏°‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ
            if analysis.empty_zones > analysis.total_zones * 0.4:
                conditions_met += 1
            
            # ‡∏ï‡πâ‡∏≠‡∏á‡∏ú‡πà‡∏≤‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 2 ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç
            should_trigger = conditions_met >= 2
            
            if should_trigger:
                logger.info(f"üéØ ‡∏Ñ‡∏ß‡∏£ trigger Rebalance ({conditions_met}/4 ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç)")
            
            return should_trigger
            
        except Exception as e:
            logger.error(f"Error checking rebalance trigger: {e}")
            return False
    
    def get_rebalance_summary(self, result: RebalanceResult) -> str:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏™‡∏°‡∏î‡∏∏‡∏•‡πÅ‡∏ö‡∏ö readable"""
        try:
            if result.total_recommendations == 0:
                return "‚úÖ ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏î‡∏µ‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏° - ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏™‡∏°‡∏î‡∏∏‡∏•"
            
            lines = []
            lines.append(f"üéØ ‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏™‡∏°‡∏î‡∏∏‡∏•:")
            lines.append(f"   üìä ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {result.total_recommendations}")
            
            if result.critical_actions > 0:
                lines.append(f"   üö® ‡∏ß‡∏¥‡∏Å‡∏§‡∏ï: {result.critical_actions} ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ó‡∏≥")
            
            if result.high_priority_actions > 0:
                lines.append(f"   ‚ö†Ô∏è ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç: {result.high_priority_actions} ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ó‡∏≥")
            
            lines.append(f"   üìà ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå: +{result.expected_score_improvement:.1f}")
            lines.append(f"   ‚è±Ô∏è ‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì: {result.estimated_time_to_balance} ‡∏ô‡∏≤‡∏ó‡∏µ")
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç 3 ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡πÅ‡∏£‡∏Å
            if result.recommendations:
                lines.append(f"   üéØ ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç:")
                for i, rec in enumerate(result.recommendations[:3], 1):
                    lines.append(f"      {i}. Zone {rec.target_zone_id}: {rec.action.value} "
                               f"({rec.priority.value}) - {rec.reason}")
            
            return "\n".join(lines)
            
        except Exception as e:
            logger.error(f"Error creating rebalance summary: {e}")
            return "‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏∏‡∏õ"
