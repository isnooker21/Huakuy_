# -*- coding: utf-8 -*-
"""
Test GUI Enhancements
‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á GUI
"""

import sys
import time
import logging
import threading
from typing import Dict, List, Any
from datetime import datetime

# Setup logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def test_position_status_widget():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö PositionStatusWidget"""
    try:
        logger.info("üß™ Testing PositionStatusWidget...")
        
        # Import modules
        from enhanced_position_widget import PositionStatusWidget
        import tkinter as tk
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á test window
        root = tk.Tk()
        root.title("Position Status Widget Test")
        root.geometry("800x600")
        
        # Test data
        test_position_data = {
            'ticket': 12345,
            'type': 0,  # BUY
            'volume': 0.1,
            'price_open': 2650.50,
            'price_current': 2651.20,
            'profit': 15.30,
            'status': 'HG - ‡∏Ñ‡πâ‡∏≥ SELL Zone ‡∏•‡πà‡∏≤‡∏á (4:1)',
            'relationships': {
                'is_hedging': True,
                'hedge_target': {
                    'ticket': 12346,
                    'direction': 'SELL',
                    'profit': -50.0
                },
                'hedge_ratio': '4:1'
            }
        }
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á widget
        widget = PositionStatusWidget(root, test_position_data)
        widget.frame.pack(fill='x', padx=10, pady=5)
        
        # Test update
        updated_data = test_position_data.copy()
        updated_data['profit'] = 25.50
        updated_data['status'] = 'Support Guard - ‡∏´‡πâ‡∏≤‡∏°‡∏õ‡∏¥‡∏î ‡∏Ñ‡πâ‡∏≥ 2 ‡πÑ‡∏°‡πâ'
        
        def update_test():
            time.sleep(2)
            widget.update_status(updated_data)
            logger.info("‚úÖ PositionStatusWidget update test completed")
        
        # ‡∏£‡∏±‡∏ô update test ‡πÉ‡∏ô background
        threading.Thread(target=update_test, daemon=True).start()
        
        # ‡πÅ‡∏™‡∏î‡∏á window
        root.after(5000, root.quit)  # ‡∏õ‡∏¥‡∏î‡∏´‡∏•‡∏±‡∏á 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
        root.mainloop()
        
        logger.info("‚úÖ PositionStatusWidget test completed successfully")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå PositionStatusWidget test failed: {e}")
        return False

def test_async_status_updater():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö AsyncStatusUpdater"""
    try:
        logger.info("üß™ Testing AsyncStatusUpdater...")
        
        from enhanced_position_widget import AsyncStatusUpdater
        from position_status_manager import PositionStatusManager
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á mock objects
        class MockGUI:
            def __init__(self):
                self.root = None
                self.position_widgets = {}
                
            def after_idle(self, func):
                func()
        
        class MockStatusManager:
            def analyze_all_positions(self, positions, current_price, zones, market_condition):
                return {}
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á test objects
        mock_gui = MockGUI()
        mock_status_manager = MockStatusManager()
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á AsyncStatusUpdater
        updater = AsyncStatusUpdater(
            gui_instance=mock_gui,
            status_manager=mock_status_manager,
            update_interval=1.0  # 1 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
        )
        
        # ‡πÄ‡∏£‡∏¥‡πà‡∏° updates
        updater.start_background_updates()
        
        # ‡∏£‡∏≠ 3 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
        time.sleep(3)
        
        # ‡∏´‡∏¢‡∏∏‡∏î updates
        updater.stop_background_updates()
        
        logger.info("‚úÖ AsyncStatusUpdater test completed successfully")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå AsyncStatusUpdater test failed: {e}")
        return False

def test_performance_optimizer():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö GUIPerformanceOptimizer"""
    try:
        logger.info("üß™ Testing GUIPerformanceOptimizer...")
        
        from gui_performance_optimizer import GUIPerformanceOptimizer
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á optimizer
        optimizer = GUIPerformanceOptimizer(max_memory_mb=100)
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö update throttling
        assert optimizer.should_update('test_type') == True, "First update should be allowed"
        assert optimizer.should_update('test_type') == False, "Second update should be throttled"
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö performance recording
        optimizer.record_gui_response_time(50.0)
        optimizer.record_update_duration('test', 1.5)
        optimizer.record_success('test_operation')
        optimizer.record_error('test_error')
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö performance report
        report = optimizer.get_performance_report()
        assert 'memory' in report, "Report should contain memory info"
        assert 'performance' in report, "Report should contain performance info"
        assert 'reliability' in report, "Report should contain reliability info"
        
        logger.info("‚úÖ GUIPerformanceOptimizer test completed successfully")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå GUIPerformanceOptimizer test failed: {e}")
        return False

def test_lazy_loader():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö LazyPositionLoader"""
    try:
        logger.info("üß™ Testing LazyPositionLoader...")
        
        from gui_performance_optimizer import LazyPositionLoader
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á mock positions
        class MockPosition:
            def __init__(self, ticket):
                self.ticket = ticket
        
        positions = [MockPosition(i) for i in range(100)]
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á lazy loader
        loader = LazyPositionLoader(batch_size=10, max_loaded=20)
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö loading
        visible = loader.load_visible_positions(positions, scroll_position=0)
        assert len(visible) == 10, f"Should load 10 positions, got {len(visible)}"
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö loading more
        visible2 = loader.load_visible_positions(positions, scroll_position=10)
        assert len(visible2) == 10, f"Should load 10 more positions, got {len(visible2)}"
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö stats
        stats = loader.get_load_stats()
        assert 'loaded_count' in stats, "Stats should contain loaded_count"
        
        logger.info("‚úÖ LazyPositionLoader test completed successfully")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå LazyPositionLoader test failed: {e}")
        return False

def test_update_throttler():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö UpdateThrottler"""
    try:
        logger.info("üß™ Testing UpdateThrottler...")
        
        from gui_performance_optimizer import UpdateThrottler
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á throttler
        throttler = UpdateThrottler(min_interval=1.0)
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö throttling
        assert throttler.should_update('test') == True, "First update should be allowed"
        assert throttler.should_update('test') == False, "Second update should be throttled"
        
        # ‡∏£‡∏≠ 1 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
        time.sleep(1.1)
        assert throttler.should_update('test') == True, "Update should be allowed after interval"
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö stats
        stats = throttler.get_update_stats()
        assert 'last_updates' in stats, "Stats should contain last_updates"
        
        logger.info("‚úÖ UpdateThrottler test completed successfully")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå UpdateThrottler test failed: {e}")
        return False

def run_integration_test():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏£‡∏ß‡∏°‡∏£‡∏∞‡∏ö‡∏ö"""
    try:
        logger.info("üß™ Running integration test...")
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£ import modules ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        from enhanced_position_widget import PositionStatusWidget, AsyncStatusUpdater
        from gui_performance_optimizer import GUIPerformanceOptimizer, LazyPositionLoader, UpdateThrottler
        from position_status_manager import PositionStatusManager
        
        logger.info("‚úÖ All modules imported successfully")
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á objects
        optimizer = GUIPerformanceOptimizer()
        loader = LazyPositionLoader()
        throttler = UpdateThrottler()
        
        logger.info("‚úÖ All objects created successfully")
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ô
        assert optimizer.should_update('integration_test') == True
        assert loader.load_visible_positions([]) == []
        assert throttler.should_update('integration_test') == True
        
        logger.info("‚úÖ Integration test completed successfully")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Integration test failed: {e}")
        return False

def main():
    """‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
    logger.info("üöÄ Starting GUI Enhancements Tests...")
    
    tests = [
        ("PositionStatusWidget", test_position_status_widget),
        ("AsyncStatusUpdater", test_async_status_updater),
        ("GUIPerformanceOptimizer", test_performance_optimizer),
        ("LazyPositionLoader", test_lazy_loader),
        ("UpdateThrottler", test_update_throttler),
        ("Integration Test", run_integration_test)
    ]
    
    results = []
    
    for test_name, test_func in tests:
        logger.info(f"üß™ Running {test_name} test...")
        try:
            result = test_func()
            results.append((test_name, result))
            if result:
                logger.info(f"‚úÖ {test_name} test PASSED")
            else:
                logger.error(f"‚ùå {test_name} test FAILED")
        except Exception as e:
            logger.error(f"‚ùå {test_name} test ERROR: {e}")
            results.append((test_name, False))
    
    # ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
    logger.info("üìä Test Results Summary:")
    passed = sum(1 for _, result in results if result)
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ PASSED" if result else "‚ùå FAILED"
        logger.info(f"   {test_name}: {status}")
    
    logger.info(f"üìä Overall: {passed}/{total} tests passed ({passed/total*100:.1f}%)")
    
    if passed == total:
        logger.info("üéâ All tests passed! GUI enhancements are ready.")
        return True
    else:
        logger.error("‚ö†Ô∏è Some tests failed. Please check the implementation.")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
