# -*- coding: utf-8 -*-
"""
Position Status Manager
‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏°‡πâ‡πÅ‡∏ö‡∏ö Real-time
"""

import logging
import time
from typing import Dict, List, Any, Optional, Tuple
from dataclasses import dataclass
from datetime import datetime

logger = logging.getLogger(__name__)

@dataclass
class PositionStatus:
    """‡∏Ñ‡∏•‡∏≤‡∏™‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á Position"""
    ticket: int
    status: str
    zone: str
    relationships: Dict[str, Any]
    ratio_info: Dict[str, Any]
    last_update: float
    profit: float
    direction: str
    price_open: float
    price_current: float

@dataclass
class ZoneInfo:
    """‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Zone"""
    zone_type: str  # 'support', 'resistance', 'breakout'
    strength: float
    level: float
    tolerance: float
    last_touch: float

class PositionStatusManager:
    """‡∏Ñ‡∏•‡∏≤‡∏™‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Position ‡πÅ‡∏ö‡∏ö Real-time"""
    
    def __init__(self):
        self.status_definitions = {
            'HG': '‡∏Ñ‡πâ‡∏≥‡πÑ‡∏°‡πâ‡∏ù‡∏±‡πà‡∏á‡∏ï‡∏£‡∏á‡∏Ç‡πâ‡∏≤‡∏°',
            'SUPPORT_GUARD': '‡∏´‡πâ‡∏≤‡∏°‡∏õ‡∏¥‡∏î - ‡∏Ñ‡πâ‡∏≥‡πÑ‡∏°‡πâ‡∏≠‡∏∑‡πà‡∏ô', 
            'PROTECTED': '‡∏°‡∏µ‡πÑ‡∏°‡πâ‡∏Ñ‡πâ‡∏≥‡πÅ‡∏•‡πâ‡∏ß ‡∏£‡∏≠‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠',
            'PROFIT_HELPER': '‡πÑ‡∏°‡πâ‡∏Å‡∏≥‡πÑ‡∏£ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠',
            'STANDALONE': '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà'
        }
        
        self.position_relationships = {}
        self.zone_assignments = {}
        self.status_cache = {}
        self.last_analysis_time = 0
        self.analysis_interval = 3  # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ó‡∏∏‡∏Å 3 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
        
        # üéØ Dynamic Parameters ‡∏ï‡∏≤‡∏° Market Condition
        self.zone_tolerance_levels = {
            'volatile': 0.001,    # ‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏°‡∏≤‡∏Å
            'trending': 0.3,      # ‡∏¢‡∏∑‡∏î‡∏´‡∏¢‡∏∏‡πà‡∏ô
            'sideways': 0.1       # ‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á
        }
        
        self.min_zone_strength_levels = {
            'volatile': 0.001,    # ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏î‡πâ‡∏á‡πà‡∏≤‡∏¢
            'trending': 0.01,     # ‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á
            'sideways': 0.03      # ‡πÄ‡∏Ç‡πâ‡∏°‡∏á‡∏ß‡∏î
        }
        
    def analyze_all_positions(self, positions: List[Any], current_price: float, 
                            zones: Any, market_condition: str = 'sideways') -> Dict[int, PositionStatus]:
        """
        ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ó‡∏∏‡∏Å‡πÑ‡∏°‡πâ‡πÅ‡∏ö‡∏ö Real-time
        
        Args:
            positions: ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ Position ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
            current_price: ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
            zones: ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ Zone
            market_condition: ‡∏™‡∏†‡∏≤‡∏ß‡∏∞‡∏ï‡∏•‡∏≤‡∏î ('volatile', 'trending', 'sideways')
            
        Returns:
            Dict[int, PositionStatus]: ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞ Position
        """
        try:
            current_time = time.time()
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÉ‡∏´‡∏°‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if current_time - self.last_analysis_time < self.analysis_interval:
                return self.status_cache
                
            logger.info(f"üîç [STATUS ANALYSIS] ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ {len(positions)} ‡πÑ‡∏°‡πâ (Market: {market_condition})")
            
            # ‡∏õ‡∏£‡∏±‡∏ö‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ï‡∏≤‡∏° Market Condition
            self._adjust_zone_parameters(market_condition)
            
            status_results = {}
            
            for position in positions:
                try:
                    # 1. ‡∏à‡∏≥‡πÅ‡∏ô‡∏Å Zone
                    zone = self._classify_position_zone(position, current_price, zones)
                    
                    # 2. ‡∏´‡∏≤ Relationships
                    relationships = self._find_position_relationships(position, positions)
                    
                    # 3. ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
                    status = self._determine_position_status(position, zone, relationships)
                    
                    # 4. ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Ratio (‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô HG)
                    ratio_info = self._calculate_hedge_ratio(position, relationships)
                    
                    # 5. ‡∏™‡∏£‡πâ‡∏≤‡∏á PositionStatus Object
                    position_status = PositionStatus(
                        ticket=getattr(position, 'ticket', 0),
                        status=status,
                        zone=zone.get('type', 'unknown'),
                        relationships=relationships,
                        ratio_info=ratio_info,
                        last_update=current_time,
                        profit=getattr(position, 'profit', 0.0),
                        direction='BUY' if getattr(position, 'type', 0) == 0 else 'SELL',
                        price_open=getattr(position, 'price_open', 0.0),
                        price_current=getattr(position, 'price_current', current_price)
                    )
                    
                    status_results[position_status.ticket] = position_status
                    
                except Exception as e:
                    logger.error(f"‚ùå Error analyzing position {getattr(position, 'ticket', 'unknown')}: {e}")
                    continue
            
            # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó Cache
            self.status_cache = status_results
            self.last_analysis_time = current_time
            
            # Log ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå
            self._log_analysis_summary(status_results)
            
            return status_results
            
        except Exception as e:
            logger.error(f"‚ùå Error in analyze_all_positions: {e}")
            return self.status_cache
    
    def _adjust_zone_parameters(self, market_condition: str):
        """‡∏õ‡∏£‡∏±‡∏ö‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå Zone ‡∏ï‡∏≤‡∏° Market Condition"""
        self.zone_tolerance = self.zone_tolerance_levels.get(market_condition, 0.1)
        self.min_zone_strength = self.min_zone_strength_levels.get(market_condition, 0.03)
        
        logger.debug(f"üîß [ZONE PARAMS] Market: {market_condition}, "
                    f"Tolerance: {self.zone_tolerance}, Min Strength: {self.min_zone_strength}")
    
    def _classify_position_zone(self, position: Any, current_price: float, zones: Any) -> Dict[str, Any]:
        """‡∏à‡∏≥‡πÅ‡∏ô‡∏Å Zone ‡∏Ç‡∏≠‡∏á Position"""
        try:
            position_price = getattr(position, 'price_open', 0.0)
            position_type = getattr(position, 'type', 0)
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ zones ‡πÄ‡∏õ‡πá‡∏ô list ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if not isinstance(zones, list) or not zones:
                return {
                    'type': 'standalone',
                    'level': position_price,
                    'strength': 0.0,
                    'distance': float('inf')
                }
            
            # ‡∏´‡∏≤ Zone ‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
            closest_zone = None
            min_distance = float('inf')
            
            for zone in zones:
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ zone ‡πÄ‡∏õ‡πá‡∏ô dict ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                if not isinstance(zone, dict):
                    continue
                    
                zone_level = zone.get('level', 0.0)
                distance = abs(position_price - zone_level)
                
                if distance < min_distance:
                    min_distance = distance
                    closest_zone = zone
            
            if closest_zone and min_distance <= self.zone_tolerance:
                return {
                    'type': closest_zone.get('type', 'unknown'),
                    'level': closest_zone.get('level', 0.0),
                    'strength': closest_zone.get('strength', 0.0),
                    'distance': min_distance
                }
            else:
                return {
                    'type': 'standalone',
                    'level': position_price,
                    'strength': 0.0,
                    'distance': min_distance
                }
                
        except Exception as e:
            logger.error(f"‚ùå Error classifying zone: {e}")
            return {'type': 'unknown', 'level': 0.0, 'strength': 0.0, 'distance': float('inf')}
    
    def _find_position_relationships(self, position: Any, all_positions: List[Any]) -> Dict[str, Any]:
        """‡∏´‡∏≤ Relationships ‡∏Ç‡∏≠‡∏á Position"""
        try:
            relationships = {
                'is_hedging': False,
                'is_protecting_others': False,
                'is_protected': False,
                'has_assignment': False,
                'hedge_target': None,
                'hedge_ratio': '1:1',
                'protecting': [],
                'protected_by': None
            }
            
            position_ticket = getattr(position, 'ticket', 0)
            position_type = getattr(position, 'type', 0)
            position_profit = getattr(position, 'profit', 0.0)
            
            # ‡∏´‡∏≤ Position ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏ù‡∏±‡πà‡∏á‡∏ï‡∏£‡∏á‡∏Ç‡πâ‡∏≤‡∏°
            opposite_positions = [
                p for p in all_positions 
                if getattr(p, 'ticket', 0) != position_ticket and 
                   getattr(p, 'type', 0) != position_type
            ]
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö HG (Hedge Guard)
            for opp_pos in opposite_positions:
                opp_profit = getattr(opp_pos, 'profit', 0.0)
                
                # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πâ‡∏ù‡∏±‡πà‡∏á‡∏ï‡∏£‡∏á‡∏Ç‡πâ‡∏≤‡∏°‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πâ‡∏ô‡∏µ‡πâ‡∏Å‡∏≥‡πÑ‡∏£
                if opp_profit < -5.0 and position_profit > 0:
                    relationships['is_hedging'] = True
                    relationships['hedge_target'] = {
                        'ticket': getattr(opp_pos, 'ticket', 0),
                        'direction': 'BUY' if getattr(opp_pos, 'type', 0) == 0 else 'SELL',
                        'profit': opp_profit
                    }
                    relationships['hedge_ratio'] = self._calculate_hedge_ratio_string(position_profit, opp_profit)
                    break
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Support Guard (‡πÑ‡∏°‡πâ‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏≥‡πÑ‡∏°‡πâ‡∏≠‡∏∑‡πà‡∏ô)
            if position_profit > 0:
                protected_positions = [
                    p for p in all_positions 
                    if getattr(p, 'ticket', 0) != position_ticket and 
                       getattr(p, 'type', 0) == position_type and
                       getattr(p, 'profit', 0.0) < -2.0
                ]
                
                if protected_positions:
                    relationships['is_protecting_others'] = True
                    relationships['protecting'] = [
                        {'ticket': getattr(p, 'ticket', 0), 'profit': getattr(p, 'profit', 0.0)}
                        for p in protected_positions
                    ]
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Protected (‡πÑ‡∏°‡πâ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏Ñ‡πâ‡∏≥)
            if position_profit < -2.0:
                protector_positions = [
                    p for p in all_positions 
                    if getattr(p, 'ticket', 0) != position_ticket and 
                       getattr(p, 'type', 0) == position_type and
                       getattr(p, 'profit', 0.0) > 0
                ]
                
                if protector_positions:
                    relationships['is_protected'] = True
                    relationships['protected_by'] = {
                        'ticket': getattr(protector_positions[0], 'ticket', 0),
                        'profit': getattr(protector_positions[0], 'profit', 0.0)
                    }
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Assignment
            relationships['has_assignment'] = (
                relationships['is_hedging'] or 
                relationships['is_protecting_others'] or 
                relationships['is_protected']
            )
            
            return relationships
            
        except Exception as e:
            logger.error(f"‚ùå Error finding relationships: {e}")
            return {'is_hedging': False, 'is_protecting_others': False, 'is_protected': False, 'has_assignment': False}
    
    def _determine_position_status(self, position: Any, zone: Dict[str, Any], 
                                 relationships: Dict[str, Any]) -> str:
        """‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ï‡∏≤‡∏°‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡∏°‡∏≤"""
        try:
            position_profit = getattr(position, 'profit', 0.0)
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö HG ‡∏Å‡πà‡∏≠‡∏ô
            if relationships.get('is_hedging'):
                target_info = relationships['hedge_target']
                ratio = relationships.get('hedge_ratio', '1:1')
                return f"HG - ‡∏Ñ‡πâ‡∏≥ {target_info['direction']} Zone {zone.get('type', 'unknown')} ({ratio})"
                
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Support Guard
            elif relationships.get('is_protecting_others'):
                protected_count = len(relationships['protecting'])
                return f"Support Guard - ‡∏´‡πâ‡∏≤‡∏°‡∏õ‡∏¥‡∏î ‡∏Ñ‡πâ‡∏≥ {protected_count} ‡πÑ‡∏°‡πâ"
                
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Protected
            elif relationships.get('is_protected'):
                protector = relationships['protected_by']
                return f"Protected - ‡∏°‡∏µ HG ‡∏Ñ‡πâ‡∏≥‡πÅ‡∏•‡πâ‡∏ß ‡∏£‡∏≠‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠ (‡πÇ‡∏î‡∏¢ #{protector['ticket']})"
                
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Profit Helper
            elif position_profit > 0 and not relationships.get('has_assignment'):
                available_zones = self._find_zones_needing_help()
                if available_zones:
                    return f"Profit Helper - ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ä‡πà‡∏ß‡∏¢ Zone {available_zones[0]}"
                else:
                    return "Profit Helper - ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠"
                    
            # ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Default
            else:
                return "Standalone - ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà"
                
        except Exception as e:
            logger.error(f"‚ùå Error determining status: {e}")
            return "Unknown - ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå"
    
    def _calculate_hedge_ratio(self, position: Any, relationships: Dict[str, Any]) -> Dict[str, Any]:
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Ratio ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö HG"""
        try:
            if not relationships.get('is_hedging'):
                return {'ratio': '1:1', 'strength': 0.0}
            
            position_profit = getattr(position, 'profit', 0.0)
            target_profit = relationships['hedge_target']['profit']
            
            if target_profit == 0:
                return {'ratio': '1:1', 'strength': 0.0}
            
            ratio_value = abs(position_profit / target_profit)
            ratio_string = f"{ratio_value:.1f}:1"
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏Å‡∏£‡πà‡∏á‡∏Ç‡∏≠‡∏á HG
            strength = min(ratio_value, 2.0) / 2.0  # 0-1 scale
            
            return {
                'ratio': ratio_string,
                'strength': strength,
                'position_profit': position_profit,
                'target_profit': target_profit
            }
            
        except Exception as e:
            logger.error(f"‚ùå Error calculating hedge ratio: {e}")
            return {'ratio': '1:1', 'strength': 0.0}
    
    def _calculate_hedge_ratio_string(self, position_profit: float, target_profit: float) -> str:
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Ratio String"""
        try:
            if target_profit == 0:
                return "1:1"
            
            ratio_value = abs(position_profit / target_profit)
            return f"{ratio_value:.1f}:1"
            
        except Exception as e:
            logger.error(f"‚ùå Error calculating ratio string: {e}")
            return "1:1"
    
    def _find_zones_needing_help(self) -> List[str]:
        """‡∏´‡∏≤ Zone ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠"""
        # ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: ‡∏´‡∏≤ Zone ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÑ‡∏°‡πâ‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô
        return ['Zone A', 'Zone B']  # Placeholder
    
    def _log_analysis_summary(self, status_results: Dict[int, PositionStatus]):
        """Log ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå"""
        try:
            if not status_results:
                return
            
            # ‡∏ô‡∏±‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ï‡πà‡∏≤‡∏á‡πÜ
            status_counts = {}
            for status_obj in status_results.values():
                status_type = status_obj.status.split(' - ')[0]
                status_counts[status_type] = status_counts.get(status_type, 0) + 1
            
            # Log ‡∏™‡∏£‡∏∏‡∏õ
            summary_parts = []
            for status_type, count in status_counts.items():
                summary_parts.append(f"{status_type}: {count}")
            
            logger.info(f"üìä [STATUS SUMMARY] {', '.join(summary_parts)}")
            
            # Log ‡πÑ‡∏°‡πâ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏û‡∏¥‡πÄ‡∏®‡∏©
            special_positions = [
                (ticket, status_obj.status) 
                for ticket, status_obj in status_results.items() 
                if 'HG' in status_obj.status or 'Support Guard' in status_obj.status
            ]
            
            if special_positions:
                for ticket, status in special_positions:
                    logger.info(f"üéØ [SPECIAL STATUS] #{ticket}: {status}")
                    
        except Exception as e:
            logger.error(f"‚ùå Error logging analysis summary: {e}")
    
    def get_position_status(self, ticket: int) -> Optional[PositionStatus]:
        """‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á Position ‡∏ï‡∏≤‡∏° Ticket"""
        return self.status_cache.get(ticket)
    
    def get_all_statuses(self) -> Dict[int, PositionStatus]:
        """‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
        return self.status_cache.copy()
    
    def clear_cache(self):
        """‡∏•‡πâ‡∏≤‡∏á Cache"""
        self.status_cache.clear()
        self.last_analysis_time = 0
        logger.info("üßπ [CACHE] Cleared position status cache")
