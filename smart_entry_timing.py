"""
üéØ Smart Entry Timing System
‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏°‡πâ‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞‡∏ó‡∏µ‡πà‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô BUY ‡∏™‡∏π‡∏á SELL ‡∏ï‡πà‡∏≥

Features:
- Price Hierarchy Enforcement (BUY < SELL ‡πÄ‡∏™‡∏°‡∏≠)
- Entry Quality Analysis
- Strategic Entry Timing
- Support/Resistance Detection
- Market Structure Analysis
- Perfect Entry Point Detection
"""

import logging
import numpy as np
from typing import Dict, List, Optional, Tuple, Any
from dataclasses import dataclass
from datetime import datetime, timedelta
from enum import Enum

logger = logging.getLogger(__name__)

class EntryQuality(Enum):
    """‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏à‡∏∏‡∏î‡πÄ‡∏Ç‡πâ‡∏≤"""
    EXCELLENT = "EXCELLENT"  # ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢ - ‡∏à‡∏∏‡∏î‡∏î‡∏µ‡∏°‡∏≤‡∏Å
    GOOD = "GOOD"           # ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏î‡πâ - ‡∏à‡∏∏‡∏î‡∏î‡∏µ
    AVERAGE = "AVERAGE"     # ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏î‡πâ - ‡∏à‡∏∏‡∏î‡∏õ‡∏Å‡∏ï‡∏¥
    POOR = "POOR"          # ‡∏£‡∏≠‡∏î‡∏µ‡∏Å‡∏ß‡πà‡∏≤ - ‡∏à‡∏∏‡∏î‡πÅ‡∏¢‡πà
    TERRIBLE = "TERRIBLE"   # ‡∏´‡πâ‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤ - ‡∏à‡∏∏‡∏î‡πÅ‡∏¢‡πà‡∏°‡∏≤‡∏Å

class EntryTiming(Enum):
    """‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤"""
    ENTER_NOW = "ENTER_NOW"           # ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
    WAIT_PULLBACK = "WAIT_PULLBACK"   # ‡∏£‡∏≠ pullback
    WAIT_BREAKOUT = "WAIT_BREAKOUT"   # ‡∏£‡∏≠ breakout
    SKIP_SIGNAL = "SKIP_SIGNAL"       # ‡∏Ç‡πâ‡∏≤‡∏°‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏ô‡∏µ‡πâ

@dataclass
class PriceLevel:
    """‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç"""
    price: float
    level_type: str  # "SUPPORT", "RESISTANCE", "PIVOT"
    strength: float  # 0.0-1.0
    touches: int     # ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏£‡∏≤‡∏Ñ‡∏≤‡πÅ‡∏ï‡∏∞
    age_minutes: int # ‡∏≠‡∏≤‡∏¢‡∏∏‡∏Ç‡∏≠‡∏á level

@dataclass
class EntryAnalysis:
    """‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏à‡∏∏‡∏î‡πÄ‡∏Ç‡πâ‡∏≤"""
    quality: EntryQuality
    timing: EntryTiming
    score: float  # 0-100
    current_price: float
    suggested_price: float  # ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤
    wait_reason: str
    confidence: float
    price_hierarchy_ok: bool  # ‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡∏ï‡∏≤‡∏° BUY < SELL ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    strategic_value: float    # ‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡πà‡∏≤‡πÄ‡∏ä‡∏¥‡∏á‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå

class SmartEntryTiming:
    """üéØ ‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏°‡πâ‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞"""
    
    def __init__(self, mt5_connection=None, symbol: str = "XAUUSD"):
        self.mt5 = mt5_connection
        self.symbol = symbol
        
        # üìä Market Structure Detection
        self.lookback_periods = 50  # ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô candle ‡∏ó‡∏µ‡πà‡∏î‡∏π‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á
        self.support_resistance_strength = 0.7  # ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏Å‡∏£‡πà‡∏á‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥
        
        # üéØ Entry Quality Thresholds
        self.excellent_distance = 5.0   # ‡∏´‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å S/R ‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ 5 points = EXCELLENT
        self.good_distance = 10.0       # ‡∏´‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å S/R ‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ 10 points = GOOD
        self.poor_distance = 20.0       # ‡∏´‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å S/R ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 20 points = POOR
        
        # üîÑ Price Hierarchy Rules
        self.min_buy_sell_distance = 10.0  # BUY ‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤ SELL ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 10 points
        self.hierarchy_buffer = 5.0        # buffer ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö price hierarchy
        
        # üìà Market Analysis
        self.price_history = []
        self.support_levels = []
        self.resistance_levels = []
        self.last_analysis_time = None
        
        logger.info("üéØ Smart Entry Timing System initialized")
    
    def analyze_entry_opportunity(self, signal_direction: str, current_price: float, 
                                 existing_positions: List[Any] = None) -> EntryAnalysis:
        """
        üîç ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏°‡πâ
        
        Args:
            signal_direction: "BUY" ‡∏´‡∏£‡∏∑‡∏≠ "SELL"
            current_price: ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
            existing_positions: ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
            
        Returns:
            EntryAnalysis: ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå
        """
        try:
            logger.info(f"üîç Analyzing {signal_direction} entry at {current_price:.2f}")
            
            # 1. üìä ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó Market Structure
            self._update_market_structure(current_price)
            
            # 2. üîÑ ‡πÄ‡∏ä‡πá‡∏Ñ Price Hierarchy
            hierarchy_check = self._check_price_hierarchy(
                signal_direction, current_price, existing_positions
            )
            
            # 3. üéØ ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå Entry Quality
            quality_analysis = self._analyze_entry_quality(signal_direction, current_price)
            
            # 4. ‚è∞ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î Entry Timing
            timing_decision = self._determine_entry_timing(
                signal_direction, current_price, quality_analysis, hierarchy_check
            )
            
            # 5. üíé ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Strategic Value
            strategic_value = self._calculate_strategic_value(
                signal_direction, current_price, existing_positions
            )
            
            # 6. üìã ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
            analysis = EntryAnalysis(
                quality=quality_analysis['quality'],
                timing=timing_decision['timing'],
                score=quality_analysis['score'],
                current_price=current_price,
                suggested_price=timing_decision['suggested_price'],
                wait_reason=timing_decision['reason'],
                confidence=quality_analysis['confidence'],
                price_hierarchy_ok=hierarchy_check['ok'],
                strategic_value=strategic_value
            )
            
            logger.info(f"üìä Entry Analysis: {analysis.quality.value} - {analysis.timing.value}")
            logger.info(f"   Score: {analysis.score:.1f}, Confidence: {analysis.confidence:.1f}")
            logger.info(f"   Hierarchy OK: {analysis.price_hierarchy_ok}")
            
            return analysis
            
        except Exception as e:
            logger.error(f"‚ùå Error analyzing entry opportunity: {e}")
            return self._create_default_analysis(signal_direction, current_price)
    
    def _update_market_structure(self, current_price: float):
        """üìä ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏•‡∏≤‡∏î"""
        try:
            # ‡πÄ‡∏Å‡πá‡∏ö‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏£‡∏≤‡∏Ñ‡∏≤
            self.price_history.append({
                'price': current_price,
                'timestamp': datetime.now()
            })
            
            # ‡πÄ‡∏Å‡πá‡∏ö‡πÅ‡∏Ñ‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• 200 ‡∏à‡∏∏‡∏î‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
            if len(self.price_history) > 200:
                self.price_history = self.price_history[-200:]
            
            # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó S/R ‡∏ó‡∏∏‡∏Å 5 ‡∏ô‡∏≤‡∏ó‡∏µ
            now = datetime.now()
            if (self.last_analysis_time is None or 
                (now - self.last_analysis_time).total_seconds() > 300):
                
                self._detect_support_resistance()
                self.last_analysis_time = now
                
        except Exception as e:
            logger.error(f"‚ùå Error updating market structure: {e}")
    
    def _detect_support_resistance(self):
        """üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö Support/Resistance"""
        try:
            if len(self.price_history) < 20:
                return
            
            prices = [p['price'] for p in self.price_history[-50:]]  # ‡∏î‡∏π 50 ‡∏à‡∏∏‡∏î‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
            
            # ‡∏´‡∏≤ Local Highs/Lows
            highs = []
            lows = []
            
            for i in range(2, len(prices) - 2):
                # Local High
                if (prices[i] > prices[i-1] and prices[i] > prices[i-2] and
                    prices[i] > prices[i+1] and prices[i] > prices[i+2]):
                    highs.append(prices[i])
                
                # Local Low
                if (prices[i] < prices[i-1] and prices[i] < prices[i-2] and
                    prices[i] < prices[i+1] and prices[i] < prices[i+2]):
                    lows.append(prices[i])
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á Resistance Levels ‡∏à‡∏≤‡∏Å Highs
            self.resistance_levels = []
            for high in highs:
                touches = sum(1 for p in prices if abs(p - high) <= 2.0)  # ‡∏ô‡∏±‡∏ö‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ ¬±2 points
                if touches >= 2:  # ‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏ï‡∏∞‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 2 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á
                    strength = min(touches / 5.0, 1.0)  # ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏Å‡∏£‡πà‡∏á
                    self.resistance_levels.append(PriceLevel(
                        price=high,
                        level_type="RESISTANCE",
                        strength=strength,
                        touches=touches,
                        age_minutes=5
                    ))
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á Support Levels ‡∏à‡∏≤‡∏Å Lows
            self.support_levels = []
            for low in lows:
                touches = sum(1 for p in prices if abs(p - low) <= 2.0)
                if touches >= 2:
                    strength = min(touches / 5.0, 1.0)
                    self.support_levels.append(PriceLevel(
                        price=low,
                        level_type="SUPPORT", 
                        strength=strength,
                        touches=touches,
                        age_minutes=5
                    ))
            
            # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡πÅ‡∏•‡∏∞‡πÄ‡∏Å‡πá‡∏ö‡πÅ‡∏Ñ‡πà‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ó‡∏µ‡πà‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏Å‡∏£‡πà‡∏á
            self.resistance_levels.sort(key=lambda x: x.strength, reverse=True)
            self.support_levels.sort(key=lambda x: x.strength, reverse=True)
            
            self.resistance_levels = self.resistance_levels[:3]  # ‡πÄ‡∏Å‡πá‡∏ö‡πÅ‡∏Ñ‡πà 3 ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ó‡∏µ‡πà‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏Å‡∏£‡πà‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
            self.support_levels = self.support_levels[:3]
            
            logger.debug(f"üìä Updated S/R: {len(self.support_levels)} supports, {len(self.resistance_levels)} resistances")
            
        except Exception as e:
            logger.error(f"‚ùå Error detecting S/R: {e}")
    
    def _check_price_hierarchy(self, signal_direction: str, current_price: float, 
                              existing_positions: List[Any] = None) -> Dict[str, Any]:
        """
        üîÑ ‡πÄ‡∏ä‡πá‡∏Ñ Price Hierarchy: BUY < SELL ‡πÄ‡∏™‡∏°‡∏≠
        """
        try:
            if not existing_positions:
                return {'ok': True, 'reason': 'No existing positions'}
            
            # ‡πÅ‡∏¢‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó positions
            buy_positions = [p for p in existing_positions if getattr(p, 'type', 0) == 0]  # MT5 BUY = 0
            sell_positions = [p for p in existing_positions if getattr(p, 'type', 1) == 1]  # MT5 SELL = 1
            
            if signal_direction == "BUY":
                # BUY ‡πÉ‡∏´‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤ SELL ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
                if sell_positions:
                    min_sell_price = min(getattr(p, 'price_open', current_price) for p in sell_positions)
                    if current_price >= (min_sell_price - self.hierarchy_buffer):
                        return {
                            'ok': False,
                            'reason': f'BUY {current_price:.2f} too close to SELL {min_sell_price:.2f}',
                            'suggested_price': min_sell_price - self.min_buy_sell_distance,
                            'min_sell_price': min_sell_price
                        }
            
            elif signal_direction == "SELL":
                # SELL ‡πÉ‡∏´‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤ BUY ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
                if buy_positions:
                    max_buy_price = max(getattr(p, 'price_open', current_price) for p in buy_positions)
                    if current_price <= (max_buy_price + self.hierarchy_buffer):
                        return {
                            'ok': False,
                            'reason': f'SELL {current_price:.2f} too close to BUY {max_buy_price:.2f}',
                            'suggested_price': max_buy_price + self.min_buy_sell_distance,
                            'max_buy_price': max_buy_price
                        }
            
            return {'ok': True, 'reason': 'Price hierarchy maintained'}
            
        except Exception as e:
            logger.error(f"‚ùå Error checking price hierarchy: {e}")
            return {'ok': True, 'reason': 'Error in hierarchy check'}
    
    def _analyze_entry_quality(self, signal_direction: str, current_price: float) -> Dict[str, Any]:
        """üéØ ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏à‡∏∏‡∏î‡πÄ‡∏Ç‡πâ‡∏≤"""
        try:
            # ‡∏´‡∏≤‡∏£‡∏∞‡∏î‡∏±‡∏ö S/R ‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
            nearest_support = None
            nearest_resistance = None
            
            if self.support_levels:
                nearest_support = min(self.support_levels, 
                                    key=lambda x: abs(x.price - current_price))
            
            if self.resistance_levels:
                nearest_resistance = min(self.resistance_levels,
                                       key=lambda x: abs(x.price - current_price))
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
            score = 50.0  # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ó‡∏µ‡πà 50
            confidence = 0.5
            quality = EntryQuality.AVERAGE
            reasons = []
            
            if signal_direction == "BUY":
                # BUY ‡∏î‡∏µ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÉ‡∏Å‡∏•‡πâ Support
                if nearest_support:
                    distance = abs(current_price - nearest_support.price)
                    support_strength = nearest_support.strength
                    
                    if distance <= self.excellent_distance and support_strength >= 0.8:
                        quality = EntryQuality.EXCELLENT
                        score = 90 + (support_strength * 10)
                        confidence = 0.9
                        reasons.append(f"Excellent BUY near strong support {nearest_support.price:.2f}")
                    
                    elif distance <= self.good_distance and support_strength >= 0.6:
                        quality = EntryQuality.GOOD
                        score = 70 + (support_strength * 15)
                        confidence = 0.7
                        reasons.append(f"Good BUY near support {nearest_support.price:.2f}")
                    
                    elif distance >= self.poor_distance:
                        quality = EntryQuality.POOR
                        score = 30 - (distance / 2)
                        confidence = 0.3
                        reasons.append(f"Poor BUY far from support (distance: {distance:.1f})")
                
                # BUY ‡πÅ‡∏¢‡πà‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÉ‡∏Å‡∏•‡πâ Resistance
                if nearest_resistance:
                    distance = abs(current_price - nearest_resistance.price)
                    if distance <= self.good_distance:
                        quality = EntryQuality.POOR
                        score = max(score - 30, 10)
                        confidence = max(confidence - 0.3, 0.1)
                        reasons.append(f"BUY too close to resistance {nearest_resistance.price:.2f}")
            
            elif signal_direction == "SELL":
                # SELL ‡∏î‡∏µ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÉ‡∏Å‡∏•‡πâ Resistance
                if nearest_resistance:
                    distance = abs(current_price - nearest_resistance.price)
                    resistance_strength = nearest_resistance.strength
                    
                    if distance <= self.excellent_distance and resistance_strength >= 0.8:
                        quality = EntryQuality.EXCELLENT
                        score = 90 + (resistance_strength * 10)
                        confidence = 0.9
                        reasons.append(f"Excellent SELL near strong resistance {nearest_resistance.price:.2f}")
                    
                    elif distance <= self.good_distance and resistance_strength >= 0.6:
                        quality = EntryQuality.GOOD
                        score = 70 + (resistance_strength * 15)
                        confidence = 0.7
                        reasons.append(f"Good SELL near resistance {nearest_resistance.price:.2f}")
                    
                    elif distance >= self.poor_distance:
                        quality = EntryQuality.POOR
                        score = 30 - (distance / 2)
                        confidence = 0.3
                        reasons.append(f"Poor SELL far from resistance (distance: {distance:.1f})")
                
                # SELL ‡πÅ‡∏¢‡πà‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÉ‡∏Å‡∏•‡πâ Support
                if nearest_support:
                    distance = abs(current_price - nearest_support.price)
                    if distance <= self.good_distance:
                        quality = EntryQuality.POOR
                        score = max(score - 30, 10)
                        confidence = max(confidence - 0.3, 0.1)
                        reasons.append(f"SELL too close to support {nearest_support.price:.2f}")
            
            return {
                'quality': quality,
                'score': max(min(score, 100), 0),  # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á 0-100
                'confidence': max(min(confidence, 1.0), 0.1),  # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á 0.1-1.0
                'reasons': reasons,
                'nearest_support': nearest_support,
                'nearest_resistance': nearest_resistance
            }
            
        except Exception as e:
            logger.error(f"‚ùå Error analyzing entry quality: {e}")
            return {
                'quality': EntryQuality.AVERAGE,
                'score': 50.0,
                'confidence': 0.5,
                'reasons': ['Error in quality analysis'],
                'nearest_support': None,
                'nearest_resistance': None
            }
    
    def _determine_entry_timing(self, signal_direction: str, current_price: float,
                               quality_analysis: Dict, hierarchy_check: Dict) -> Dict[str, Any]:
        """‚è∞ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤"""
        try:
            # ‡∏ñ‡πâ‡∏≤ Price Hierarchy ‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô
            if not hierarchy_check['ok']:
                return {
                    'timing': EntryTiming.SKIP_SIGNAL,
                    'suggested_price': hierarchy_check.get('suggested_price', current_price),
                    'reason': f"Price Hierarchy: {hierarchy_check['reason']}"
                }
            
            # ‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏ï‡∏≤‡∏° Entry Quality
            quality = quality_analysis['quality']
            
            if quality == EntryQuality.EXCELLENT:
                return {
                    'timing': EntryTiming.ENTER_NOW,
                    'suggested_price': current_price,
                    'reason': 'Excellent entry point - execute immediately'
                }
            
            elif quality == EntryQuality.GOOD:
                return {
                    'timing': EntryTiming.ENTER_NOW,
                    'suggested_price': current_price,
                    'reason': 'Good entry point - safe to execute'
                }
            
            elif quality == EntryQuality.AVERAGE:
                return {
                    'timing': EntryTiming.ENTER_NOW,
                    'suggested_price': current_price,
                    'reason': 'Average entry point - acceptable'
                }
            
            elif quality == EntryQuality.POOR:
                # ‡∏´‡∏≤‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏Å‡∏ß‡πà‡∏≤
                better_price = self._suggest_better_price(signal_direction, current_price, quality_analysis)
                return {
                    'timing': EntryTiming.WAIT_PULLBACK,
                    'suggested_price': better_price,
                    'reason': f'Wait for better price: {better_price:.2f} (current: {current_price:.2f})'
                }
            
            else:  # TERRIBLE
                return {
                    'timing': EntryTiming.SKIP_SIGNAL,
                    'suggested_price': current_price,
                    'reason': 'Terrible entry point - skip this signal'
                }
            
        except Exception as e:
            logger.error(f"‚ùå Error determining entry timing: {e}")
            return {
                'timing': EntryTiming.ENTER_NOW,
                'suggested_price': current_price,
                'reason': 'Default timing due to error'
            }
    
    def _suggest_better_price(self, signal_direction: str, current_price: float, 
                             quality_analysis: Dict) -> float:
        """üí° ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏Å‡∏ß‡πà‡∏≤"""
        try:
            if signal_direction == "BUY":
                # BUY ‡∏Ñ‡∏ß‡∏£‡πÉ‡∏Å‡∏•‡πâ Support
                if quality_analysis['nearest_support']:
                    support_price = quality_analysis['nearest_support'].price
                    return support_price + 2.0  # ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏Å‡∏•‡πâ support ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏ï‡∏¥‡∏î‡∏Ç‡∏≠‡∏ö
                else:
                    return current_price - 10.0  # ‡∏£‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤‡∏•‡∏á 10 points
            
            elif signal_direction == "SELL":
                # SELL ‡∏Ñ‡∏ß‡∏£‡πÉ‡∏Å‡∏•‡πâ Resistance
                if quality_analysis['nearest_resistance']:
                    resistance_price = quality_analysis['nearest_resistance'].price
                    return resistance_price - 2.0  # ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏Å‡∏•‡πâ resistance ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏ï‡∏¥‡∏î‡∏Ç‡∏≠‡∏ö
                else:
                    return current_price + 10.0  # ‡∏£‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏∂‡πâ‡∏ô 10 points
            
            return current_price
            
        except Exception as e:
            logger.error(f"‚ùå Error suggesting better price: {e}")
            return current_price
    
    def _calculate_strategic_value(self, signal_direction: str, current_price: float, 
                                  existing_positions: List[Any] = None) -> float:
        """üíé ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡πà‡∏≤‡πÄ‡∏ä‡∏¥‡∏á‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå"""
        try:
            strategic_value = 50.0  # ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
            
            if not existing_positions:
                return strategic_value
            
            # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå Portfolio Balance
            buy_positions = [p for p in existing_positions if getattr(p, 'type', 0) == 0]
            sell_positions = [p for p in existing_positions if getattr(p, 'type', 1) == 1]
            
            total_positions = len(existing_positions)
            buy_ratio = len(buy_positions) / total_positions if total_positions > 0 else 0.5
            sell_ratio = len(sell_positions) / total_positions if total_positions > 0 else 0.5
            
            # ‡∏ñ‡πâ‡∏≤ Portfolio ‡πÑ‡∏°‡πà‡∏™‡∏°‡∏î‡∏∏‡∏• ‚Üí Strategic Value ‡∏™‡∏π‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏î‡∏∏‡∏•
            if signal_direction == "BUY" and buy_ratio < 0.4:  # BUY ‡∏ô‡πâ‡∏≠‡∏¢‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ
                strategic_value += 30.0
            elif signal_direction == "SELL" and sell_ratio < 0.4:  # SELL ‡∏ô‡πâ‡∏≠‡∏¢‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ
                strategic_value += 30.0
            elif signal_direction == "BUY" and buy_ratio > 0.7:  # BUY ‡πÄ‡∏¢‡∏≠‡∏∞‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ
                strategic_value -= 20.0
            elif signal_direction == "SELL" and sell_ratio > 0.7:  # SELL ‡πÄ‡∏¢‡∏≠‡∏∞‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ
                strategic_value -= 20.0
            
            # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå Position Quality ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
            losing_positions = [p for p in existing_positions 
                               if getattr(p, 'profit', 0) < 0]
            
            if losing_positions:
                # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡πÑ‡∏°‡πâ‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô ‚Üí Strategic Value ‡∏™‡∏π‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠
                avg_loss = sum(getattr(p, 'profit', 0) for p in losing_positions) / len(losing_positions)
                if avg_loss < -50:  # ‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡∏°‡∏≤‡∏Å
                    strategic_value += 20.0
            
            return max(min(strategic_value, 100.0), 0.0)
            
        except Exception as e:
            logger.error(f"‚ùå Error calculating strategic value: {e}")
            return 50.0
    
    def _create_default_analysis(self, signal_direction: str, current_price: float) -> EntryAnalysis:
        """üìã ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô (‡∏Å‡∏£‡∏ì‡∏µ error)"""
        return EntryAnalysis(
            quality=EntryQuality.AVERAGE,
            timing=EntryTiming.ENTER_NOW,
            score=50.0,
            current_price=current_price,
            suggested_price=current_price,
            wait_reason="Default analysis due to error",
            confidence=0.5,
            price_hierarchy_ok=True,
            strategic_value=50.0
        )
    
    def get_market_structure_info(self) -> Dict[str, Any]:
        """üìä ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏•‡∏≤‡∏î"""
        try:
            return {
                'support_levels': [
                    {
                        'price': level.price,
                        'strength': level.strength,
                        'touches': level.touches
                    } for level in self.support_levels
                ],
                'resistance_levels': [
                    {
                        'price': level.price,
                        'strength': level.strength,
                        'touches': level.touches
                    } for level in self.resistance_levels
                ],
                'price_history_count': len(self.price_history),
                'last_analysis': self.last_analysis_time
            }
        except Exception as e:
            logger.error(f"‚ùå Error getting market structure info: {e}")
            return {}

# üè≠ Factory Function
def create_smart_entry_timing(mt5_connection=None, symbol: str = "XAUUSD") -> SmartEntryTiming:
    """üè≠ ‡∏™‡∏£‡πâ‡∏≤‡∏á Smart Entry Timing System"""
    return SmartEntryTiming(mt5_connection, symbol)
