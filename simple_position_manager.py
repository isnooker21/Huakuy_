# -*- coding: utf-8 -*-
"""
Simple Position Manager
‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÑ‡∏°‡πâ‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏á‡πà‡∏≤‡∏¢ - ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ó‡∏∏‡∏Å‡πÑ‡∏°‡πâ‡πÅ‡∏•‡πâ‡∏ß‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏õ‡∏¥‡∏î

üéØ ‡∏´‡∏•‡∏±‡∏Å‡∏Å‡∏≤‡∏£:
1. ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ó‡∏∏‡∏Å‡πÑ‡∏°‡πâ‡πÉ‡∏ô‡∏û‡∏≠‡∏£‡πå‡∏ï
2. ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î‡∏ó‡∏∏‡∏Å‡πÅ‡∏ö‡∏ö (2 ‡πÑ‡∏°‡πâ, 3 ‡πÑ‡∏°‡πâ, ‡∏´‡∏•‡∏≤‡∏¢‡πÑ‡∏°‡πâ)
3. ‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à: ‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß‡∏û‡∏≠‡∏£‡πå‡∏ï‡∏î‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô‡πÑ‡∏´‡∏°? ‡∏•‡∏î‡πÑ‡∏°‡πâ‡πÑ‡∏î‡πâ‡πÑ‡∏´‡∏°?
4. ‡∏õ‡∏¥‡∏î‡πÑ‡∏î‡πâ‡∏ó‡∏∏‡∏Å‡πÅ‡∏ö‡∏ö ‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô ‡∏õ‡∏¥‡∏î‡πÑ‡∏°‡πâ‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡πÅ‡∏ï‡πà‡∏Å‡∏≥‡πÑ‡∏£

‚úÖ ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏á‡πà‡∏≤‡∏¢ ‚úÖ ‡πÄ‡∏£‡πá‡∏ß ‚úÖ ‡∏¢‡∏∑‡∏î‡∏´‡∏¢‡∏∏‡πà‡∏ô ‚úÖ ‡∏°‡∏µ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•
"""

import logging
from datetime import datetime
from typing import List, Dict, Any, Optional, Tuple
from itertools import combinations

logger = logging.getLogger(__name__)

class SimplePositionManager:
    """üöÄ Hybrid Adaptive Position Manager + Universal Recovery - ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÑ‡∏°‡πâ‡πÅ‡∏ö‡∏ö‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡πÑ‡∏î‡πâ‡∏û‡∏£‡πâ‡∏≠‡∏° Recovery"""
    
    def __init__(self, mt5_connection, order_manager):
        self.mt5 = mt5_connection
        self.order_manager = order_manager
        
        # üéØ Adaptive Settings
        self.max_acceptable_loss = 5.0  # ‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î $5 ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î‡πÑ‡∏°‡πâ (‡∏£‡∏ß‡∏°‡∏™‡πÄ‡∏õ‡∏£‡∏î)
        self.min_positions_to_close = 2  # ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 2 ‡πÑ‡∏°‡πâ‡∏Ç‡∏∂‡πâ‡∏ô‡πÑ‡∏õ
        self.max_positions_per_round = 10  # ‡∏õ‡∏¥‡∏î‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 10 ‡πÑ‡∏°‡πâ‡∏ï‡πà‡∏≠‡∏£‡∏≠‡∏ö
        
        # üéØ Adaptive Mode Thresholds
        self.normal_mode_threshold = 40.0  # Wrong positions < 40% = Normal Mode
        self.balance_mode_threshold = 70.0  # Wrong positions 40-70% = Balance Mode
        # Wrong positions > 70% = Survival Mode
        
        # üéØ Universal Recovery Integration
        self.recovery_manager = None  # ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô integration
        self.enable_universal_recovery = True  # ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ Universal Recovery
        
        # üìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
        self.total_closures = 0
        self.total_positions_closed = 0
        self.total_profit_realized = 0.0
        self.current_mode = "Normal"  # Normal, Balance, Survival
        
    def analyze_portfolio_health(self, positions: List[Any], current_price: float) -> Dict[str, Any]:
        """
        üè• ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û Portfolio ‡πÅ‡∏•‡∏∞‡∏Å‡∏≥‡∏´‡∏ô‡∏î Management Mode
        
        Args:
            positions: ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ positions ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
            current_price: ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
            
        Returns:
            Dict: ‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û Portfolio ‡πÅ‡∏•‡∏∞ Mode ‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
        """
        if not positions:
            return {
                'mode': 'Normal',
                'wrong_percentage': 0.0,
                'wrong_buys': 0,
                'wrong_sells': 0,
                'total_positions': 0,
                'health_status': 'Excellent'
            }
            
        # ‡∏ô‡∏±‡∏ö Wrong Positions
        wrong_buys = 0  # BUY ‡πÄ‡∏´‡∏ô‡∏∑‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (‡∏ã‡∏∑‡πâ‡∏≠‡πÅ‡∏û‡∏á)
        wrong_sells = 0  # SELL ‡πÉ‡∏ï‡πâ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (‡∏Ç‡∏≤‡∏¢‡∏ñ‡∏π‡∏Å)
        total_positions = len(positions)
        
        for pos in positions:
            if hasattr(pos, 'type'):
                pos_type = pos.type
            else:
                pos_type = pos.order_type if hasattr(pos, 'order_type') else 'unknown'
                
            if pos_type == 0:  # BUY
                if pos.price_open > current_price:
                    wrong_buys += 1
            elif pos_type == 1:  # SELL
                if pos.price_open < current_price:
                    wrong_sells += 1
        
        wrong_total = wrong_buys + wrong_sells
        wrong_percentage = (wrong_total / total_positions) * 100 if total_positions > 0 else 0
        
        # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î Mode ‡∏ï‡∏≤‡∏° Wrong Percentage
        if wrong_percentage < self.normal_mode_threshold:
            mode = 'Normal'
            health_status = 'Good'
        elif wrong_percentage < self.balance_mode_threshold:
            mode = 'Balance'
            health_status = 'Fair'
        else:
            mode = 'Survival'
            health_status = 'Critical'
            
        self.current_mode = mode
        
        logger.info(f"üè• Portfolio Health Analysis:")
        logger.info(f"   Total Positions: {total_positions}")
        logger.info(f"   Wrong BUYs: {wrong_buys} (above price)")
        logger.info(f"   Wrong SELLs: {wrong_sells} (below price)")
        logger.info(f"   Wrong Percentage: {wrong_percentage:.1f}%")
        logger.info(f"   Management Mode: {mode}")
        logger.info(f"   Health Status: {health_status}")
        
        return {
            'mode': mode,
            'wrong_percentage': wrong_percentage,
            'wrong_buys': wrong_buys,
            'wrong_sells': wrong_sells,
            'total_positions': total_positions,
            'health_status': health_status
        }

    def should_close_positions(self, positions: List[Any], current_price: float) -> Dict[str, Any]:
        """
        üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡∏ß‡∏£‡∏õ‡∏¥‡∏î‡πÑ‡∏°‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (Enhanced with Universal Recovery)
        
        Args:
            positions: ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ positions ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
            current_price: ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
            
        Returns:
            Dict: ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÑ‡∏°‡πâ‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£‡∏õ‡∏¥‡∏î
        """
        try:
            # ‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô
            if len(positions) < 2:
                return {
                    'should_close': False,
                    'reason': 'Need at least 2 positions to close',
                    'positions_to_close': [],
                    'method': 'none'
                }
            
            # üöÄ 1. Universal Recovery Check (‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ)
            if self.enable_universal_recovery and self.recovery_manager:
                try:
                    # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå Balance
                    balance_analysis = self._analyze_portfolio_balance(positions, current_price)
                    
                    # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå Drag Recovery
                    drag_analysis = self.recovery_manager.analyze_dragged_positions(positions, current_price)
                    
                    # ‡∏´‡∏≤ Smart Combinations
                    smart_combinations = self.recovery_manager.find_smart_combinations(
                        positions, current_price, balance_analysis
                    )
                    
                    if smart_combinations:
                        best_combination = smart_combinations[0]  # Top scored
                        
                        logger.info(f"üéØ Universal Recovery: {best_combination['type']} (Score: {best_combination['score']:.2f})")
                        logger.info(f"üí∞ Profit: ${best_combination['total_profit']:.2f}")
                        logger.info(f"üìä Positions: {len(best_combination['positions'])}")
                        
                        return {
                            'should_close': True,
                            'reason': f"Universal Recovery: {best_combination['type']} (Score: {best_combination['score']:.2f})",
                            'positions_to_close': best_combination['positions'],
                            'expected_pnl': best_combination['total_profit'],
                            'positions_count': len(best_combination['positions']),
                            'combination_type': best_combination['type'],
                            'method': 'universal_recovery',
                            'drag_analysis': drag_analysis
                        }
                        
                except Exception as recovery_error:
                    logger.warning(f"‚ö†Ô∏è Universal Recovery error: {recovery_error}")
                    # Continue to adaptive method
            
            # üéØ 2. Fallback to Adaptive Method
            # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û Portfolio
            health_analysis = self.analyze_portfolio_health(positions, current_price)
            
            # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ó‡∏∏‡∏Å‡πÑ‡∏°‡πâ (‡πÑ‡∏°‡πà log ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß)
            analyzed_positions = self._analyze_all_positions(positions, current_price)
            
            if len(analyzed_positions) < 2:
                return {
                    'should_close': False,
                    'reason': 'Not enough valid positions after analysis',
                    'positions_to_close': [],
                    'method': 'none'
                }
            
            # ‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡πÅ‡∏ö‡∏ö Adaptive
            best_combination = self._find_adaptive_closing_combination(
                analyzed_positions, current_price, health_analysis
            )
            
            if best_combination:
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏Å‡πà‡∏≠‡∏ô‡∏õ‡∏¥‡∏î - ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Å‡∏≥‡πÑ‡∏£‡∏à‡∏£‡∏¥‡∏á‡πÜ
                expected_pnl = best_combination['total_pnl']
                
                # Double-check P&L ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ profit ‡∏à‡∏≤‡∏Å position ‡∏à‡∏£‡∏¥‡∏á
                actual_pnl = sum(pos.profit for pos in best_combination['positions'] if hasattr(pos, 'profit'))
                if actual_pnl != 0.0:
                    expected_pnl = actual_pnl  # ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å MT5
                    logger.info(f"üîç Using actual P&L from positions: ${actual_pnl:.2f}")
                
                # ADAPTIVE PROFIT THRESHOLD ‡∏ï‡∏≤‡∏° Mode
                mode = health_analysis['mode']
                if mode == 'Survival':
                    min_profit = 0.10  # Survival: ‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö‡∏Å‡∏≥‡πÑ‡∏£‡∏ô‡πâ‡∏≠‡∏¢
                elif mode == 'Balance':
                    min_profit = 0.25  # Balance: ‡∏Å‡∏≥‡πÑ‡∏£‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á
                else:  # Normal
                    min_profit = 0.50  # Normal: ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡∏≥‡πÑ‡∏£‡∏î‡∏µ
                
                # ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î‡∏ï‡∏¥‡∏î‡∏•‡∏ö‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏Ç‡πâ‡∏°‡∏á‡∏ß‡∏î
                if expected_pnl > min_profit:
                    logger.info(f"üéØ ADAPTIVE CLOSE ({mode} Mode): {len(best_combination['positions'])} positions, ${expected_pnl:.2f}")
                    return {
                        'should_close': True,
                        'reason': best_combination.get('reason', f'{mode} mode: Profitable combination'),
                        'positions_to_close': best_combination['positions'],
                        'expected_pnl': expected_pnl,
                        'positions_count': len(best_combination['positions']),
                        'combination_type': best_combination.get('type', mode),
                        'method': 'adaptive'
                    }
                else:
                    logger.info(f"üö´ Not profitable enough ({mode} Mode): ${expected_pnl:.2f} < ${min_profit:.2f}")
                    return {
                        'should_close': False,
                        'reason': f'{mode} Mode: ${expected_pnl:.2f} < ${min_profit:.2f}',
                        'positions_to_close': [],
                        'method': 'adaptive_insufficient'
                    }
            else:
                # ‡πÑ‡∏°‡πà log ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î noise
                return {
                    'should_close': False,
                    'reason': 'No suitable closing combination found',
                    'positions_to_close': [],
                    'method': 'adaptive_no_combination'
                }
                
        except Exception as e:
            logger.error(f"üö® CRITICAL ERROR in position analysis: {e}")
            import traceback
            logger.error(f"üö® Traceback: {traceback.format_exc()}")
            return {
                'should_close': False,
                'reason': f'Analysis error: {e}',
                'positions_to_close': []
            }
    
    def _find_best_closing_combination_balanced(self, analyzed_positions: List[Dict], current_price: float) -> Optional[Dict]:
        """
        üéØ ‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡πÅ‡∏ö‡∏ö‡∏™‡∏°‡∏î‡∏∏‡∏• Portfolio
        
        Logic:
        1. ‡πÄ‡∏ä‡πá‡∏Ñ Portfolio Balance
        2. ‡∏ñ‡πâ‡∏≤‡πÄ‡∏ö‡∏µ‡πâ‡∏¢‡∏ß ‚Üí ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏õ‡∏¥‡∏î‡∏ù‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏¢‡∏≠‡∏∞
        3. ‡∏ñ‡πâ‡∏≤‡∏™‡∏°‡∏î‡∏∏‡∏• ‚Üí ‡∏õ‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á + ‡∏Å‡∏≥‡πÑ‡∏£
        
        Args:
            analyzed_positions: ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ positions ‡∏ó‡∏µ‡πà‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏•‡πâ‡∏ß
            current_price: ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
            
        Returns:
            Dict: ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î ‡∏´‡∏£‡∏∑‡∏≠ None
        """
        try:
            if len(analyzed_positions) < 2:
                return None
                
            # 1. ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå Portfolio Balance
            balance_analysis = self._analyze_portfolio_balance(analyzed_positions, current_price)
            
            # 2. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏ï‡∏≤‡∏° Balance
            if balance_analysis['is_imbalanced']:
                # Portfolio ‡πÄ‡∏ö‡∏µ‡πâ‡∏¢‡∏ß ‚Üí ‡πÉ‡∏ä‡πâ Balance Priority Strategy
                return self._find_balance_priority_combination(analyzed_positions, balance_analysis, current_price)
            else:
                # Portfolio ‡∏™‡∏°‡∏î‡∏∏‡∏• ‚Üí ‡πÉ‡∏ä‡πâ Distance + Profit Strategy  
                return self._find_distance_profit_combination(analyzed_positions, current_price)
                
        except Exception as e:
            logger.error(f"Error finding balanced combination: {e}")
            # Fallback ‡πÑ‡∏õ‡πÉ‡∏ä‡πâ‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏î‡∏¥‡∏°
            return self._find_best_closing_combination(analyzed_positions)
    
    def _analyze_portfolio_balance(self, analyzed_positions: List[Dict], current_price: float) -> Dict[str, Any]:
        """üìä ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏°‡∏î‡∏∏‡∏•‡∏Ç‡∏≠‡∏á Portfolio"""
        buy_positions = [pos for pos in analyzed_positions if pos['position'].type == 0]
        sell_positions = [pos for pos in analyzed_positions if pos['position'].type == 1]
        
        total_positions = len(analyzed_positions)
        buy_count = len(buy_positions)
        sell_count = len(sell_positions)
        
        if total_positions == 0:
            return {'is_imbalanced': False, 'imbalance_side': None}
        
        buy_ratio = buy_count / total_positions
        sell_ratio = sell_count / total_positions
        
        # ‡πÄ‡∏ö‡∏µ‡πâ‡∏¢‡∏ß‡∏ñ‡πâ‡∏≤‡∏ù‡∏±‡πà‡∏á‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 70%
        imbalanced = max(buy_ratio, sell_ratio) > 0.7
        
        if imbalanced:
            imbalance_side = 'BUY' if buy_ratio > sell_ratio else 'SELL'
            imbalance_severity = max(buy_ratio, sell_ratio)
        else:
            imbalance_side = None
            imbalance_severity = 0.0
            
        return {
            'is_imbalanced': imbalanced,
            'imbalance_side': imbalance_side,
            'imbalance_severity': imbalance_severity,
            'buy_count': buy_count,
            'sell_count': sell_count,
            'buy_ratio': buy_ratio,
            'sell_ratio': sell_ratio
        }
    
    def _find_balance_priority_combination(self, analyzed_positions: List[Dict], balance_analysis: Dict, current_price: float) -> Optional[Dict]:
        """üéØ ‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡πÅ‡∏ö‡∏ö Balance Priority (‡∏õ‡∏¥‡∏î‡∏ù‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏¢‡∏≠‡∏∞‡∏Å‡πà‡∏≠‡∏ô)"""
        try:
            imbalance_side = balance_analysis['imbalance_side']
            
            # ‡πÅ‡∏¢‡∏Å‡πÑ‡∏°‡πâ‡∏ï‡∏≤‡∏°‡∏ù‡∏±‡πà‡∏á
            buy_positions = [pos for pos in analyzed_positions if pos['position'].type == 0]
            sell_positions = [pos for pos in analyzed_positions if pos['position'].type == 1]
            
            # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á (‡∏´‡πà‡∏≤‡∏á‡∏°‡∏≤‡∏Å ‚Üí ‡∏õ‡∏¥‡∏î‡∏Å‡πà‡∏≠‡∏ô) - ‡πÉ‡∏ä‡πâ current_price ‡πÅ‡∏ó‡∏ô distance_from_price
            buy_positions.sort(key=lambda x: abs(x['position'].price_open - current_price), reverse=True)
            sell_positions.sort(key=lambda x: abs(x['position'].price_open - current_price), reverse=True)
            
            best_combination = None
            best_score = -999999
            
            # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡πÇ‡∏î‡∏¢‡πÉ‡∏´‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏•‡∏î‡∏ù‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏¢‡∏≠‡∏∞
            for size in range(2, min(6, len(analyzed_positions) + 1)):  # 2-5 positions
                for combination in combinations(analyzed_positions, size):
                    combo_buy = [pos for pos in combination if pos['position'].type == 0]
                    combo_sell = [pos for pos in combination if pos['position'].type == 1]
                    
                    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì P&L
                    total_pnl = sum(pos['current_pnl'] for pos in combination)
                    
                    if total_pnl <= 0:  # ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Å‡∏≥‡πÑ‡∏£‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
                        continue
                        
                    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô Balance Priority
                    score = total_pnl  # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å‡∏Å‡∏≥‡πÑ‡∏£
                    
                    # ‡πÇ‡∏ö‡∏ô‡∏±‡∏™‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏•‡∏î‡∏ù‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏¢‡∏≠‡∏∞
                    if imbalance_side == 'BUY' and len(combo_buy) > len(combo_sell):
                        score += 50  # ‡πÇ‡∏ö‡∏ô‡∏±‡∏™‡∏Å‡∏≤‡∏£‡∏•‡∏î BUY
                    elif imbalance_side == 'SELL' and len(combo_sell) > len(combo_buy):
                        score += 50  # ‡πÇ‡∏ö‡∏ô‡∏±‡∏™‡∏Å‡∏≤‡∏£‡∏•‡∏î SELL
                    
                    # ‡πÇ‡∏ö‡∏ô‡∏±‡∏™‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î‡πÑ‡∏°‡πâ‡∏´‡πà‡∏≤‡∏á - ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≤‡∏Å current_price
                    distance_bonus = sum(abs(pos['position'].price_open - current_price) for pos in combination) * 0.1
                    score += distance_bonus
                    
                    if score > best_score:
                        best_score = score
                        best_combination = {
                            'positions': [pos['position'] for pos in combination],
                            'total_pnl': total_pnl,
                            'combination_size': size,
                            'strategy': 'Balance Priority',
                            'balance_improvement': f"Reduce {imbalance_side} imbalance"
                        }
            
            return best_combination
            
        except Exception as e:
            logger.error(f"Error in balance priority combination: {e}")
            return None
    
    def _find_distance_profit_combination(self, analyzed_positions: List[Dict], current_price: float) -> Optional[Dict]:
        """üéØ ‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡πÅ‡∏ö‡∏ö Distance + Profit Priority (Portfolio ‡∏™‡∏°‡∏î‡∏∏‡∏•‡πÅ‡∏•‡πâ‡∏ß)"""
        try:
            best_combination = None
            best_score = -999999
            
            # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡πÇ‡∏î‡∏¢‡πÉ‡∏´‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏Å‡∏±‡∏ö‡πÑ‡∏°‡πâ‡∏´‡πà‡∏≤‡∏á + ‡∏Å‡∏≥‡πÑ‡∏£
            for size in range(2, min(6, len(analyzed_positions) + 1)):  # 2-5 positions
                for combination in combinations(analyzed_positions, size):
                    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì P&L
                    total_pnl = sum(pos['current_pnl'] for pos in combination)
                    
                    if total_pnl <= 0:  # ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Å‡∏≥‡πÑ‡∏£‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
                        continue
                        
                    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô Distance + Profit
                    profit_score = total_pnl * 10  # ‡∏Å‡∏≥‡πÑ‡∏£‡∏°‡∏µ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏°‡∏≤‡∏Å
                    distance_score = sum(abs(pos['position'].price_open - current_price) for pos in combination)
                    
                    # ‡∏£‡∏ß‡∏°‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
                    total_score = profit_score + distance_score
                    
                    if total_score > best_score:
                        best_score = total_score
                        best_combination = {
                            'positions': [pos['position'] for pos in combination],
                            'total_pnl': total_pnl,
                            'combination_size': size,
                            'strategy': 'Distance + Profit',
                            'balance_improvement': 'Maintain balance'
                        }
            
            return best_combination
            
        except Exception as e:
            logger.error(f"Error in distance profit combination: {e}")
            return None

    def _find_adaptive_closing_combination(self, analyzed_positions: List[Dict], current_price: float, health_analysis: Dict[str, Any]) -> Optional[Dict[str, Any]]:
        """
        üöÄ ‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏õ‡∏¥‡∏î‡πÅ‡∏ö‡∏ö Adaptive ‡∏ï‡∏≤‡∏° Management Mode
        
        Args:
            analyzed_positions: ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ positions ‡∏ó‡∏µ‡πà‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏•‡πâ‡∏ß
            current_price: ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
            health_analysis: ‡∏ú‡∏•‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û Portfolio
            
        Returns:
            Optional[Dict]: ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î ‡∏´‡∏£‡∏∑‡∏≠ None
        """
        mode = health_analysis['mode']
        logger.info(f"üéØ Using {mode} Mode for combination selection")
        
        if mode == 'Normal':
            return self._find_normal_mode_combination(analyzed_positions, current_price)
        elif mode == 'Balance':
            return self._find_balance_mode_combination(analyzed_positions, current_price, health_analysis)
        else:  # Survival
            return self._find_survival_mode_combination(analyzed_positions, current_price)
    
    def _find_normal_mode_combination(self, analyzed_positions: List[Dict], current_price: float) -> Optional[Dict[str, Any]]:
        """
        üü¢ Normal Mode: ‡πÄ‡∏ô‡πâ‡∏ô‡πÄ‡∏Å‡πá‡∏ö‡∏Å‡∏≥‡πÑ‡∏£‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
        Portfolio ‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏î‡∏µ (Wrong < 40%)
        """
        logger.info("üü¢ Normal Mode: ‡πÄ‡∏ô‡πâ‡∏ô‡πÄ‡∏Å‡πá‡∏ö‡∏Å‡∏≥‡πÑ‡∏£‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î")
        return self._find_max_profit_combination(analyzed_positions, current_price)
    
    def _find_balance_mode_combination(self, analyzed_positions: List[Dict], current_price: float, health_analysis: Dict[str, Any]) -> Optional[Dict[str, Any]]:
        """
        üü° Balance Mode: ‡πÄ‡∏ô‡πâ‡∏ô‡πÅ‡∏Å‡πâ‡∏™‡∏°‡∏î‡∏∏‡∏• Portfolio
        Portfolio ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏™‡∏µ‡∏¢‡∏™‡∏°‡∏î‡∏∏‡∏• (Wrong 40-70%)
        """
        logger.info("üü° Balance Mode: ‡πÄ‡∏ô‡πâ‡∏ô‡πÅ‡∏Å‡πâ‡∏™‡∏°‡∏î‡∏∏‡∏• Portfolio")
        
        # ‡πÉ‡∏ä‡πâ _analyze_portfolio_balance ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
        balance_analysis = self._analyze_portfolio_balance(analyzed_positions, current_price)
        
        return self._find_balance_priority_combination(analyzed_positions, balance_analysis, current_price)
    
    def _find_survival_mode_combination(self, analyzed_positions: List[Dict], current_price: float) -> Optional[Dict[str, Any]]:
        """
        üî¥ Survival Mode: ‡πÄ‡∏ô‡πâ‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡∏¢‡∏π‡πà‡∏£‡∏≠‡∏î
        Portfolio ‡∏ß‡∏¥‡∏Å‡∏§‡∏ï (Wrong > 70%)
        """
        logger.info("üî¥ Survival Mode: ‡πÄ‡∏ô‡πâ‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡∏¢‡∏π‡πà‡∏£‡∏≠‡∏î - ‡∏õ‡∏¥‡∏î‡∏ó‡∏∏‡∏Å Combination ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≥‡πÑ‡∏£")
        return self._find_any_profitable_combination(analyzed_positions, current_price)
    
    def _find_max_profit_combination(self, analyzed_positions: List[Dict], current_price: float) -> Optional[Dict[str, Any]]:
        """üü¢ ‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡∏Å‡∏≥‡πÑ‡∏£‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î"""
        try:
            max_combinations = min(1000, len(analyzed_positions) * 20)
            best_combination = None
            best_score = 0
            
            for size in range(2, min(6, len(analyzed_positions) + 1)):
                combinations_count = 0
                for combo in combinations(analyzed_positions, size):
                    if combinations_count >= max_combinations:
                        break
                        
                    total_pnl = sum(pos['current_pnl'] for pos in combo)
                    
                    if total_pnl > 0.50:  # ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Å‡∏≥‡πÑ‡∏£‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ $0.50
                        # Score = ‡∏Å‡∏≥‡πÑ‡∏£‡∏™‡∏π‡∏á + ‡∏•‡∏î‡πÑ‡∏°‡πâ‡πÄ‡∏¢‡∏≠‡∏∞
                        score = total_pnl * 10 + len(combo) * 2
                        
                        if score > best_score:
                            best_score = score
                            best_combination = {
                                'positions': [pos['position'] for pos in combo],
                                'total_pnl': total_pnl,
                                'size': len(combo),
                                'reason': f'Max profit: ${total_pnl:.2f}',
                                'type': 'normal_mode'
                            }
                    
                    combinations_count += 1
                    
            return best_combination
            
        except Exception as e:
            logger.error(f"Error in max profit combination: {e}")
            return None
    
    def _find_any_profitable_combination(self, analyzed_positions: List[Dict], current_price: float) -> Optional[Dict[str, Any]]:
        """üî¥ ‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡πÉ‡∏î‡∏Å‡πá‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≥‡πÑ‡∏£ (Survival Mode)"""
        try:
            # ‡πÉ‡∏ô Survival Mode ‡∏õ‡∏¥‡∏î‡∏ó‡∏∏‡∏Å Combination ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≥‡πÑ‡∏£ ‡πÅ‡∏°‡πâ‡∏ô‡πâ‡∏≠‡∏¢
            for size in range(2, min(4, len(analyzed_positions) + 1)):  # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß
                for combo in combinations(analyzed_positions, size):
                    total_pnl = sum(pos['current_pnl'] for pos in combo)
                    
                    if total_pnl > 0.10:  # ‡∏•‡∏î‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡πÄ‡∏´‡∏•‡∏∑‡∏≠ $0.10 ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡∏¢‡∏π‡πà‡∏£‡∏≠‡∏î
                        return {
                            'positions': [pos['position'] for pos in combo],
                            'total_pnl': total_pnl,
                            'size': len(combo),
                            'reason': f'Survival mode: ${total_pnl:.2f}',
                            'type': 'survival_mode'
                        }
                        
            return None
            
        except Exception as e:
            logger.error(f"Error in survival combination: {e}")
            return None
    
    def close_positions(self, positions_to_close: List[Any]) -> Dict[str, Any]:
        """
        üî• ‡∏õ‡∏¥‡∏î‡πÑ‡∏°‡πâ‡∏ï‡∏≤‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
        
        Args:
            positions_to_close: ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÑ‡∏°‡πâ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏õ‡∏¥‡∏î
            
        Returns:
            Dict: ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î‡πÑ‡∏°‡πâ
        """
        try:
            if not positions_to_close:
                return {
                    'success': False,
                    'message': 'No positions to close',
                    'closed_count': 0,
                    'total_profit': 0.0
                }
            
            start_time = datetime.now()
            successful_closes = 0
            total_profit = 0.0
            close_details = []
            
            # üî• ‡∏õ‡∏¥‡∏î‡πÑ‡∏°‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏° (‡πÉ‡∏ä‡πâ close_positions_group)
            try:
                close_result = self.order_manager.close_positions_group(positions_to_close, "Simple Position Manager")
                
                if close_result.success:
                    successful_closes = len(positions_to_close)
                    # ‡∏î‡∏∂‡∏á profit ‡∏à‡∏≤‡∏Å close_result
                    total_profit = getattr(close_result, 'total_profit', 0.0)
                    
                    # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ profit ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏õ‡πá‡∏ô 0 ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏¥‡∏î‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å MT5
                    if total_profit == 0.0:
                        logger.info(f"üìä No profit data from close_result, calculating from actual close prices...")
                        
                    # üìä ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÑ‡∏°‡πâ‡∏ó‡∏µ‡πà‡∏õ‡∏¥‡∏î (‡πÉ‡∏ä‡πâ actual profit ‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏£‡∏¥‡∏á)
                    logger.info(f"‚úÖ GROUP CLOSE SUCCESS:")
                    actual_total_profit = 0.0
                    
                    for i, position in enumerate(positions_to_close):
                        pos_type = position.type.upper() if isinstance(position.type, str) else ("BUY" if position.type == 0 else "SELL")
                        symbol = "‚îú‚îÄ" if i < len(positions_to_close) - 1 else "‚îî‚îÄ"
                        
                        # ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î position ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á individual profit (‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÑ‡∏°‡πà‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥)
                        logger.info(f"  {symbol} #{position.ticket} {pos_type} {position.volume:.2f}lot @ {position.price_open:.2f}")
                        
                        actual_total_profit += 0.0  # ‡∏à‡∏∞‡πÉ‡∏ä‡πâ total_profit ‡∏à‡∏≤‡∏Å close_result
                        
                        close_details.append({
                            'ticket': position.ticket,
                            'profit': 0.0,  # ‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á individual profit
                            'success': True
                        })
                    
                    # ‡πÉ‡∏ä‡πâ total_profit ‡∏à‡∏≤‡∏Å close_result (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ) ‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÉ‡∏´‡∏°‡πà
                    # actual_total_profit ‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô 0 ‡πÄ‡∏™‡∏°‡∏≠ ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ total_profit ‡πÄ‡∏î‡∏¥‡∏°
                    
                    logger.info(f"üìä TOTAL RESULT: {successful_closes} positions closed, ${total_profit:.2f} total profit")
                else:
                    # ‡∏ñ‡πâ‡∏≤ group close ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏•‡∏≠‡∏á‡∏õ‡∏¥‡∏î‡∏ó‡∏µ‡∏•‡∏∞‡∏ï‡∏±‡∏ß
                    logger.warning("Group close failed, trying individual closes...")
                    for position in positions_to_close:
                        try:
                            # ‡πÉ‡∏ä‡πâ MT5 direct close
                            individual_result = self.mt5.close_position_direct(position.ticket)
                            if individual_result and hasattr(individual_result, 'success') and individual_result.success:
                                successful_closes += 1
                                # ‡∏î‡∏∂‡∏á profit ‡∏à‡∏≤‡∏Å result
                                if hasattr(individual_result, 'profit'):
                                    profit = individual_result.profit
                                elif hasattr(individual_result, 'total_profit'):
                                    profit = individual_result.total_profit
                                else:
                                    profit = 0.0
                                    
                                total_profit += profit
                                close_details.append({
                                    'ticket': position.ticket,
                                    'profit': profit,
                                    'success': True
                                })
                                
                                # ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÑ‡∏°‡πâ‡∏ó‡∏µ‡πà‡∏õ‡∏¥‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
                                pos_type = position.type.upper() if isinstance(position.type, str) else ("BUY" if position.type == 0 else "SELL")
                                logger.info(f"‚úÖ #{position.ticket} {pos_type} {position.volume:.2f}lot @ {position.price_open:.2f} ‚Üí ${profit:.2f} profit")
                            else:
                                close_details.append({
                                    'ticket': position.ticket,
                                    'profit': 0.0,
                                    'success': False,
                                    'error': 'MT5 close failed'
                                })
                        except Exception as e:
                            logger.error(f"Error closing position #{position.ticket}: {e}")
                            close_details.append({
                                'ticket': position.ticket,
                                'profit': 0.0,
                                'success': False,
                                'error': str(e)
                            })
                    
                    # ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏£‡∏ß‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö individual closes
                    if successful_closes > 0:
                        logger.info(f"üìä INDIVIDUAL CLOSE SUMMARY: {successful_closes} positions closed, ${total_profit:.2f} total profit")
                            
            except Exception as e:
                logger.error(f"Error in group close: {e}")
                close_details.append({
                    'ticket': 'GROUP',
                    'profit': 0.0,
                    'success': False,
                    'error': str(e)
                })
            
            # üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
            execution_time = (datetime.now() - start_time).total_seconds()
            
            if successful_closes > 0:
                self.total_closures += 1
                self.total_positions_closed += successful_closes
                self.total_profit_realized += total_profit
                
                return {
                    'success': True,
                    'message': f'Closed {successful_closes}/{len(positions_to_close)} positions successfully',
                    'closed_count': successful_closes,
                    'total_profit': total_profit,
                    'execution_time': execution_time,
                    'details': close_details
                }
            else:
                return {
                    'success': False,
                    'message': 'No positions were successfully closed',
                    'closed_count': 0,
                    'total_profit': 0.0,
                    'execution_time': execution_time,
                    'details': close_details
                }
                
        except Exception as e:
            logger.error(f"Error executing position closure: {e}")
            return {
                'success': False,
                'message': f'Execution error: {e}',
                'closed_count': 0,
                'total_profit': 0.0
            }
    
    def _analyze_all_positions(self, positions: List[Any], current_price: float) -> List[Dict[str, Any]]:
        """üîç ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ó‡∏∏‡∏Å‡πÑ‡∏°‡πâ‡πÉ‡∏ô‡∏û‡∏≠‡∏£‡πå‡∏ï"""
        analyzed = []
        
        # üìä ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πÄ‡∏õ‡∏£‡∏î‡∏à‡∏≤‡∏Å MT5 (‡πÄ‡∏á‡∏µ‡∏¢‡∏ö‡πÜ)
        spread = self._get_current_spread()
        
        for pos in positions:
            try:
                # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì P&L ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô ‡∏£‡∏ß‡∏°‡∏™‡πÄ‡∏õ‡∏£‡∏î
                if hasattr(pos, 'type') and hasattr(pos, 'price_open') and hasattr(pos, 'volume'):
                    pos_type = pos.type.upper() if isinstance(pos.type, str) else ("BUY" if pos.type == 0 else "SELL")
                    
                    # ‡πÉ‡∏ä‡πâ profit ‡∏à‡∏≤‡∏Å position ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á (‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î)
                    if hasattr(pos, 'profit'):
                        pnl = pos.profit
                    else:
                        # Fallback: ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì P&L ‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô (‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ profit field)
                        if pos_type == "BUY":
                            # BUY: ‡∏õ‡∏¥‡∏î‡∏ó‡∏µ‡πà bid price 
                            close_price = current_price - (spread / 100)  # spread points -> price
                            pnl_before_costs = (close_price - pos.price_open) * pos.volume * 100
                        else:  # SELL
                            # SELL: ‡∏õ‡∏¥‡∏î‡∏ó‡∏µ‡πà ask price
                            close_price = current_price + (spread / 100)
                            pnl_before_costs = (pos.price_open - close_price) * pos.volume * 100
                        
                        # ‡∏´‡∏±‡∏Å‡∏Ñ‡πà‡∏≤‡∏ò‡∏£‡∏£‡∏°‡πÄ‡∏ô‡∏µ‡∏¢‡∏°
                        commission_cost = pos.volume * 0.5
                        pnl = pnl_before_costs - commission_cost
                    
                    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
                    distance_pips = abs(current_price - pos.price_open) * 100
                    
                    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏≠‡∏≤‡∏¢‡∏∏‡∏Ç‡∏≠‡∏á‡πÑ‡∏°‡πâ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•)
                    age_minutes = 0
                    if hasattr(pos, 'time'):
                        try:
                            pos_time = datetime.fromtimestamp(pos.time)
                            age_minutes = (datetime.now() - pos_time).total_seconds() / 60
                        except:
                            age_minutes = 0
                    
                    analyzed.append({
                        'position': pos,
                        'ticket': pos.ticket,
                        'type': pos_type,
                        'volume': pos.volume,
                        'price_open': pos.price_open,
                        'current_pnl': pnl,
                        'distance_pips': distance_pips,
                        'age_minutes': age_minutes,
                        'is_profit': pnl > 0,
                        'is_loss': pnl < 0
                    })
                    
                    # Skip individual position logging for speed
                    
            except Exception as e:
                logger.warning(f"Error analyzing position {pos.ticket}: {e}")
                continue
        
        return analyzed
    
    def _find_best_closing_combination(self, analyzed_positions: List[Dict[str, Any]]) -> Optional[Dict[str, Any]]:
        """üéØ ‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î"""
        try:
            best_combination = None
            best_score = -999999
            combinations_tested = 0
            max_combinations = 500  # ‡∏•‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß
            
            # ‡πÅ‡∏¢‡∏Å‡πÑ‡∏°‡πâ‡∏Å‡∏≥‡πÑ‡∏£‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πâ‡πÄ‡∏™‡∏µ‡∏¢ (‡πÄ‡∏á‡∏µ‡∏¢‡∏ö‡πÜ)
            profit_positions = [p for p in analyzed_positions if p['is_profit']]
            loss_positions = [p for p in analyzed_positions if p['is_loss']]
            
            # üéØ ‡∏•‡∏≠‡∏á‡∏ó‡∏∏‡∏Å‡πÅ‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà (2 ‡πÑ‡∏°‡πâ ‡∏ñ‡∏∂‡∏á max_positions_per_round ‡πÑ‡∏°‡πâ)
            max_size = min(len(analyzed_positions) + 1, self.max_positions_per_round + 1, 5)  # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 4 ‡πÑ‡∏°‡πâ
            
            for size in range(self.min_positions_to_close, max_size):
                
                # ‡πÉ‡∏ä‡πâ simple iteration ‡πÅ‡∏ó‡∏ô combinations ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô memory issue
                try:
                    from itertools import combinations
                    combination_iter = combinations(analyzed_positions, size)
                except ImportError:
                    logger.error("üö® itertools.combinations not available, using fallback")
                    continue
                
                # ‡∏•‡∏≠‡∏á‡∏ó‡∏∏‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡πÑ‡∏î‡πâ
                for combination in combination_iter:
                    combinations_tested += 1
                    
                    # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö (‡πÄ‡∏á‡∏µ‡∏¢‡∏ö‡πÜ)
                    if combinations_tested > max_combinations:
                        break
                    
                    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ú‡∏•‡∏£‡∏ß‡∏°
                    total_pnl = sum(p['current_pnl'] for p in combination)
                    profit_count = sum(1 for p in combination if p['is_profit'])
                    loss_count = sum(1 for p in combination if p['is_loss'])
                    
                    # üö´ ‡∏Å‡∏é‡∏ó‡∏µ‡πà‡∏´‡πâ‡∏≤‡∏°: ‡πÑ‡∏°‡πà‡∏õ‡∏¥‡∏î‡πÑ‡∏°‡πâ‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡πÅ‡∏ï‡πà‡∏Å‡∏≥‡πÑ‡∏£
                    if len(combination) == 1 and profit_count == 1:
                        continue
                    
                    # üö´ ‡πÑ‡∏°‡πà‡∏õ‡∏¥‡∏î‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πâ‡∏Å‡∏≥‡πÑ‡∏£‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß (‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡πÑ‡∏°‡πâ‡πÄ‡∏™‡∏µ‡∏¢‡∏î‡πâ‡∏ß‡∏¢)
                    if loss_count == 0 and profit_count > 1:
                        continue
                    
                    # üö´ ‡πÑ‡∏°‡πà‡∏õ‡∏¥‡∏î‡∏ñ‡πâ‡∏≤‡∏ï‡∏¥‡∏î‡∏•‡∏ö‡πÄ‡∏•‡∏¢ (‡πÄ‡∏Ç‡πâ‡∏°‡∏á‡∏ß‡∏î‡∏°‡∏≤‡∏Å)
                    if total_pnl <= 0:  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å < 0 ‡πÄ‡∏õ‡πá‡∏ô <= 0 (‡πÑ‡∏°‡πà‡∏¢‡∏≠‡∏°‡πÅ‡∏°‡πâ‡πÅ‡∏ï‡πà $0)
                        continue
                    
                    # üìä ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
                    score = self._calculate_combination_score(combination, total_pnl, profit_count, loss_count)
                    
                    if score > best_score:
                        best_score = score
                        best_combination = {
                            'positions': [p['position'] for p in combination],
                            'total_pnl': total_pnl,
                            'profit_count': profit_count,
                            'loss_count': loss_count,
                            'score': score,
                            'type': self._get_combination_type(profit_count, loss_count),
                            'reason': self._get_combination_reason(total_pnl, profit_count, loss_count, len(combination))
                        }
                
                # Break ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å outer loop ‡∏ñ‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Ç‡∏µ‡∏î‡∏à‡∏≥‡∏Å‡∏±‡∏î
                if combinations_tested > max_combinations:
                    break
            
            # ‡πÑ‡∏°‡πà log ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß
            return best_combination
            
        except Exception as e:
            logger.error(f"Error finding best combination: {e}")
            return None
    
    def _calculate_combination_score(self, combination: Tuple, total_pnl: float, profit_count: int, loss_count: int) -> float:
        """üìä ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà"""
        try:
            score = 0.0
            
            # 1. ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏à‡∏≤‡∏Å‡∏Å‡∏≥‡πÑ‡∏£ (‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î)
            if total_pnl > 0:
                score += total_pnl * 100  # ‡∏Å‡∏≥‡πÑ‡∏£ $1 = 100 ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
            else:
                score += total_pnl * 50   # ‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô $1 = -50 ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
            
            # 2. ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏•‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÑ‡∏°‡πâ
            position_reduction_score = len(combination) * 10  # ‡∏•‡∏î‡πÑ‡∏°‡πâ 1 ‡∏ï‡∏±‡∏ß = 10 ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
            score += position_reduction_score
            
            # 3. ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ú‡∏™‡∏°‡πÑ‡∏°‡πâ‡∏Å‡∏≥‡πÑ‡∏£‡∏Å‡∏±‡∏ö‡πÑ‡∏°‡πâ‡πÄ‡∏™‡∏µ‡∏¢
            if profit_count > 0 and loss_count > 0:
                score += 50  # ‡πÇ‡∏ö‡∏ô‡∏±‡∏™‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏î‡∏∏‡∏•
            
            # 4. ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏à‡∏≤‡∏Å‡∏≠‡∏≤‡∏¢‡∏∏‡∏Ç‡∏≠‡∏á‡πÑ‡∏°‡πâ‡πÄ‡∏™‡∏µ‡∏¢ (‡∏¢‡∏¥‡πà‡∏á‡πÄ‡∏Å‡πà‡∏≤‡∏¢‡∏¥‡πà‡∏á‡∏î‡∏µ)
            for p in combination:
                if p['is_loss'] and p['age_minutes'] > 60:  # ‡πÑ‡∏°‡πâ‡πÄ‡∏™‡∏µ‡∏¢‡πÄ‡∏Å‡πà‡∏≤‡∏Å‡∏ß‡πà‡∏≤ 1 ‡∏ä‡∏°
                    score += min(p['age_minutes'] / 10, 20)  # ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 20 ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
            
            # 5. ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡πÑ‡∏°‡πâ‡πÄ‡∏™‡∏µ‡∏¢ (‡∏¢‡∏¥‡πà‡∏á‡πÑ‡∏Å‡∏•‡∏¢‡∏¥‡πà‡∏á‡∏Ñ‡∏ß‡∏£‡∏õ‡∏¥‡∏î)
            for p in combination:
                if p['is_loss'] and p['distance_pips'] > 50:  # ‡πÑ‡∏°‡πâ‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡πà‡∏≤‡∏á > 50 pips
                    score += min(p['distance_pips'] / 10, 30)  # ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 30 ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
            
            return score
            
        except Exception as e:
            logger.error(f"Error calculating combination score: {e}")
            return 0.0
    
    def _get_combination_type(self, profit_count: int, loss_count: int) -> str:
        """üè∑Ô∏è ‡∏£‡∏∞‡∏ö‡∏∏‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà"""
        if profit_count > 0 and loss_count > 0:
            return "MIXED"  # ‡∏ú‡∏™‡∏°‡∏Å‡∏≥‡πÑ‡∏£‡∏Å‡∏±‡∏ö‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô
        elif profit_count > 0:
            return "PROFIT_ONLY"  # ‡∏Å‡∏≥‡πÑ‡∏£‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
        else:
            return "LOSS_ONLY"  # ‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
    
    def _get_combination_reason(self, total_pnl: float, profit_count: int, loss_count: int, total_count: int) -> str:
        """üìù ‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î"""
        if total_pnl > 2.0:
            return f"Excellent profit: ${total_pnl:.2f} from {total_count} positions (after spread & commission)"
        elif total_pnl > 0.5:
            return f"Good profit: ${total_pnl:.2f} from {total_count} positions (after spread & commission)"
        elif total_pnl > 0:
            return f"Small profit: ${total_pnl:.2f} from {total_count} positions (after spread & commission)"
        else:
            return f"REJECTED: Would lose ${abs(total_pnl):.2f} - only profitable closes allowed"
    
    def get_statistics(self) -> Dict[str, Any]:
        """üìä ‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô"""
        return {
            'total_closures': self.total_closures,
            'total_positions_closed': self.total_positions_closed,
            'total_profit_realized': self.total_profit_realized,
            'avg_positions_per_closure': self.total_positions_closed / max(self.total_closures, 1),
            'avg_profit_per_closure': self.total_profit_realized / max(self.total_closures, 1)
        }
    
    def configure_settings(self, **settings):
        """‚öôÔ∏è ‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤"""
        if 'max_acceptable_loss' in settings:
            self.max_acceptable_loss = settings['max_acceptable_loss']
        if 'min_positions_to_close' in settings:
            self.min_positions_to_close = settings['min_positions_to_close']
        if 'max_positions_per_round' in settings:
            self.max_positions_per_round = settings['max_positions_per_round']
        
        logger.info("‚öôÔ∏è Simple Position Manager settings updated")
    
    def _get_current_spread(self) -> float:
        """üìä ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πÄ‡∏õ‡∏£‡∏î‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô"""
        try:
            # ‡∏•‡∏≠‡∏á‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å MT5 symbol info
            if hasattr(self.mt5, 'get_symbol_info'):
                symbol_info = self.mt5.get_symbol_info('XAUUSD.v')  # ‡∏´‡∏£‡∏∑‡∏≠ symbol ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ
                if symbol_info and hasattr(symbol_info, 'spread'):
                    return float(symbol_info.spread)
            
            # Fallback: ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Gold
            return 45.0  # 45 points ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö XAUUSD
            
        except Exception as e:
            logger.warning(f"Error getting spread: {e}, using default 45 points")
            return 45.0
    
    def _get_current_price(self) -> float:
        """‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏à‡∏≤‡∏Å MT5"""
        try:
            tick = self.mt5.symbol_info_tick("XAUUSD.v")
            if tick:
                return (tick.bid + tick.ask) / 2
            return 3550.0  # default fallback
        except Exception as e:
            logger.warning(f"Error getting current price: {e}, using default 3550.0")
            return 3550.0
    
    def _analyze_single_position(self, pos: Any, current_price: float) -> Dict[str, Any]:
        """‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå position ‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß"""
        try:
            # ‡πÉ‡∏ä‡πâ profit ‡∏à‡∏≤‡∏Å position ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á (‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î)
            if hasattr(pos, 'profit'):
                pnl = pos.profit
            else:
                # Fallback: ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì P&L ‡πÄ‡∏≠‡∏á
                pos_type = pos.type.upper() if isinstance(pos.type, str) else ("BUY" if pos.type == 0 else "SELL")
                spread = self._get_current_spread()
                
                if pos_type == "BUY":
                    close_price = current_price - (spread / 100)
                    pnl_before_costs = (close_price - pos.price_open) * pos.volume * 100
                else:  # SELL
                    close_price = current_price + (spread / 100)
                    pnl_before_costs = (pos.price_open - close_price) * pos.volume * 100
                
                # ‡∏´‡∏±‡∏Å‡∏Ñ‡πà‡∏≤‡∏ò‡∏£‡∏£‡∏°‡πÄ‡∏ô‡∏µ‡∏¢‡∏°
                commission_cost = pos.volume * 0.5
                pnl = pnl_before_costs - commission_cost
            
            return {
                'ticket': pos.ticket,
                'current_pnl': pnl,
                'is_profit': pnl > 0,
                'is_loss': pnl < 0
            }
        except Exception as e:
            logger.warning(f"Error analyzing position {pos.ticket}: {e}")
            return {'ticket': pos.ticket, 'current_pnl': 0.0, 'is_profit': False, 'is_loss': False}
    
    def _get_actual_close_profit(self, ticket: int) -> float:
        """‡∏î‡∏∂‡∏á profit ‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î MT5"""
        try:
            # ‡∏î‡∏∂‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥ deals ‡∏Ç‡∏≠‡∏á ticket ‡∏ô‡∏µ‡πâ
            from datetime import datetime, timedelta
            end_time = datetime.now()
            start_time = end_time - timedelta(minutes=5)  # ‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á 5 ‡∏ô‡∏≤‡∏ó‡∏µ
            
            deals = self.mt5.history_deals_get(start_time, end_time)
            if deals:
                for deal in deals:
                    # ‡∏´‡∏≤ deal ‡∏ó‡∏µ‡πà‡∏õ‡∏¥‡∏î position ‡∏ô‡∏µ‡πâ
                    if hasattr(deal, 'position_id') and deal.position_id == ticket:
                        if hasattr(deal, 'profit'):
                            return float(deal.profit)
            
            return 0.0
        except Exception as e:
            logger.warning(f"Error getting actual close profit for {ticket}: {e}")
            return 0.0
