# -*- coding: utf-8 -*-
"""
Advanced Breakout Recovery System
‡∏£‡∏∞‡∏ö‡∏ö Recovery ‡πÅ‡∏ö‡∏ö Triple Position ‡∏´‡∏•‡∏±‡∏á Breakout ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ä‡∏≤‡∏ç‡∏â‡∏•‡∏≤‡∏î
"""

import logging
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Tuple, Any
from dataclasses import dataclass, field
from enum import Enum
from calculations import Position

logger = logging.getLogger(__name__)

class BreakoutType(Enum):
    BULLISH = "BULLISH"      # ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏∞‡∏•‡∏∏‡∏Ç‡∏∂‡πâ‡∏ô
    BEARISH = "BEARISH"      # ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏∞‡∏•‡∏∏‡∏•‡∏á
    NONE = "NONE"            # ‡πÑ‡∏°‡πà‡∏°‡∏µ breakout

class RecoveryPhase(Enum):
    WAITING = "WAITING"                    # ‡∏£‡∏≠ breakout
    NEW_POSITION_OPENED = "NEW_POSITION_OPENED"  # ‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏°‡πâ‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏•‡πâ‡∏ß
    WAITING_PROFIT = "WAITING_PROFIT"      # ‡∏£‡∏≠‡πÑ‡∏°‡πâ‡πÉ‡∏´‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≥‡πÑ‡∏£
    READY_FOR_RECOVERY = "READY_FOR_RECOVERY"  # ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ó‡∏≥ triple recovery
    COMPLETED = "COMPLETED"                # ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô

@dataclass
class BreakoutLevel:
    price: float
    position: Position
    position_type: str  # "BUY" or "SELL"
    is_extreme: bool    # True ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏°‡πâ‡∏™‡∏∏‡∏î‡∏Ç‡∏±‡πâ‡∏ß (‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î/‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î)

@dataclass
class TripleRecoveryGroup:
    breakout_id: str
    breakout_type: BreakoutType
    breakout_price: float
    breakout_time: datetime
    phase: RecoveryPhase
    
    # Positions ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
    old_position: Position          # ‡πÑ‡∏°‡πâ‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏µ‡πà breakout ‡∏ú‡πà‡∏≤‡∏ô
    new_position: Optional[Position] = None  # ‡πÑ‡∏°‡πâ‡πÉ‡∏´‡∏°‡πà‡∏´‡∏•‡∏±‡∏á breakout
    target_recovery: Optional[Position] = None  # ‡πÑ‡∏°‡πâ‡πÄ‡∏Å‡πà‡∏≤‡∏ù‡∏±‡πà‡∏á‡∏ï‡∏£‡∏á‡∏Ç‡πâ‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏õ‡∏¥‡∏î‡∏î‡πâ‡∏ß‡∏¢
    
    # ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
    min_new_profit: float = 1.0     # ‡∏Å‡∏≥‡πÑ‡∏£‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥‡∏Ç‡∏≠‡∏á‡πÑ‡∏°‡πâ‡πÉ‡∏´‡∏°‡πà (pips) - ‡∏¢‡∏∑‡∏î‡∏´‡∏¢‡∏∏‡πà‡∏ô‡∏°‡∏≤‡∏Å
    min_net_profit: float = 0.5     # ‡∏Å‡∏≥‡πÑ‡∏£‡∏™‡∏∏‡∏ó‡∏ò‡∏¥‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥‡∏Å‡πà‡∏≠‡∏ô‡∏õ‡∏¥‡∏î (pips) - ‡∏¢‡∏∑‡∏î‡∏´‡∏¢‡∏∏‡πà‡∏ô‡∏°‡∏≤‡∏Å
    max_wait_time: int = 900        # ‡∏£‡∏≠‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 15 ‡∏ô‡∏≤‡∏ó‡∏µ (‡∏•‡∏î‡∏•‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏∑‡∏î‡∏´‡∏¢‡∏∏‡πà‡∏ô)
    
    # ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
    created_time: datetime = field(default_factory=datetime.now)
    last_check_time: Optional[datetime] = None
    profit_history: List[float] = field(default_factory=list)

class AdvancedBreakoutRecovery:
    """‡∏£‡∏∞‡∏ö‡∏ö Recovery ‡πÅ‡∏ö‡∏ö Triple Position ‡∏´‡∏•‡∏±‡∏á Breakout"""
    
    def __init__(self, mt5_connection):
        self.mt5 = mt5_connection
        self.active_recoveries: Dict[str, TripleRecoveryGroup] = {}
        self.completed_recoveries: List[TripleRecoveryGroup] = []
        
        # ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
        self.breakout_threshold = 0.3      # 3 pips ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö XAUUSD (‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏Ç‡∏∂‡πâ‡∏ô)
        self.position_age_threshold = 300   # 5 ‡∏ô‡∏≤‡∏ó‡∏µ
        self.max_concurrent_recoveries = 3  # ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 3 recovery ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô
        
    def analyze_breakout_levels(self, positions: List[Position], current_price: float) -> Dict[str, Any]:
        """‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏£‡∏∞‡∏î‡∏±‡∏ö breakout ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥"""
        try:
            if not positions:
                return {'has_levels': False, 'reason': '‡πÑ‡∏°‡πà‡∏°‡∏µ positions'}
            
            # ‡πÅ‡∏¢‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó positions
            buy_positions = [pos for pos in positions if pos.type == 0]
            sell_positions = [pos for pos in positions if pos.type == 1]
            
            if not buy_positions or not sell_positions:
                return {'has_levels': False, 'reason': '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ó‡∏±‡πâ‡∏á BUY ‡πÅ‡∏•‡∏∞ SELL positions'}
            
            # ‡∏´‡∏≤ extreme levels
            buy_levels = self._find_extreme_positions(buy_positions, "BUY")
            sell_levels = self._find_extreme_positions(sell_positions, "SELL")
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö hierarchy violation
            max_buy = max(level.price for level in buy_levels)
            min_sell = min(level.price for level in sell_levels)
            
            is_overlapping = max_buy >= min_sell
            
            if not is_overlapping:
                return {
                    'has_levels': False, 
                    'reason': 'Price hierarchy ‡∏õ‡∏Å‡∏ï‡∏¥',
                    'max_buy': max_buy,
                    'min_sell': min_sell
                }
            
            # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå breakout potential
            analysis = {
                'has_levels': True,
                'is_overlapping': True,
                'current_price': current_price,
                'max_buy': max_buy,
                'min_sell': min_sell,
                'buy_levels': buy_levels,
                'sell_levels': sell_levels,
                'breakout_analysis': self._analyze_breakout_potential(
                    current_price, buy_levels, sell_levels
                )
            }
            
            logger.info(f"üìä Breakout Levels Analysis:")
            logger.info(f"   Current Price: {current_price}")
            logger.info(f"   Max BUY Level: {max_buy}")
            logger.info(f"   Min SELL Level: {min_sell}")
            logger.info(f"   Overlapping: {is_overlapping}")
            logger.info(f"   BUY Levels: {len(buy_levels)}, SELL Levels: {len(sell_levels)}")
            
            # ‡πÄ‡∏û‡∏¥‡πà‡∏° reason ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏ì‡∏µ has_levels = True
            analysis['reason'] = f"Price hierarchy overlapping - analyzing breakout potential"
            
            return analysis
            
        except Exception as e:
            logger.error(f"Error analyzing breakout levels: {e}")
            return {'has_levels': False, 'reason': f'‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}'}
    
    def _find_extreme_positions(self, positions: List[Position], pos_type: str) -> List[BreakoutLevel]:
        """‡∏´‡∏≤ positions ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏à‡∏∏‡∏î‡∏™‡∏∏‡∏î‡∏Ç‡∏±‡πâ‡∏ß"""
        try:
            if not positions:
                return []
            
            # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏£‡∏≤‡∏Ñ‡∏≤
            if pos_type == "BUY":
                # BUY: ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏à‡∏≤‡∏Å‡∏™‡∏π‡∏á‡πÑ‡∏õ‡∏ï‡πà‡∏≥ (‡∏™‡∏ô‡πÉ‡∏à‡πÑ‡∏°‡πâ‡∏ó‡∏µ‡πà‡∏™‡∏π‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î)
                sorted_positions = sorted(positions, key=lambda x: x.price_open, reverse=True)
            else:
                # SELL: ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏à‡∏≤‡∏Å‡∏ï‡πà‡∏≥‡πÑ‡∏õ‡∏™‡∏π‡∏á (‡∏™‡∏ô‡πÉ‡∏à‡πÑ‡∏°‡πâ‡∏ó‡∏µ‡πà‡∏ï‡πà‡∏≥‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î)
                sorted_positions = sorted(positions, key=lambda x: x.price_open)
            
            levels = []
            
            # ‡∏´‡∏≤‡πÑ‡∏°‡πâ‡∏™‡∏∏‡∏î‡∏Ç‡∏±‡πâ‡∏ß (top 3 positions)
            for i, pos in enumerate(sorted_positions[:3]):
                is_extreme = i == 0  # ‡πÑ‡∏°‡πâ‡πÅ‡∏£‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏∏‡∏î‡∏Ç‡∏±‡πâ‡∏ß
                
                level = BreakoutLevel(
                    price=pos.price_open,
                    position=pos,
                    position_type=pos_type,
                    is_extreme=is_extreme
                )
                levels.append(level)
            
            return levels
            
        except Exception as e:
            logger.error(f"Error finding extreme positions: {e}")
            return []
    
    def _analyze_breakout_potential(self, current_price: float, 
                                  buy_levels: List[BreakoutLevel],
                                  sell_levels: List[BreakoutLevel]) -> Dict[str, Any]:
        """‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏Å‡∏≤‡∏£ breakout"""
        try:
            # ‡∏´‡∏≤‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏™‡∏∏‡∏î‡∏Ç‡∏±‡πâ‡∏ß
            max_buy_level = max(buy_levels, key=lambda x: x.price) if buy_levels else None
            min_sell_level = min(sell_levels, key=lambda x: x.price) if sell_levels else None
            
            if not max_buy_level or not min_sell_level:
                return {'potential': 'NONE', 'reason': '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏™‡∏∏‡∏î‡∏Ç‡∏±‡πâ‡∏ß'}
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á
            distance_to_max_buy = abs(current_price - max_buy_level.price)
            distance_to_min_sell = abs(current_price - min_sell_level.price)
            
            analysis = {
                'max_buy_level': max_buy_level,
                'min_sell_level': min_sell_level,
                'distance_to_max_buy': distance_to_max_buy,
                'distance_to_min_sell': distance_to_min_sell,
                'breakout_threshold': self.breakout_threshold
            }
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£ breakout ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡πÑ‡∏°‡πâ
            if current_price > max_buy_level.price + self.breakout_threshold:
                # ‡∏ó‡∏∞‡∏•‡∏∏‡∏Ç‡∏∂‡πâ‡∏ô‡πÅ‡∏•‡πâ‡∏ß - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÑ‡∏°‡πâ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÄ‡∏ö‡∏£‡∏Ñ
                breakout_position_type = max_buy_level.position.type  # 0=BUY, 1=SELL
                
                if breakout_position_type == 0:  # BUY ‡∏ñ‡∏π‡∏Å‡πÄ‡∏ö‡∏£‡∏Ñ
                    # BUY ‡∏ñ‡∏π‡∏Å‡πÄ‡∏ö‡∏£‡∏Ñ‡∏Ç‡∏∂‡πâ‡∏ô ‚Üí ‡∏£‡∏≠‡πÅ‡∏£‡∏á‡∏ï‡∏•‡∏≤‡∏î ‡πÅ‡∏•‡πâ‡∏ß‡∏≠‡∏≠‡∏Å SELL ‡∏ï‡∏£‡∏á‡∏Ç‡πâ‡∏≤‡∏°
                    counter_action = 'WAIT_MARKET_STRENGTH_THEN_SELL'
                else:  # SELL ‡∏ñ‡∏π‡∏Å‡πÄ‡∏ö‡∏£‡∏Ñ  
                    # SELL ‡∏ñ‡∏π‡∏Å‡πÄ‡∏ö‡∏£‡∏Ñ‡∏Ç‡∏∂‡πâ‡∏ô ‚Üí ‡∏≠‡∏≠‡∏Å‡∏ï‡∏≤‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏õ‡∏Å‡∏ï‡∏¥
                    counter_action = 'OPEN_SELL_NORMAL'
                
                analysis.update({
                    'potential': 'BULLISH_BREAKOUT',
                    'breakout_level': max_buy_level,
                    'breakout_position_type': 'BUY' if breakout_position_type == 0 else 'SELL',
                    'target_recovery_level': min_sell_level,
                    'recommended_action': counter_action,
                    'counter_trade_direction': 'SELL'
                })
            elif current_price < min_sell_level.price - self.breakout_threshold:
                # ‡∏ó‡∏∞‡∏•‡∏∏‡∏•‡∏á‡πÅ‡∏•‡πâ‡∏ß - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÑ‡∏°‡πâ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÄ‡∏ö‡∏£‡∏Ñ
                breakout_position_type = min_sell_level.position.type  # 0=BUY, 1=SELL
                
                if breakout_position_type == 1:  # SELL ‡∏ñ‡∏π‡∏Å‡πÄ‡∏ö‡∏£‡∏Ñ
                    # SELL ‡∏ñ‡∏π‡∏Å‡πÄ‡∏ö‡∏£‡∏Ñ‡∏•‡∏á ‚Üí ‡∏£‡∏≠‡πÅ‡∏£‡∏á‡∏ï‡∏•‡∏≤‡∏î ‡πÅ‡∏•‡πâ‡∏ß‡∏≠‡∏≠‡∏Å BUY ‡∏ï‡∏£‡∏á‡∏Ç‡πâ‡∏≤‡∏°
                    counter_action = 'WAIT_MARKET_STRENGTH_THEN_BUY'
                else:  # BUY ‡∏ñ‡∏π‡∏Å‡πÄ‡∏ö‡∏£‡∏Ñ
                    # BUY ‡∏ñ‡∏π‡∏Å‡πÄ‡∏ö‡∏£‡∏Ñ‡∏•‡∏á ‚Üí ‡∏≠‡∏≠‡∏Å‡∏ï‡∏≤‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏õ‡∏Å‡∏ï‡∏¥
                    counter_action = 'OPEN_BUY_NORMAL'
                
                analysis.update({
                    'potential': 'BEARISH_BREAKOUT',
                    'breakout_level': min_sell_level,
                    'breakout_position_type': 'SELL' if breakout_position_type == 1 else 'BUY',
                    'target_recovery_level': max_buy_level,
                    'recommended_action': counter_action,
                    'counter_trade_direction': 'BUY'
                })
            elif distance_to_max_buy <= self.breakout_threshold:
                # ‡πÉ‡∏Å‡∏•‡πâ‡∏à‡∏∞‡∏ó‡∏∞‡∏•‡∏∏‡∏Ç‡∏∂‡πâ‡∏ô
                analysis.update({
                    'potential': 'APPROACHING_BULLISH',
                    'breakout_level': max_buy_level,
                    'target_recovery_level': min_sell_level,
                    'recommended_action': 'WAIT_FOR_BULLISH_BREAKOUT'
                })
            elif distance_to_min_sell <= self.breakout_threshold:
                # ‡πÉ‡∏Å‡∏•‡πâ‡∏à‡∏∞‡∏ó‡∏∞‡∏•‡∏∏‡∏•‡∏á
                analysis.update({
                    'potential': 'APPROACHING_BEARISH',
                    'breakout_level': min_sell_level,
                    'target_recovery_level': max_buy_level,
                    'recommended_action': 'WAIT_FOR_BEARISH_BREAKOUT'
                })
            else:
                # ‡∏≠‡∏¢‡∏π‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏•‡∏≤‡∏á
                analysis.update({
                    'potential': 'CONSOLIDATION',
                    'recommended_action': 'WAIT_AND_MONITOR'
                })
            
            logger.debug(f"üéØ Breakout Potential Analysis: {analysis.get('potential', 'UNKNOWN')}")
            logger.debug(f"   Distance to Max BUY: {distance_to_max_buy:.2f} pips")
            logger.debug(f"   Distance to Min SELL: {distance_to_min_sell:.2f} pips")
            logger.debug(f"   Breakout Threshold: {self.breakout_threshold:.2f} pips")
            
            return analysis
            
        except Exception as e:
            logger.error(f"Error analyzing breakout potential: {e}")
            return {'potential': 'ERROR', 'reason': str(e)}
    
    def create_recovery_group(self, breakout_analysis: Dict[str, Any], current_price: float) -> Optional[str]:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏° Triple Recovery"""
        try:
            potential = breakout_analysis.get('potential')
            
            if potential not in ['BULLISH_BREAKOUT', 'BEARISH_BREAKOUT']:
                return None
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô recovery ‡∏ó‡∏µ‡πà active
            if len(self.active_recoveries) >= self.max_concurrent_recoveries:
                logger.warning(f"‡∏°‡∏µ recovery active ‡πÄ‡∏ï‡πá‡∏°‡πÅ‡∏•‡πâ‡∏ß ({self.max_concurrent_recoveries})")
                return None
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á recovery group
            breakout_id = f"recovery_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
            
            breakout_type = BreakoutType.BULLISH if potential == 'BULLISH_BREAKOUT' else BreakoutType.BEARISH
            breakout_level = breakout_analysis['breakout_level']
            target_recovery_level = breakout_analysis['target_recovery_level']
            
            recovery_group = TripleRecoveryGroup(
                breakout_id=breakout_id,
                breakout_type=breakout_type,
                breakout_price=current_price,
                breakout_time=datetime.now(),
                phase=RecoveryPhase.WAITING,
                old_position=breakout_level.position,
                target_recovery=target_recovery_level.position
            )
            
            self.active_recoveries[breakout_id] = recovery_group
            
            logger.info(f"üéØ ‡∏™‡∏£‡πâ‡∏≤‡∏á Recovery Group: {breakout_id}")
            logger.info(f"   Type: {breakout_type.value}")
            logger.info(f"   Breakout Price: {current_price}")
            logger.info(f"   Old Position: {breakout_level.position.ticket} ({breakout_level.position_type})")
            logger.info(f"   Target Recovery: {target_recovery_level.position.ticket} ({target_recovery_level.position_type})")
            
            return breakout_id
            
        except Exception as e:
            logger.error(f"Error creating recovery group: {e}")
            return None
    
    def update_recovery_groups(self, current_price: float, positions: List[Position]) -> Dict[str, Any]:
        """‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á recovery groups"""
        try:
            results = {
                'updated_groups': 0,
                'ready_for_recovery': [],
                'completed_groups': [],
                'expired_groups': [],
                'actions_needed': []
            }
            
            current_time = datetime.now()
            expired_groups = []
            
            for group_id, group in self.active_recoveries.items():
                # ‡πÄ‡∏ä‡πá‡∏Ñ‡∏Å‡∏≤‡∏£‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤
                if (current_time - group.created_time).total_seconds() > group.max_wait_time:
                    expired_groups.append(group_id)
                    continue
                
                # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
                updated = self._update_single_recovery_group(group, current_price, positions)
                if updated:
                    results['updated_groups'] += 1
                
                # ‡πÄ‡∏ä‡πá‡∏Ñ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
                if group.phase == RecoveryPhase.READY_FOR_RECOVERY:
                    results['ready_for_recovery'].append(group_id)
                elif group.phase == RecoveryPhase.COMPLETED:
                    results['completed_groups'].append(group_id)
                
                # ‡πÄ‡∏ä‡πá‡∏Ñ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ó‡∏≥‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥
                action = self._check_required_actions(group, current_price)
                if action:
                    results['actions_needed'].append(action)
            
            # ‡∏•‡∏ö groups ‡∏ó‡∏µ‡πà‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤
            for group_id in expired_groups:
                expired_group = self.active_recoveries.pop(group_id)
                self.completed_recoveries.append(expired_group)
                results['expired_groups'].append(group_id)
                logger.warning(f"‚è∞ Recovery Group ‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤: {group_id}")
            
            return results
            
        except Exception as e:
            logger.error(f"Error updating recovery groups: {e}")
            return {'error': str(e)}
    
    def _update_single_recovery_group(self, group: TripleRecoveryGroup, 
                                    current_price: float, positions: List[Position]) -> bool:
        """‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó recovery group ‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß"""
        try:
            group.last_check_time = datetime.now()
            updated = False
            
            # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏ï‡∏≤‡∏° phase
            if group.phase == RecoveryPhase.WAITING:
                # ‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏¥‡∏î position ‡πÉ‡∏´‡∏°‡πà
                new_pos = self._find_new_position_after_breakout(group, positions)
                if new_pos:
                    group.new_position = new_pos
                    group.phase = RecoveryPhase.NEW_POSITION_OPENED
                    updated = True
                    logger.info(f"‚úÖ Recovery {group.breakout_id}: ‡πÄ‡∏õ‡∏¥‡∏î position ‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏•‡πâ‡∏ß {new_pos.ticket}")
            
            elif group.phase == RecoveryPhase.NEW_POSITION_OPENED:
                group.phase = RecoveryPhase.WAITING_PROFIT
                updated = True
            
            elif group.phase == RecoveryPhase.WAITING_PROFIT:
                # ‡∏£‡∏≠ position ‡πÉ‡∏´‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≥‡πÑ‡∏£
                if group.new_position and group.new_position.profit > group.min_new_profit:
                    group.phase = RecoveryPhase.READY_FOR_RECOVERY
                    updated = True
                    logger.info(f"üéØ Recovery {group.breakout_id}: ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ó‡∏≥ Triple Recovery")
            
            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≥‡πÑ‡∏£
            if group.new_position:
                group.profit_history.append(group.new_position.profit)
            
            return updated
            
        except Exception as e:
            logger.error(f"Error updating single recovery group: {e}")
            return False
    
    def _find_new_position_after_breakout(self, group: TripleRecoveryGroup, 
                                        positions: List[Position]) -> Optional[Position]:
        """‡∏´‡∏≤ position ‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏•‡∏±‡∏á breakout"""
        try:
            # ‡∏´‡∏≤ position ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏•‡∏±‡∏á breakout time
            for pos in positions:
                # ‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏õ‡∏¥‡∏î
                if hasattr(pos, 'time_open') and pos.time_open:
                    try:
                        if hasattr(pos.time_open, 'timestamp'):
                            pos_time = datetime.fromtimestamp(pos.time_open.timestamp())
                        else:
                            pos_time = datetime.fromtimestamp(pos.time_open)
                        
                        # ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏•‡∏±‡∏á breakout
                        if pos_time <= group.breakout_time:
                            continue
                    except:
                        continue
                
                # ‡πÄ‡∏ä‡πá‡∏Ñ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó position
                if group.breakout_type == BreakoutType.BULLISH:
                    # Bullish breakout ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡∏¥‡∏î SELL
                    if pos.type == 1 and pos.price_open > group.breakout_price:
                        return pos
                elif group.breakout_type == BreakoutType.BEARISH:
                    # Bearish breakout ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡∏¥‡∏î BUY
                    if pos.type == 0 and pos.price_open < group.breakout_price:
                        return pos
            
            return None
            
        except Exception as e:
            logger.error(f"Error finding new position after breakout: {e}")
            return None
    
    def _check_required_actions(self, group: TripleRecoveryGroup, current_price: float) -> Optional[Dict[str, Any]]:
        """‡πÄ‡∏ä‡πá‡∏Ñ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ó‡∏≥‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥"""
        try:
            if group.phase == RecoveryPhase.WAITING:
                # ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡∏¥‡∏î position ‡πÉ‡∏´‡∏°‡πà
                if group.breakout_type == BreakoutType.BULLISH:
                    return {
                        'action': 'OPEN_SELL',
                        'group_id': group.breakout_id,
                        'target_price': current_price + 1.0,
                        'reason': '‡πÄ‡∏õ‡∏¥‡∏î SELL ‡∏´‡∏•‡∏±‡∏á Bullish Breakout'
                    }
                elif group.breakout_type == BreakoutType.BEARISH:
                    return {
                        'action': 'OPEN_BUY',
                        'group_id': group.breakout_id,
                        'target_price': current_price - 1.0,
                        'reason': '‡πÄ‡∏õ‡∏¥‡∏î BUY ‡∏´‡∏•‡∏±‡∏á Bearish Breakout'
                    }
            
            return None
            
        except Exception as e:
            logger.error(f"Error checking required actions: {e}")
            return None
    
    def calculate_triple_recovery(self, group_id: str, portfolio_validator=None) -> Optional[Dict[str, Any]]:
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Triple Recovery"""
        try:
            group = self.active_recoveries.get(group_id)
            if not group or group.phase != RecoveryPhase.READY_FOR_RECOVERY:
                return None
            
            positions = [group.old_position, group.new_position, group.target_recovery]
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Å‡∏≥‡πÑ‡∏£‡∏£‡∏ß‡∏°
            total_profit = sum(pos.profit for pos in positions if pos)
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì spread cost
            spread_cost = self._calculate_spread_cost(positions)
            
            # ‡∏Å‡∏≥‡πÑ‡∏£‡∏™‡∏∏‡∏ó‡∏ò‡∏¥
            net_profit = total_profit - spread_cost
            
            # ‡πÉ‡∏ä‡πâ Portfolio Health Validator ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ (‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏•‡∏±‡∏Å)
            should_close = net_profit >= group.min_net_profit
            
            if should_close and portfolio_validator:
                # ‡∏™‡∏£‡πâ‡∏≤‡∏á candidate ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö validation
                validation_candidate = {
                    'positions': positions,
                    'net_profit': net_profit,
                    'total_profit': total_profit
                }
                
                validation = portfolio_validator(validation_candidate, None)
                if not validation['valid']:
                    logger.info(f"üõ°Ô∏è Triple Recovery ‡∏ñ‡∏π‡∏Å‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡πÇ‡∏î‡∏¢ Portfolio Health: {validation['reason']}")
                    should_close = False
                else:
                    logger.info(f"‚úÖ Triple Recovery ‡∏ú‡πà‡∏≤‡∏ô Portfolio Health Check")
            
            result = {
                'group_id': group_id,
                'positions': positions,
                'total_profit': total_profit,
                'spread_cost': spread_cost,
                'net_profit': net_profit,
                'should_close': should_close,
                'min_required': group.min_net_profit
            }
            
            logger.info(f"üßÆ Triple Recovery Calculation ({group_id}):")
            logger.info(f"   Old Position: {group.old_position.ticket} (${group.old_position.profit:.2f})")
            logger.info(f"   New Position: {group.new_position.ticket} (${group.new_position.profit:.2f})")
            logger.info(f"   Target Recovery: {group.target_recovery.ticket} (${group.target_recovery.profit:.2f})")
            logger.info(f"   Total Profit: ${total_profit:.2f}")
            logger.info(f"   Spread Cost: ${spread_cost:.2f}")
            logger.info(f"   Net Profit: ${net_profit:.2f}")
            logger.info(f"   Should Close: {should_close} (Min: ${group.min_net_profit:.2f})")
            
            return result
            
        except Exception as e:
            logger.error(f"Error calculating triple recovery: {e}")
            return None
    
    def should_execute_counter_trade(self, breakout_analysis: Dict, current_price: float, symbol: str = "XAUUSD") -> Dict[str, Any]:
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡∏ß‡∏£‡∏≠‡∏≠‡∏Å‡πÑ‡∏°‡πâ‡∏ï‡∏£‡∏á‡∏Ç‡πâ‡∏≤‡∏°‡∏´‡∏•‡∏±‡∏á breakout ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"""
        try:
            recommended_action = breakout_analysis.get('recommended_action', '')
            
            # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏≠‡πÅ‡∏£‡∏á‡∏ï‡∏•‡∏≤‡∏î ‚Üí ‡∏≠‡∏≠‡∏Å‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢
            if 'WAIT_MARKET_STRENGTH' not in recommended_action:
                return {
                    'should_trade': True,
                    'reason': 'Normal breakout - trade immediately',
                    'direction': breakout_analysis.get('counter_trade_direction', 'UNKNOWN')
                }
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏£‡∏á‡∏ï‡∏•‡∏≤‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏ì‡∏µ‡∏û‡∏¥‡πÄ‡∏®‡∏©
            market_strength = self._analyze_market_strength(current_price, symbol)
            
            # ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡πÑ‡∏°‡πâ‡∏ï‡∏£‡∏á‡∏Ç‡πâ‡∏≤‡∏°
            trade_conditions = []
            
            # 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Volume
            if market_strength.get('volume_ratio', 0) > 1.2:
                trade_conditions.append('Volume ‡∏™‡∏π‡∏á')
            
            # 2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Momentum  
            if market_strength.get('momentum_strength', 0) > 30:
                trade_conditions.append('Momentum ‡πÅ‡∏£‡∏á')
            
            # 3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö ATR (‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô)
            if market_strength.get('atr_ratio', 0) > 1.5:
                trade_conditions.append('ATR ‡∏™‡∏π‡∏á')
            
            # 4. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡∏•‡∏±‡∏á breakout
            breakout_time_passed = market_strength.get('time_since_breakout', 0)
            if breakout_time_passed > 300:  # 5 ‡∏ô‡∏≤‡∏ó‡∏µ
                trade_conditions.append('‡πÄ‡∏ß‡∏•‡∏≤‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏õ 5+ ‡∏ô‡∏≤‡∏ó‡∏µ')
            
            # ‡∏ï‡πâ‡∏≠‡∏á‡∏ú‡πà‡∏≤‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 2 ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç
            should_trade = len(trade_conditions) >= 2
            
            return {
                'should_trade': should_trade,
                'reason': f"Market conditions: {', '.join(trade_conditions) if trade_conditions else '‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠'}",
                'direction': breakout_analysis.get('counter_trade_direction', 'UNKNOWN'),
                'conditions_met': len(trade_conditions),
                'total_conditions': 4,
                'market_strength': market_strength
            }
            
        except Exception as e:
            logger.error(f"Error checking counter trade conditions: {e}")
            return {'should_trade': False, 'reason': f'Error: {str(e)}', 'direction': 'UNKNOWN'}
    
    def _analyze_market_strength(self, current_price: float, symbol: str) -> Dict[str, Any]:
        """‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏£‡∏á‡∏ï‡∏•‡∏≤‡∏î‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô"""
        try:
            try:
                import MetaTrader5 as mt5
            except ImportError:
                logger.warning("MetaTrader5 not available for market strength analysis")
                return {'volume_ratio': 0, 'momentum_strength': 0, 'atr_ratio': 0, 'time_since_breakout': 0}
            
            # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• M5 ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î 20 ‡πÅ‡∏ó‡πà‡∏á
            rates = mt5.copy_rates_from_pos(symbol, mt5.TIMEFRAME_M5, 0, 20)
            if rates is None or len(rates) < 10:
                return {'volume_ratio': 0, 'momentum_strength': 0, 'atr_ratio': 0, 'time_since_breakout': 0}
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Volume Ratio
            recent_volumes = [r['tick_volume'] for r in rates[-3:]]
            older_volumes = [r['tick_volume'] for r in rates[-10:-3]]
            avg_recent = sum(recent_volumes) / len(recent_volumes)
            avg_older = sum(older_volumes) / len(older_volumes)
            volume_ratio = avg_recent / avg_older if avg_older > 0 else 1.0
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Momentum
            price_change = (rates[-1]['close'] - rates[-5]['close']) * 10  # pips
            momentum_strength = min(100, abs(price_change) * 3)
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì ATR Ratio
            atr_recent = sum([(r['high'] - r['low']) * 10 for r in rates[-3:]]) / 3
            atr_older = sum([(r['high'] - r['low']) * 10 for r in rates[-10:-3]]) / 7
            atr_ratio = atr_recent / atr_older if atr_older > 0 else 1.0
            
            return {
                'volume_ratio': volume_ratio,
                'momentum_strength': momentum_strength,
                'atr_ratio': atr_ratio,
                'time_since_breakout': 60,  # ‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏Å‡∏≤‡∏£ - ‡∏Ñ‡∏ß‡∏£‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏£‡∏¥‡∏á
                'price_change_pips': price_change
            }
            
        except Exception as e:
            logger.error(f"Error analyzing market strength: {e}")
            return {'volume_ratio': 0, 'momentum_strength': 0, 'atr_ratio': 0, 'time_since_breakout': 0}
    
    def _calculate_spread_cost(self, positions: List[Position]) -> float:
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤ spread ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö positions"""
        try:
            if not positions:
                return 0.0
            
            # ‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏Å‡∏≤‡∏£ spread cost (‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÉ‡∏´‡πâ‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏Å‡∏ß‡πà‡∏≤‡∏ô‡∏µ‡πâ)
            total_volume = sum(pos.volume for pos in positions if pos)
            
            # XAUUSD spread ‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì 3-5 pips
            estimated_spread_per_lot = 3.0
            total_spread_cost = total_volume * estimated_spread_per_lot
            
            return total_spread_cost
            
        except Exception as e:
            logger.error(f"Error calculating spread cost: {e}")
            return 0.0
    
    def execute_triple_recovery(self, group_id: str, portfolio_validator=None) -> Dict[str, Any]:
        """‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£ Triple Recovery (‡πÉ‡∏ä‡πâ Portfolio Health Validator ‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ô)"""
        try:
            calculation = self.calculate_triple_recovery(group_id, portfolio_validator)
            if not calculation or not calculation['should_close']:
                return {
                    'success': False,
                    'reason': '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Recovery ‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏≥‡πÑ‡∏£‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠'
                }
            
            group = self.active_recoveries[group_id]
            positions = calculation['positions']
            tickets = [pos.ticket for pos in positions if pos]
            
            # ‡∏õ‡∏¥‡∏î positions ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô
            result = self.mt5.close_positions_group_with_spread_check(tickets)
            
            if result['success']:
                # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
                group.phase = RecoveryPhase.COMPLETED
                self.completed_recoveries.append(group)
                del self.active_recoveries[group_id]
                
                logger.info(f"‚úÖ Triple Recovery ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ({group_id})")
                logger.info(f"   ‡∏õ‡∏¥‡∏î Positions: {tickets}")
                logger.info(f"   ‡∏Å‡∏≥‡πÑ‡∏£‡∏™‡∏∏‡∏ó‡∏ò‡∏¥: ${calculation['net_profit']:.2f}")
                
                return {
                    'success': True,
                    'group_id': group_id,
                    'closed_tickets': tickets,
                    'net_profit': calculation['net_profit'],
                    'message': f"Triple Recovery ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à - ‡∏Å‡∏≥‡πÑ‡∏£‡∏™‡∏∏‡∏ó‡∏ò‡∏¥ ${calculation['net_profit']:.2f}"
                }
            else:
                return {
                    'success': False,
                    'reason': f"‡∏õ‡∏¥‡∏î positions ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {result.get('message', 'Unknown error')}"
                }
                
        except Exception as e:
            logger.error(f"Error executing triple recovery: {e}")
            return {
                'success': False,
                'reason': f'‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}'
            }
    
    def get_recovery_status(self) -> Dict[str, Any]:
        """‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á recovery system"""
        try:
            return {
                'active_recoveries': len(self.active_recoveries),
                'completed_recoveries': len(self.completed_recoveries),
                'max_concurrent': self.max_concurrent_recoveries,
                'active_groups': {
                    group_id: {
                        'type': group.breakout_type.value,
                        'phase': group.phase.value,
                        'age_seconds': (datetime.now() - group.created_time).total_seconds(),
                        'new_position_profit': group.new_position.profit if group.new_position else None
                    }
                    for group_id, group in self.active_recoveries.items()
                }
            }
            
        except Exception as e:
            logger.error(f"Error getting recovery status: {e}")
            return {'error': str(e)}
