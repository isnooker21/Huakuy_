# -*- coding: utf-8 -*-
"""
GUI Module
‡πÇ‡∏°‡∏î‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Graphical User Interface ‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏ó‡∏£‡∏î
"""

import tkinter as tk
from tkinter import ttk, scrolledtext, messagebox
import threading
import time
import logging
from typing import Dict, List, Optional, Any
from datetime import datetime

logger = logging.getLogger(__name__)

class TradingGUI:
    """‡∏Ñ‡∏•‡∏≤‡∏™‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö GUI ‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏ó‡∏£‡∏î"""
    
    def __init__(self, trading_system):
        """
        Args:
            trading_system: ‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏ó‡∏£‡∏î‡∏´‡∏•‡∏±‡∏Å
        """
        self.trading_system = trading_system
        self.portfolio_manager = trading_system.portfolio_manager
        self.mt5_connection = trading_system.mt5_connection
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á main window
        self.root = tk.Tk()
        self.root.title("üöÄ Enhanced 7D Smart Trading System")
        self.root.geometry("1200x800")
        self.root.configure(bg='#1a1a1a')
        
        # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ icon ‡πÅ‡∏•‡∏∞ style
        try:
            self.root.iconbitmap('icon.ico')  # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ icon file
        except:
            pass
        
        # ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö GUI
        self.is_trading = False
        self.update_thread = None
        self.stop_update = False
        self._last_account_update = 0  # ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó
        self._last_market_status_update = 0  # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö market status
        self._last_7d_analysis_update = 0  # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö 7D analysis
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á GUI components
        self.create_widgets()
        self.setup_styles()
        
        # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ö‡∏≤‡πÜ ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å GUI ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à
        self.root.after(10000, self.start_light_update)  # ‡∏£‡∏≠ 10 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó
        
    def create_widgets(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á widgets ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
        try:
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á main frame
            main_frame = tk.Frame(self.root, bg='#1a1a1a')
            main_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á top frame ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°
            self.create_control_panel(main_frame)
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á middle frame ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏Å
            self.create_main_info_panel(main_frame)
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á bottom frame ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö positions ‡πÅ‡∏•‡∏∞ log
            self.create_bottom_panel(main_frame)
            
            # üß† ‡∏™‡∏£‡πâ‡∏≤‡∏á AI Intelligence Tab
            self.create_ai_intelligence_tab(main_frame)
            
        except Exception as e:
            logger.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á widgets: {str(e)}")
            
    def create_control_panel(self, parent):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ú‡∏á‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°"""
        control_frame = tk.Frame(parent, bg='#1a1a1a')
        control_frame.pack(fill=tk.X, pady=(0, 10))
        
        # Connection Status
        conn_frame = tk.Frame(control_frame, bg='#2d2d2d', relief=tk.RAISED, bd=2)
        conn_frame.pack(side=tk.LEFT, padx=(0, 10), pady=3, fill=tk.Y)
        
        tk.Label(conn_frame, text="üîó MT5 Connection", bg='#2d2d2d', fg='#00ff88', 
                                                    font=('Segoe UI', 8, 'bold')).pack(pady=4)
        
        self.connection_status = tk.Label(conn_frame, text="Disconnected", 
                                        bg='#2d2d2d', fg='#ff4444', font=('Segoe UI', 9, 'bold'))
        self.connection_status.pack(pady=2)
        
        self.connect_btn = tk.Button(conn_frame, text="Connect MT5", 
                                   command=self.connect_mt5, bg='#4a4a4a', fg='white',
                                   font=('Segoe UI', 9), relief=tk.RAISED, bd=2)
        self.connect_btn.pack(pady=4)
        
        # Trading Controls
        trading_frame = tk.Frame(control_frame, bg='#2d2d2d', relief=tk.RAISED, bd=2)
        trading_frame.pack(side=tk.LEFT, padx=(0, 10), pady=3, fill=tk.Y)
        
        tk.Label(trading_frame, text="üéØ Trading Control", bg='#2d2d2d', fg='#00ff88', 
                                                    font=('Segoe UI', 8, 'bold')).pack(pady=4)
        
        self.trading_status = tk.Label(trading_frame, text="Stopped", 
                                     bg='#2d2d2d', fg='#ff4444', font=('Segoe UI', 9, 'bold'))
        self.trading_status.pack(pady=3)
        
        btn_frame = tk.Frame(trading_frame, bg='#2d2d2d')
        btn_frame.pack(pady=8)
        
        self.start_btn = tk.Button(btn_frame, text="‚ñ∂Ô∏è Start", 
                                 command=self.start_trading, bg='#4CAF50', fg='white',
                                 font=('Segoe UI', 9, 'bold'), relief=tk.RAISED, bd=2)
        self.start_btn.pack(side=tk.LEFT, padx=3)
        
        self.stop_btn = tk.Button(btn_frame, text="‚èπÔ∏è Stop", 
                                command=self.stop_trading, bg='#f44336', fg='white',
                                font=('Segoe UI', 9, 'bold'), relief=tk.RAISED, bd=2)
        self.stop_btn.pack(side=tk.LEFT, padx=3)
        
        # Emergency Controls
        emergency_frame = tk.Frame(control_frame, bg='#2d2d2d', relief=tk.RAISED, bd=2)
        emergency_frame.pack(side=tk.LEFT, padx=(0, 10), pady=3, fill=tk.Y)
        
        tk.Label(emergency_frame, text="üö® Emergency", bg='#2d2d2d', fg='#ff4444', 
                                                    font=('Segoe UI', 8, 'bold')).pack(pady=4)
        
        self.close_all_btn = tk.Button(emergency_frame, text="üõë Close All Positions", 
                                     command=self.close_all_positions, bg='#d32f2f', fg='white',
                                     font=('Segoe UI', 9, 'bold'), relief=tk.RAISED, bd=2)
        self.close_all_btn.pack(pady=8)
    
    def create_market_status_panel(self, parent):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ú‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ï‡∏•‡∏≤‡∏î"""
        market_frame = tk.Frame(parent, bg='#1a1a1a')
        market_frame.pack(fill=tk.X, pady=(0, 15))
        
        # Market Status Card
        status_card = tk.Frame(market_frame, bg='#2d2d2d', relief=tk.RAISED, bd=2)
        status_card.pack(fill=tk.X, pady=5)
        
        tk.Label(status_card, text="üïê Market Status", bg='#2d2d2d', fg='#00ff88', 
                font=('Segoe UI', 10, 'bold')).pack(pady=4)
        
        # Market status info
        status_info_frame = tk.Frame(status_card, bg='#2d2d2d')
        status_info_frame.pack(fill=tk.X, padx=10, pady=3)
        
        # Market status labels
        self.market_status_labels = {}
        market_fields = [
            ('status', 'Status', 'üî¥ CLOSED'),
            ('current_time', 'Current Time', '00:00:00'),
            ('active_sessions', 'Active Sessions', 'None'),
            ('next_session', 'Next Session', 'Unknown'),
            ('london_ny_overlap', 'London-NY Overlap', '‚ùå')
        ]
        
        for i, (key, label, default) in enumerate(market_fields):
            row = i // 3
            col = i % 3
            
            field_frame = tk.Frame(status_info_frame, bg='#2d2d2d')
            field_frame.grid(row=row, column=col, padx=10, pady=5, sticky='ew')
            
            tk.Label(field_frame, text=f"{label}:", bg='#2d2d2d', fg='#cccccc', 
                    font=('Segoe UI', 8)).pack(anchor='w')
            
            self.market_status_labels[key] = tk.Label(field_frame, text=default, 
                                                    bg='#2d2d2d', fg='#00ff88', 
                                                    font=('Segoe UI', 8, 'bold'))
            self.market_status_labels[key].pack(anchor='w')
        
        # Configure grid weights
        for i in range(3):
            status_info_frame.columnconfigure(i, weight=1)
        
    def create_main_info_panel(self, parent):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ú‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏Å"""
        info_frame = tk.Frame(parent, bg='#1a1a1a')
        info_frame.pack(fill=tk.X, pady=(0, 10))
        
        # Account Info (‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô)
        self.create_account_info_card(info_frame)
        
        # Trading Status (‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç)
        self.create_trading_status_card(info_frame)
        
        # 7D Smart Closer Status (‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç)
        self.create_7d_closer_status_card(info_frame)
    
    def create_7d_analysis_panel(self, parent):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ú‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå 7D"""
        analysis_frame = tk.Frame(parent, bg='#1a1a1a')
        analysis_frame.pack(fill=tk.X, pady=(0, 15))
        
        # 7D Analysis Card
        analysis_card = tk.Frame(analysis_frame, bg='#2d2d2d', relief=tk.RAISED, bd=2)
        analysis_card.pack(fill=tk.X, pady=5)
        
        tk.Label(analysis_card, text="üß† 7D Smart Analysis", bg='#2d2d2d', fg='#00ff88', 
                font=('Segoe UI', 10, 'bold')).pack(pady=4)
        
        # 7D Analysis info
        analysis_info_frame = tk.Frame(analysis_card, bg='#2d2d2d')
        analysis_info_frame.pack(fill=tk.X, padx=10, pady=3)
        
        # 7D Analysis labels
        self.analysis_labels = {}
        analysis_fields = [
            ('portfolio_health', 'Portfolio Health', 'üü¢ EXCELLENT'),
            ('risk_level', 'Risk Level', 'üü¢ LOW'),
            ('market_timing', 'Market Timing', 'üü¢ EXCELLENT'),
            ('closing_recommendation', 'Closing Recommendation', 'üí§ HOLD'),
            ('active_positions', 'Active Positions', '0'),
            ('closing_confidence', 'Closing Confidence', '0%')
        ]
        
        for i, (key, label, default) in enumerate(analysis_fields):
            row = i // 3
            col = i % 3
            
            field_frame = tk.Frame(analysis_info_frame, bg='#2d2d2d')
            field_frame.grid(row=row, column=col, padx=10, pady=5, sticky='ew')
            
            tk.Label(field_frame, text=f"{label}:", bg='#2d2d2d', fg='#cccccc', 
                    font=('Segoe UI', 8)).pack(anchor='w')
            
            self.analysis_labels[key] = tk.Label(field_frame, text=default, 
                                               bg='#2d2d2d', fg='#00ff88', 
                                               font=('Segoe UI', 8, 'bold'))
            self.analysis_labels[key].pack(anchor='w')
        
        # Configure grid weights
        for i in range(3):
            analysis_info_frame.columnconfigure(i, weight=1)
        
    def create_account_info_card(self, parent):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏±‡∏ç‡∏ä‡∏µ"""
        card = tk.Frame(parent, bg='#2d2d2d', relief=tk.RAISED, bd=2)
        card.pack(side=tk.LEFT, padx=(0, 10), pady=3, fill=tk.BOTH, expand=True)
        
        tk.Label(card, text="üí∞ Account Information", bg='#2d2d2d', fg='#00ff88', 
                font=('Segoe UI', 10, 'bold')).pack(pady=4)
        
        # Account details
        details_frame = tk.Frame(card, bg='#2d2d2d')
        details_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=5)
        
        self.account_labels = {}
        account_fields = [
            ('Balance', 'balance', 'üíµ'),
            ('Equity', 'equity', 'üìä'),
            ('Margin', 'margin', 'üîí'),
            ('Free Margin', 'margin_free', 'üÜì'),
            ('Margin Level', 'margin_level', 'üìà')
        ]
        
        for i, (label, key, icon) in enumerate(account_fields):
            tk.Label(details_frame, text=f"{icon} {label}:", bg='#2d2d2d', fg='#cccccc', 
                    font=('Segoe UI', 8)).grid(row=i, column=0, sticky='w', pady=2)
            
            self.account_labels[key] = tk.Label(details_frame, text="0.00", bg='#2d2d2d', 
                                              fg='#00ff88', font=('Segoe UI', 9, 'bold'))
            self.account_labels[key].grid(row=i, column=1, sticky='e', pady=3)
            
        details_frame.columnconfigure(1, weight=1)
    
    def create_trading_status_card(self, parent):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î"""
        card = tk.Frame(parent, bg='#2d2d2d', relief=tk.RAISED, bd=2)
        card.pack(side=tk.LEFT, padx=(0, 10), pady=3, fill=tk.BOTH, expand=True)
        
        tk.Label(card, text="üìà Trading Status", bg='#2d2d2d', fg='#00ff88', 
                font=('Segoe UI', 10, 'bold')).pack(pady=4)
        
        # Trading status details
        details_frame = tk.Frame(card, bg='#2d2d2d')
        details_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=5)
        
        self.trading_status_labels = {}
        trading_fields = [
            ('active_positions', 'Active Positions', '0', 'üéØ'),
            ('total_pnl', 'Total P&L', '0.00', 'üí∞'),
            ('daily_pnl', 'Daily P&L', '0.00', 'üìä'),
            ('win_rate', 'Win Rate', '0%', 'üéØ'),
            ('profit_factor', 'Profit Factor', '0.00', '‚ö°')
        ]
        
        for i, (key, label, default, icon) in enumerate(trading_fields):
            tk.Label(details_frame, text=f"{icon} {label}:", bg='#2d2d2d', fg='#cccccc', 
                    font=('Segoe UI', 8)).grid(row=i, column=0, sticky='w', pady=2)
            
            self.trading_status_labels[key] = tk.Label(details_frame, text=default, bg='#2d2d2d', 
                                              fg='#00ff88', font=('Segoe UI', 9, 'bold'))
            self.trading_status_labels[key].grid(row=i, column=1, sticky='e', pady=3)
            
        details_frame.columnconfigure(1, weight=1)
    
    def create_7d_closer_status_card(self, parent):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ 7D Smart Closer"""
        card = tk.Frame(parent, bg='#2d2d2d', relief=tk.RAISED, bd=2)
        card.pack(side=tk.LEFT, padx=(0, 10), pady=3, fill=tk.BOTH, expand=True)
        
        tk.Label(card, text="üß† 7D Smart Closer", bg='#2d2d2d', fg='#00ff88', 
                font=('Segoe UI', 10, 'bold')).pack(pady=4)
        
        # 7D Closer status details
        details_frame = tk.Frame(card, bg='#2d2d2d')
        details_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=5)
        
        self.closer_status_labels = {}
        closer_fields = [
            ('closer_status', 'Closer Status', 'üí§ IDLE', 'üîÑ'),
            ('last_analysis', 'Last Analysis', 'Never', '‚è∞'),
            ('closing_confidence', 'Confidence', '0%', 'üéØ'),
            ('positions_analyzed', 'Positions Analyzed', '0', 'üìä'),
            ('recommendation', 'Recommendation', 'HOLD', 'üí°')
        ]
        
        for i, (key, label, default, icon) in enumerate(closer_fields):
            tk.Label(details_frame, text=f"{icon} {label}:", bg='#2d2d2d', fg='#cccccc', 
                    font=('Segoe UI', 8)).grid(row=i, column=0, sticky='w', pady=2)
            
            self.closer_status_labels[key] = tk.Label(details_frame, text=default, bg='#2d2d2d', 
                                              fg='#00ff88', font=('Segoe UI', 9, 'bold'))
            self.closer_status_labels[key].grid(row=i, column=1, sticky='e', pady=3)
            
        details_frame.columnconfigure(1, weight=1)
        
        
    def create_bottom_panel(self, parent):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ú‡∏á‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á"""
        bottom_frame = tk.Frame(parent, bg='#2b2b2b')
        bottom_frame.pack(fill=tk.BOTH, expand=True, pady=(10, 0))
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á notebook ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ó‡πá‡∏ö
        notebook = ttk.Notebook(bottom_frame)
        notebook.pack(fill=tk.BOTH, expand=True)
        
        # ‡πÅ‡∏ó‡πá‡∏ö Positions
        self.create_positions_tab(notebook)
        
        # ‡πÅ‡∏ó‡πá‡∏ö Trading Log
        self.create_log_tab(notebook)
        
        # ‡πÅ‡∏ó‡πá‡∏ö Settings
        self.create_settings_tab(notebook)
        
        # üß† ‡πÅ‡∏ó‡πá‡∏ö AI Intelligence
        self.create_ai_intelligence_tab(notebook)
        
    def create_positions_tab(self, notebook):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ó‡πá‡∏ö Positions"""
        positions_frame = tk.Frame(notebook, bg='#2b2b2b')
        notebook.add(positions_frame, text="Positions")
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á Treeview ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á Positions
        columns = ('Ticket', 'Symbol', 'Type', 'Volume', 'Open Price', 
                  'Current Price', 'Profit', 'Profit %', 'Swap', 'Comment', 'Hedge Pair')
        
        self.positions_tree = ttk.Treeview(positions_frame, columns=columns, show='headings')
        
        # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠
        for col in columns:
            self.positions_tree.heading(col, text=col)
            if col == 'Hedge Pair':
                self.positions_tree.column(col, width=150)  # ‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà
            else:
                self.positions_tree.column(col, width=100)
            
        # ‡πÄ‡∏û‡∏¥‡πà‡∏° scrollbar
        positions_scroll = ttk.Scrollbar(positions_frame, orient=tk.VERTICAL, 
                                       command=self.positions_tree.yview)
        self.positions_tree.configure(yscrollcommand=positions_scroll.set)
        
        # ‡∏à‡∏±‡∏î‡∏ß‡∏≤‡∏á
        self.positions_tree.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        positions_scroll.pack(side=tk.RIGHT, fill=tk.Y)
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏°‡∏ô‡∏π‡∏Ñ‡∏•‡∏¥‡∏Å‡∏Ç‡∏ß‡∏≤
        self.create_positions_context_menu()
        
        
        
        
        
    def create_positions_context_menu(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏°‡∏ô‡∏π‡∏Ñ‡∏•‡∏¥‡∏Å‡∏Ç‡∏ß‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Positions"""
        self.positions_menu = tk.Menu(self.root, tearoff=0)
        self.positions_menu.add_command(label="Close Position", command=self.close_selected_position)
        self.positions_menu.add_separator()
        self.positions_menu.add_command(label="Close All Profitable", command=self.close_profitable_positions)
        self.positions_menu.add_command(label="Close All Losing", command=self.close_losing_positions)
        self.positions_menu.add_separator()
        self.positions_menu.add_command(label="Scale Close 1:1", command=lambda: self.scale_close("1:1"))
        self.positions_menu.add_command(label="Scale Close 1:2", command=lambda: self.scale_close("1:2"))
        
        # ‡∏ú‡∏π‡∏Å‡πÄ‡∏°‡∏ô‡∏π‡∏Å‡∏±‡∏ö Treeview
        self.positions_tree.bind("<Button-3>", self.show_positions_menu)  # Right click
        
    def show_positions_menu(self, event):
        """‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏°‡∏ô‡∏π‡∏Ñ‡∏•‡∏¥‡∏Å‡∏Ç‡∏ß‡∏≤"""
        try:
            self.positions_menu.post(event.x_root, event.y_root)
        except Exception as e:
            logger.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏°‡∏ô‡∏π: {str(e)}")
            
    def create_log_tab(self, notebook):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ó‡πá‡∏ö Log"""
        log_frame = tk.Frame(notebook, bg='#2b2b2b')
        notebook.add(log_frame, text="Trading Log")
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á ScrolledText ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö log
        self.log_text = scrolledtext.ScrolledText(log_frame, bg='#1a1a1a', fg='lightgreen', 
                                                font=('Consolas', 8), wrap=tk.WORD)
        self.log_text.pack(fill=tk.BOTH, expand=True, padx=3, pady=3)
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏° handler ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö logging
        self.setup_log_handler()
        
    def create_settings_tab(self, notebook):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ó‡πá‡∏ö Settings"""
        settings_frame = tk.Frame(notebook, bg='#2b2b2b')
        notebook.add(settings_frame, text="Settings")
        
        # Risk Settings
        risk_settings_frame = tk.LabelFrame(settings_frame, text="Risk Settings (%)", 
                                          bg='#3a3a3a', fg='white', font=('Arial', 10, 'bold'))
        risk_settings_frame.pack(fill=tk.X, padx=8, pady=3)
        
        self.risk_settings = {}
        risk_settings_fields = [
            ('Max Risk per Trade (%)', 'max_risk_per_trade', 2.0),
            ('Max Portfolio Exposure (%)', 'max_portfolio_exposure', 80.0),
            ('Max Daily Loss (%)', 'max_daily_loss', 10.0),
            ('Profit Target (%)', 'profit_target', 2.0),
            ('Max Drawdown Limit (%)', 'max_drawdown_limit', 15.0)
        ]
        
        for i, (label, key, default_value) in enumerate(risk_settings_fields):
            tk.Label(risk_settings_frame, text=label, bg='#3a3a3a', fg='lightgray', 
                    font=('Arial', 9)).grid(row=i, column=0, sticky='w', padx=5, pady=2)
            
            var = tk.DoubleVar(value=default_value)
            entry = tk.Entry(risk_settings_frame, textvariable=var, width=10)
            entry.grid(row=i, column=1, padx=5, pady=2)
            
            self.risk_settings[key] = var
            
        # Balance Settings
        balance_settings_frame = tk.LabelFrame(settings_frame, text="Balance Settings (%)", 
                                             bg='#3a3a3a', fg='white', font=('Arial', 10, 'bold'))
        balance_settings_frame.pack(fill=tk.X, padx=8, pady=3)
        
        self.balance_settings = {}
        balance_settings_fields = [
            ('Balance Warning Threshold (%)', 'balance_warning_threshold', 70.0),
            ('Balance Stop Threshold (%)', 'balance_stop_threshold', 80.0),
            ('Min Market Strength (%)', 'min_market_strength', 0.5),
            ('Min Volume Percentage (%)', 'min_volume_percentage', 120.0)
        ]
        
        for i, (label, key, default_value) in enumerate(balance_settings_fields):
            tk.Label(balance_settings_frame, text=label, bg='#3a3a3a', fg='lightgray', 
                    font=('Arial', 9)).grid(row=i, column=0, sticky='w', padx=5, pady=2)
            
            var = tk.DoubleVar(value=default_value)
            entry = tk.Entry(balance_settings_frame, textvariable=var, width=10)
            entry.grid(row=i, column=1, padx=5, pady=2)
            
            self.balance_settings[key] = var
            
        # Save Settings Button
        save_btn = tk.Button(settings_frame, text="Save Settings", command=self.save_settings, 
                           bg='#4caf50', fg='white', font=('Arial', 10, 'bold'))
        save_btn.pack(pady=10)
    
    def create_ai_intelligence_tab(self, notebook):
        """üß† ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ó‡πá‡∏ö AI Intelligence"""
        ai_frame = tk.Frame(notebook, bg='#2b2b2b')
        notebook.add(ai_frame, text="üß† AI Intelligence")
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á scrollable frame
        canvas = tk.Canvas(ai_frame, bg='#2b2b2b')
        scrollbar = ttk.Scrollbar(ai_frame, orient="vertical", command=canvas.yview)
        scrollable_frame = tk.Frame(canvas, bg='#2b2b2b')
        
        scrollable_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
        )
        
        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)
        
        # AI Position Intelligence
        self.create_ai_position_intelligence_section(scrollable_frame)
        
        # AI Entry Intelligence
        self.create_ai_entry_intelligence_section(scrollable_frame)
        
        # AI Learning System
        self.create_ai_learning_system_section(scrollable_frame)
        
        # AI Decision Engine
        self.create_ai_decision_engine_section(scrollable_frame)
        
        # AI Controls
        self.create_ai_controls_section(scrollable_frame)
        
        # ‡∏à‡∏±‡∏î‡∏ß‡∏≤‡∏á canvas ‡πÅ‡∏•‡∏∞ scrollbar
        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
        
        # Bind mousewheel to canvas
        def _on_mousewheel(event):
            canvas.yview_scroll(int(-1*(event.delta/120)), "units")
        canvas.bind_all("<MouseWheel>", _on_mousewheel)
    
    def create_ai_position_intelligence_section(self, parent):
        """üß† ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô AI Position Intelligence"""
        section_frame = tk.LabelFrame(parent, text="üß† AI Position Intelligence", 
                                    bg='#3a3a3a', fg='#00ff88', font=('Arial', 10, 'bold'))
        section_frame.pack(fill=tk.X, padx=8, pady=5)
        
        # Performance Stats
        stats_frame = tk.Frame(section_frame, bg='#3a3a3a')
        stats_frame.pack(fill=tk.X, padx=5, pady=5)
        
        self.ai_position_stats_labels = {}
        position_stats_fields = [
            ('Total Decisions', 'total_decisions'),
            ('Successful Decisions', 'successful_decisions'),
            ('Accuracy Rate', 'accuracy_rate'),
            ('Learning Progress', 'learning_progress')
        ]
        
        for i, (label, key) in enumerate(position_stats_fields):
            tk.Label(stats_frame, text=f"{label}:", bg='#3a3a3a', fg='lightgray', 
                    font=('Arial', 9)).grid(row=i, column=0, sticky='w', padx=5, pady=2)
            
            self.ai_position_stats_labels[key] = tk.Label(stats_frame, text="0", 
                                                        bg='#3a3a3a', fg='#00ff88', 
                                                        font=('Arial', 9, 'bold'))
            self.ai_position_stats_labels[key].grid(row=i, column=1, sticky='e', padx=5, pady=2)
        
        # Weight Configuration
        weights_frame = tk.Frame(section_frame, bg='#3a3a3a')
        weights_frame.pack(fill=tk.X, padx=5, pady=5)
        
        tk.Label(weights_frame, text="Weight Configuration:", bg='#3a3a3a', fg='white', 
                font=('Arial', 9, 'bold')).pack(anchor='w', pady=(0, 5))
        
        self.ai_position_weights = {}
        weight_fields = [
            ('P&L Weight', 'pnl_weight', 0.35),
            ('Time Weight', 'time_weight', 0.20),
            ('Distance Weight', 'distance_weight', 0.20),
            ('Balance Weight', 'balance_weight', 0.15),
            ('Market Context Weight', 'market_context_weight', 0.10)
        ]
        
        for i, (label, key, default_value) in enumerate(weight_fields):
            tk.Label(weights_frame, text=f"{label}:", bg='#3a3a3a', fg='lightgray', 
                    font=('Arial', 8)).grid(row=i, column=0, sticky='w', padx=5, pady=1)
            
            var = tk.DoubleVar(value=default_value)
            entry = tk.Entry(weights_frame, textvariable=var, width=8)
            entry.grid(row=i, column=1, padx=5, pady=1)
            
            self.ai_position_weights[key] = var
    
    def create_ai_entry_intelligence_section(self, parent):
        """üß† ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô AI Entry Intelligence"""
        section_frame = tk.LabelFrame(parent, text="üß† AI Entry Intelligence", 
                                    bg='#3a3a3a', fg='#00ff88', font=('Arial', 10, 'bold'))
        section_frame.pack(fill=tk.X, padx=8, pady=5)
        
        # Performance Stats
        stats_frame = tk.Frame(section_frame, bg='#3a3a3a')
        stats_frame.pack(fill=tk.X, padx=5, pady=5)
        
        self.ai_entry_stats_labels = {}
        entry_stats_fields = [
            ('Total Decisions', 'total_decisions'),
            ('Successful Decisions', 'successful_decisions'),
            ('Accuracy Rate', 'accuracy_rate'),
            ('Learning Progress', 'learning_progress')
        ]
        
        for i, (label, key) in enumerate(entry_stats_fields):
            tk.Label(stats_frame, text=f"{label}:", bg='#3a3a3a', fg='lightgray', 
                    font=('Arial', 9)).grid(row=i, column=0, sticky='w', padx=5, pady=2)
            
            self.ai_entry_stats_labels[key] = tk.Label(stats_frame, text="0", 
                                                     bg='#3a3a3a', fg='#00ff88', 
                                                     font=('Arial', 9, 'bold'))
            self.ai_entry_stats_labels[key].grid(row=i, column=1, sticky='e', padx=5, pady=2)
        
        # Weight Configuration
        weights_frame = tk.Frame(section_frame, bg='#3a3a3a')
        weights_frame.pack(fill=tk.X, padx=5, pady=5)
        
        tk.Label(weights_frame, text="Weight Configuration:", bg='#3a3a3a', fg='white', 
                font=('Arial', 9, 'bold')).pack(anchor='w', pady=(0, 5))
        
        self.ai_entry_weights = {}
        entry_weight_fields = [
            ('Zone Quality Weight', 'zone_quality_weight', 0.30),
            ('Market Context Weight', 'market_context_weight', 0.25),
            ('Portfolio Impact Weight', 'portfolio_impact_weight', 0.25),
            ('Timing Weight', 'timing_weight', 0.20)
        ]
        
        for i, (label, key, default_value) in enumerate(entry_weight_fields):
            tk.Label(weights_frame, text=f"{label}:", bg='#3a3a3a', fg='lightgray', 
                    font=('Arial', 8)).grid(row=i, column=0, sticky='w', padx=5, pady=1)
            
            var = tk.DoubleVar(value=default_value)
            entry = tk.Entry(weights_frame, textvariable=var, width=8)
            entry.grid(row=i, column=1, padx=5, pady=1)
            
            self.ai_entry_weights[key] = var
    
    def create_ai_learning_system_section(self, parent):
        """üß† ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô AI Learning System"""
        section_frame = tk.LabelFrame(parent, text="üß† AI Learning System", 
                                    bg='#3a3a3a', fg='#00ff88', font=('Arial', 10, 'bold'))
        section_frame.pack(fill=tk.X, padx=8, pady=5)
        
        # Learning Stats
        stats_frame = tk.Frame(section_frame, bg='#3a3a3a')
        stats_frame.pack(fill=tk.X, padx=5, pady=5)
        
        self.ai_learning_stats_labels = {}
        learning_stats_fields = [
            ('Total Learning Cycles', 'total_learning_cycles'),
            ('Last Learning Update', 'last_learning_update'),
            ('Learning Rate', 'learning_rate'),
            ('Adaptation Speed', 'adaptation_speed')
        ]
        
        for i, (label, key) in enumerate(learning_stats_fields):
            tk.Label(stats_frame, text=f"{label}:", bg='#3a3a3a', fg='lightgray', 
                    font=('Arial', 9)).grid(row=i, column=0, sticky='w', padx=5, pady=2)
            
            self.ai_learning_stats_labels[key] = tk.Label(stats_frame, text="0", 
                                                        bg='#3a3a3a', fg='#00ff88', 
                                                        font=('Arial', 9, 'bold'))
            self.ai_learning_stats_labels[key].grid(row=i, column=1, sticky='e', padx=5, pady=2)
    
    def create_ai_decision_engine_section(self, parent):
        """üß† ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô AI Decision Engine"""
        section_frame = tk.LabelFrame(parent, text="üß† AI Decision Engine", 
                                    bg='#3a3a3a', fg='#00ff88', font=('Arial', 10, 'bold'))
        section_frame.pack(fill=tk.X, padx=8, pady=5)
        
        # Decision Stats
        stats_frame = tk.Frame(section_frame, bg='#3a3a3a')
        stats_frame.pack(fill=tk.X, padx=5, pady=5)
        
        self.ai_decision_stats_labels = {}
        decision_stats_fields = [
            ('Combined Decisions', 'combined_decisions'),
            ('AI vs Traditional', 'ai_vs_traditional'),
            ('Confidence Level', 'confidence_level'),
            ('Decision Quality', 'decision_quality')
        ]
        
        for i, (label, key) in enumerate(decision_stats_fields):
            tk.Label(stats_frame, text=f"{label}:", bg='#3a3a3a', fg='lightgray', 
                    font=('Arial', 9)).grid(row=i, column=0, sticky='w', padx=5, pady=2)
            
            self.ai_decision_stats_labels[key] = tk.Label(stats_frame, text="0", 
                                                        bg='#3a3a3a', fg='#00ff88', 
                                                        font=('Arial', 9, 'bold'))
            self.ai_decision_stats_labels[key].grid(row=i, column=1, sticky='e', padx=5, pady=2)
    
    def create_ai_controls_section(self, parent):
        """üß† ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô AI Controls"""
        section_frame = tk.LabelFrame(parent, text="üß† AI Controls", 
                                    bg='#3a3a3a', fg='#00ff88', font=('Arial', 10, 'bold'))
        section_frame.pack(fill=tk.X, padx=8, pady=5)
        
        # Control buttons
        controls_frame = tk.Frame(section_frame, bg='#3a3a3a')
        controls_frame.pack(fill=tk.X, padx=5, pady=5)
        
        # AI Brain Management
        brain_frame = tk.Frame(controls_frame, bg='#3a3a3a')
        brain_frame.pack(fill=tk.X, pady=5)
        
        tk.Label(brain_frame, text="AI Brain Management:", bg='#3a3a3a', fg='white', 
                font=('Arial', 9, 'bold')).pack(anchor='w', pady=(0, 5))
        
        brain_buttons_frame = tk.Frame(brain_frame, bg='#3a3a3a')
        brain_buttons_frame.pack(fill=tk.X)
        
        save_brain_btn = tk.Button(brain_buttons_frame, text="Save AI Brains", 
                                  command=self.save_ai_brains, bg='#4caf50', fg='white',
                                  font=('Arial', 9))
        save_brain_btn.pack(side=tk.LEFT, padx=(0, 5))
        
        load_brain_btn = tk.Button(brain_buttons_frame, text="Load AI Brains", 
                                  command=self.load_ai_brains, bg='#2196f3', fg='white',
                                  font=('Arial', 9))
        load_brain_btn.pack(side=tk.LEFT, padx=(0, 5))
        
        reset_brain_btn = tk.Button(brain_buttons_frame, text="Reset AI Brains", 
                                   command=self.reset_ai_brains, bg='#f44336', fg='white',
                                   font=('Arial', 9))
        reset_brain_btn.pack(side=tk.LEFT, padx=(0, 5))
        
        # AI Learning Controls
        learning_frame = tk.Frame(controls_frame, bg='#3a3a3a')
        learning_frame.pack(fill=tk.X, pady=5)
        
        tk.Label(learning_frame, text="AI Learning Controls:", bg='#3a3a3a', fg='white', 
                font=('Arial', 9, 'bold')).pack(anchor='w', pady=(0, 5))
        
        learning_buttons_frame = tk.Frame(learning_frame, bg='#3a3a3a')
        learning_buttons_frame.pack(fill=tk.X)
        
        start_learning_btn = tk.Button(learning_buttons_frame, text="Start Learning", 
                                      command=self.start_ai_learning, bg='#ff9800', fg='white',
                                      font=('Arial', 9))
        start_learning_btn.pack(side=tk.LEFT, padx=(0, 5))
        
        stop_learning_btn = tk.Button(learning_buttons_frame, text="Stop Learning", 
                                     command=self.stop_ai_learning, bg='#9e9e9e', fg='white',
                                     font=('Arial', 9))
        stop_learning_btn.pack(side=tk.LEFT, padx=(0, 5))
        
        # AI Status
        status_frame = tk.Frame(controls_frame, bg='#3a3a3a')
        status_frame.pack(fill=tk.X, pady=5)
        
        self.ai_status_label = tk.Label(status_frame, text="AI Status: Initializing...", 
                                       bg='#3a3a3a', fg='#ff9800', font=('Arial', 9, 'bold'))
        self.ai_status_label.pack(anchor='w')
        
    def setup_styles(self):
        """‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ styles ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ttk widgets"""
        style = ttk.Style()
        style.theme_use('clam')
        
        # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏µ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Treeview
        style.configure("Treeview", background='#1a1a1a', foreground='white', 
                       fieldbackground='#1a1a1a', font=('Segoe UI', 8))
        style.configure("Treeview.Heading", background='#2d2d2d', foreground='#00ff88',
                                                    font=('Segoe UI', 8, 'bold'))
        
        # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏µ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Progressbar
        style.configure("TProgressbar", background='#00ff88', troughcolor='#2d2d2d')
        
        # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏µ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Notebook tabs
        style.configure("TNotebook", background='#1a1a1a')
        style.configure("TNotebook.Tab", background='#2d2d2d', foreground='white',
                       padding=[15, 8], font=('Segoe UI', 8))
        style.map("TNotebook.Tab", background=[('selected', '#00ff88'), ('active', '#3d3d3d')],
                 foreground=[('selected', '#1a1a1a'), ('active', 'white')])
        
    def setup_log_handler(self):
        """‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ log handler ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô GUI"""
        class GUILogHandler(logging.Handler):
            def __init__(self, text_widget):
                super().__init__()
                self.text_widget = text_widget
                
            def emit(self, record):
                try:
                    msg = self.format(record)
                    timestamp = datetime.now().strftime("%H:%M:%S")
                    
                    # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏µ‡∏ï‡∏≤‡∏° level
                    if record.levelno >= logging.ERROR:
                        color = 'red'
                    elif record.levelno >= logging.WARNING:
                        color = 'orange'
                    elif record.levelno >= logging.INFO:
                        color = 'lightgreen'
                    else:
                        color = 'lightgray'
                        
                    # ‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô GUI (thread-safe)
                    self.text_widget.after(0, lambda: self._append_log(f"[{timestamp}] {msg}\n", color))
                except:
                    pass
                    
            def _append_log(self, message, color):
                try:
                    self.text_widget.insert(tk.END, message)
                    self.text_widget.see(tk.END)
                    
                    # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î
                    lines = int(self.text_widget.index('end-1c').split('.')[0])
                    if lines > 1000:
                        self.text_widget.delete('1.0', '100.0')
                except:
                    pass
                    
        # ‡πÄ‡∏û‡∏¥‡πà‡∏° handler ‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö logger
        gui_handler = GUILogHandler(self.log_text)
        gui_handler.setFormatter(logging.Formatter('%(name)s - %(levelname)s - %(message)s'))
        logging.getLogger().addHandler(gui_handler)
        
    def start_light_update(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö‡πÄ‡∏ö‡∏≤"""
        if not self.update_thread or not self.update_thread.is_alive():
            self.stop_update = False
            self.update_thread = threading.Thread(target=self.light_update_loop, daemon=True)
            self.update_thread.start()
            
    def start_data_update(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô)"""
        if not self.update_thread or not self.update_thread.is_alive():
            self.stop_update = False
            self.update_thread = threading.Thread(target=self.update_data_loop, daemon=True)
            self.update_thread.start()
            
    def light_update_loop(self):
        """Loop ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡πÅ‡∏ö‡∏ö‡πÄ‡∏ö‡∏≤ - OPTIMIZED"""
        update_counter = 0
        while not self.stop_update:
            try:
                if not self.stop_update:
                    # üöÄ OPTIMIZED: ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó connection status ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
                    self.root.after_idle(self.update_connection_status_light)
                    
                    # üöÄ OPTIMIZED: ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡πÅ‡∏ö‡∏ö‡∏™‡∏•‡∏±‡∏ö‡∏Å‡∏±‡∏ô - ‡∏•‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô
                    if update_counter % 6 == 0:  # ‡∏ó‡∏∏‡∏Å 120 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ (‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô)
                        self.root.after_idle(self.update_account_info)
                        self.root.after_idle(self.update_trading_status_data)
                    
                    if update_counter % 8 == 0:  # ‡∏ó‡∏∏‡∏Å 160 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ (‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô)
                        self.root.after_idle(self.update_positions_display_light)
                    
                    if update_counter % 10 == 0:  # ‡∏ó‡∏∏‡∏Å 200 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ (‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô)
                        self.root.after_idle(self.update_7d_closer_status)
                    
                    # üß† ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó AI Intelligence ‡∏ó‡∏∏‡∏Å 12 cycles (240 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)
                    if update_counter % 12 == 0:
                        self.root.after_idle(self.update_ai_intelligence_display)
                    
                    update_counter += 1
                time.sleep(30)  # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏ó‡∏∏‡∏Å 30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ (‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å 20)
            except Exception as e:
                logger.debug(f"Light update error: {str(e)}")
                time.sleep(60)  # ‡∏£‡∏≠‡∏ô‡∏≤‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡∏¥‡∏î error
            
    def update_data_loop(self):
        """Loop ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• - OPTIMIZED"""
        while not self.stop_update:
            try:
                # üöÄ OPTIMIZED: ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô main thread - ‡∏•‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô
                if not self.stop_update:  # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
                    self.root.after_idle(self.safe_update_gui_data)  # ‡πÉ‡∏ä‡πâ after_idle ‡πÅ‡∏ó‡∏ô after(0)
                time.sleep(60)  # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏ó‡∏∏‡∏Å 60 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ (‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å 30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î GUI load ‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô)
            except Exception as e:
                logger.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {str(e)}")
                time.sleep(120)  # ‡∏£‡∏≠‡∏ô‡∏≤‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î (‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å 20)
                
    def safe_update_gui_data(self):
        """‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô GUI ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢ - OPTIMIZED"""
        try:
            if self.stop_update:  # ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏ñ‡πâ‡∏≤‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì
                return
                
            # üöÄ OPTIMIZED: ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ (‡πÄ‡∏ö‡∏≤‡πÜ)
            self.update_connection_status_light()
            
            if self.stop_update:
                return
                
            # üöÄ OPTIMIZED: ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏±‡∏ç‡∏ä‡∏µ (‡∏•‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô)
            if hasattr(self, '_last_account_update'):
                if time.time() - self._last_account_update < 90:  # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏ó‡∏∏‡∏Å 90 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ (‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å 45)
                    return
            
            if self.mt5_connection.is_connected:  # ‡πÉ‡∏ä‡πâ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÅ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô
                self.update_account_info()
                self._last_account_update = time.time()
                
            if self.stop_update:
                return
                
            # üöÄ OPTIMIZED: ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏≠‡∏£‡πå‡∏ï (‡∏•‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô)
            if hasattr(self, '_last_portfolio_update'):
                if time.time() - self._last_portfolio_update < 120:  # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏ó‡∏∏‡∏Å 120 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ (‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å 60)
                    return
            else:
                self._last_portfolio_update = 0
                
            self.update_portfolio_info_light()
            self._last_portfolio_update = time.time()
            
            if self.stop_update:
                return
                
            # üöÄ OPTIMIZED: ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó Positions (‡∏•‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô)  
            if hasattr(self, '_last_positions_update'):
                if time.time() - self._last_positions_update < 80:  # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏ó‡∏∏‡∏Å 80 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ (‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å 40)
                    return
            else:
                self._last_positions_update = 0
                
            self.update_positions_display_light()
            self._last_positions_update = time.time()
            
        except Exception as e:
            logger.debug(f"GUI update error: {str(e)}")  # ‡πÉ‡∏ä‡πâ debug ‡πÅ‡∏ó‡∏ô error
            
    def update_gui_data(self):
        """‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô GUI (‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏à‡∏≤‡∏Å safe_update_gui_data)"""
        self.safe_update_gui_data()
        
    def update_connection_status_light(self):
        """‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÅ‡∏ö‡∏ö‡πÄ‡∏ö‡∏≤"""
        try:
            # ‡πÉ‡∏ä‡πâ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÅ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô
            if self.mt5_connection.is_connected:
                self.connection_status.config(text="Connected", fg='green')
                self.connect_btn.config(text="Disconnect", command=self.disconnect_mt5)
            else:
                self.connection_status.config(text="Disconnected", fg='red')
                self.connect_btn.config(text="Connect MT5", command=self.connect_mt5)
                
            # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î
            if hasattr(self.trading_system, 'is_running') and self.trading_system.is_running:
                self.trading_status.config(text="Running", fg='green')
            else:
                self.trading_status.config(text="Stopped", fg='red')
                
        except Exception as e:
            pass  # ‡πÑ‡∏°‡πà log error ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î overhead
            
            
    def update_positions_display_light(self):
        """‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á Positions ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ö‡∏≤"""
        try:
            # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
            if not hasattr(self, 'positions_tree'):
                return
                
            # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• positions ‡∏à‡∏≤‡∏Å trading system ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
            if self.trading_system and hasattr(self.trading_system, 'order_manager'):
                positions = self.trading_system.order_manager.active_positions
            else:
                positions = []
                
            current_count = len(self.positions_tree.get_children())
            
            # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏à‡∏≥‡∏ô‡∏ß‡∏ô position ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô
            if len(positions) != current_count:
                self.update_positions_display()
                # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Hedge ‡∏î‡πâ‡∏ß‡∏¢ (‡∏ñ‡πâ‡∏≤ GUI ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÅ‡∏•‡πâ‡∏ß)
                if hasattr(self, 'hedge_status_label'):
                    self.update_hedge_status()
                
        except Exception as e:
            logger.debug(f"Position display update error: {str(e)}")
            
            
            
            
            
            
    def update_connection_status(self):
        """‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠"""
        try:
            if self.mt5_connection.check_connection_health():
                self.connection_status.config(text="Connected", fg='green')
                self.connect_btn.config(text="Disconnect", command=self.disconnect_mt5)
            else:
                self.connection_status.config(text="Disconnected", fg='red')
                self.connect_btn.config(text="Connect MT5", command=self.connect_mt5)
                
            # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î
            if self.trading_system.is_running:
                self.trading_status.config(text="Running", fg='green')
            else:
                self.trading_status.config(text="Stopped", fg='red')
                
        except Exception as e:
            logger.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠: {str(e)}")
            
    def update_account_info(self):
        """‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏±‡∏ç‡∏ä‡∏µ"""
        try:
            if not hasattr(self, 'account_labels'):
                return
                
            if self.mt5_connection and self.mt5_connection.is_connected:
                account_info = self.mt5_connection.get_account_info()
                if account_info:
                    self.account_labels['balance'].config(text=f"{account_info['balance']:.2f}")
                    self.account_labels['equity'].config(text=f"{account_info['equity']:.2f}")
                    self.account_labels['margin'].config(text=f"{account_info['margin']:.2f}")
                    self.account_labels['margin_free'].config(text=f"{account_info['margin_free']:.2f}")
                
                margin_level = account_info['margin_level']
                self.account_labels['margin_level'].config(text=f"{margin_level:.2f}%")
                
                # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏µ‡∏ï‡∏≤‡∏° Margin Level
                if margin_level < 100:
                    self.account_labels['margin_level'].config(fg='red')
                elif margin_level < 200:
                    self.account_labels['margin_level'].config(fg='orange')
                else:
                    self.account_labels['margin_level'].config(fg='green')
            else:
                # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• default ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ
                self.account_labels['balance'].config(text="0.00")
                self.account_labels['equity'].config(text="0.00")
                self.account_labels['margin'].config(text="0.00")
                self.account_labels['margin_free'].config(text="0.00")
                self.account_labels['margin_level'].config(text="0.00%")
        except Exception as e:
            logger.debug(f"Account info update error: {str(e)}")
    
    
    def update_trading_status_data(self):
        """‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î"""
        try:
            if not hasattr(self, 'trading_status_labels'):
                return
                
            if self.trading_system and hasattr(self.trading_system, 'order_manager'):
                positions = self.trading_system.order_manager.active_positions
                
                # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏à‡∏≥‡∏ô‡∏ß‡∏ô positions
                self.trading_status_labels['active_positions'].config(text=str(len(positions)))
                
                if positions:
                    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Total P&L ‡∏à‡∏≤‡∏Å positions ‡∏à‡∏£‡∏¥‡∏á
                    total_pnl = 0
                    profitable_count = 0
                    total_profit = 0
                    total_loss = 0
                    
                    for pos in positions:
                        profit = getattr(pos, 'profit', 0)
                        total_pnl += profit
                        if profit > 0:
                            profitable_count += 1
                            total_profit += profit
                        else:
                            total_loss += abs(profit)
                    
                    # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó Total P&L
                    self.trading_status_labels['total_pnl'].config(
                        text=f"{total_pnl:.2f}",
                        fg='#00ff88' if total_pnl >= 0 else '#ff4444'
                    )
                    
                    # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó Daily P&L (‡πÉ‡∏ä‡πâ Total P&L ‡πÄ‡∏õ‡πá‡∏ô‡∏ê‡∏≤‡∏ô)
                    self.trading_status_labels['daily_pnl'].config(
                        text=f"{total_pnl:.2f}",
                        fg='#00ff88' if total_pnl >= 0 else '#ff4444'
                    )
                    
                    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Win Rate
                    win_rate = (profitable_count / len(positions)) * 100 if positions else 0
                    self.trading_status_labels['win_rate'].config(
                        text=f"{win_rate:.1f}%",
                        fg='#00ff88' if win_rate >= 50 else '#ff4444'
                    )
                    
                    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Profit Factor
                    profit_factor = total_profit / total_loss if total_loss > 0 else (total_profit if total_profit > 0 else 0)
                    self.trading_status_labels['profit_factor'].config(
                        text=f"{profit_factor:.2f}",
                        fg='#00ff88' if profit_factor >= 1.0 else '#ff4444'
                    )
                else:
                    # ‡πÑ‡∏°‡πà‡∏°‡∏µ positions
                    self.trading_status_labels['total_pnl'].config(text="0.00", fg='#cccccc')
                    self.trading_status_labels['daily_pnl'].config(text="0.00", fg='#cccccc')
                    self.trading_status_labels['win_rate'].config(text="0%", fg='#cccccc')
                    self.trading_status_labels['profit_factor'].config(text="0.00", fg='#cccccc')
            else:
                # ‡πÑ‡∏°‡πà‡∏°‡∏µ trading system ‡∏´‡∏£‡∏∑‡∏≠ order manager
                self.trading_status_labels['active_positions'].config(text="0", fg='#cccccc')
                self.trading_status_labels['total_pnl'].config(text="0.00", fg='#cccccc')
                self.trading_status_labels['daily_pnl'].config(text="0.00", fg='#cccccc')
                self.trading_status_labels['win_rate'].config(text="0%", fg='#cccccc')
                self.trading_status_labels['profit_factor'].config(text="0.00", fg='#cccccc')
        except Exception as e:
            logger.debug(f"Trading status update error: {str(e)}")
    
    def update_7d_closer_status(self):
        """‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ 7D Smart Closer"""
        try:
            if (self.trading_system and 
                hasattr(self.trading_system, 'dynamic_7d_smart_closer') and 
                self.trading_system.dynamic_7d_smart_closer):
                
                positions = self.trading_system.order_manager.active_positions
                
                # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏à‡∏≥‡∏ô‡∏ß‡∏ô positions ‡∏ó‡∏µ‡πà‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå
                self.closer_status_labels['positions_analyzed'].config(text=str(len(positions)))
                
                if positions:
                    # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡πÄ‡∏ß‡∏•‡∏≤‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
                    current_time = datetime.now().strftime('%H:%M:%S')
                    self.closer_status_labels['last_analysis'].config(text=current_time)
                    
                    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ closer ‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢ (‡πÑ‡∏°‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏Å 7D analysis ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î load)
                    self.closer_status_labels['closer_status'].config(
                        text="üîÑ MONITORING",
                        fg='#ffaa00'
                    )
                    
                    # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
                    self.closer_status_labels['recommendation'].config(
                        text="MONITORING",
                        fg='#ffaa00'
                    )
                    self.closer_status_labels['closing_confidence'].config(
                        text="--",
                        fg='#ffaa00'
                    )
                else:
                    # ‡πÑ‡∏°‡πà‡∏°‡∏µ positions
                    self.closer_status_labels['closer_status'].config(
                        text="üí§ IDLE",
                        fg='#cccccc'
                    )
                    self.closer_status_labels['recommendation'].config(
                        text="NO POSITIONS",
                        fg='#cccccc'
                    )
                    self.closer_status_labels['closing_confidence'].config(
                        text="0%",
                        fg='#cccccc'
                    )
        except Exception as e:
            logger.debug(f"7D closer status update error: {str(e)}")
            
    def update_portfolio_info(self):
        """‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏≠‡∏£‡πå‡∏ï"""
        try:
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ positions ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏Å‡πà‡∏≠‡∏ô
            if not hasattr(self.portfolio_manager.order_manager, 'active_positions'):
                return
                
            # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏£‡∏∏‡∏õ‡∏û‡∏≠‡∏£‡πå‡∏ï (‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ error)
            try:
                portfolio_summary = self.portfolio_manager.get_portfolio_summary()
            except Exception as e:
                logger.debug(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏≠‡∏£‡πå‡∏ï‡πÑ‡∏î‡πâ: {str(e)}")
                return
            
            if portfolio_summary and 'error' not in portfolio_summary:
                # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Performance
                perf_metrics = portfolio_summary.get('performance_metrics', {})
                
                total_pnl_pct = portfolio_summary.get('total_profit_percentage', 0.0)
                self.performance_labels['total_pnl_pct'].config(text=f"{total_pnl_pct:.2f}%")
                self.performance_labels['total_pnl_pct'].config(
                    fg='green' if total_pnl_pct >= 0 else 'red'
                )
                
                daily_pnl_pct = perf_metrics.get('daily_pnl_percentage', 0.0)
                self.performance_labels['daily_pnl_pct'].config(text=f"{daily_pnl_pct:.2f}%")
                self.performance_labels['daily_pnl_pct'].config(
                    fg='green' if daily_pnl_pct >= 0 else 'red'
                )
                
                win_rate = perf_metrics.get('win_rate_percentage', 0.0)
                self.performance_labels['win_rate_pct'].config(text=f"{win_rate:.1f}%")
                
                max_dd = perf_metrics.get('max_drawdown_percentage', 0.0)
                self.performance_labels['max_drawdown_pct'].config(text=f"{max_dd:.2f}%")
                self.performance_labels['max_drawdown_pct'].config(
                    fg='red' if max_dd > 10 else 'orange' if max_dd > 5 else 'green'
                )
                
                profit_factor = perf_metrics.get('profit_factor', 0.0)
                self.performance_labels['profit_factor'].config(text=f"{profit_factor:.2f}")
                
                # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Balance
                positions = self.portfolio_manager.order_manager.active_positions
                if positions:
                    from calculations import PercentageCalculator
                    balance_ratio = PercentageCalculator.calculate_buy_sell_ratio(positions)
                    
                    buy_pct = balance_ratio['buy_percentage']
                    sell_pct = balance_ratio['sell_percentage']
                    
                    self.buy_ratio_label.config(text=f"Buy: {buy_pct:.1f}%")
                    self.sell_ratio_label.config(text=f"Sell: {sell_pct:.1f}%")
                    
                    self.buy_progress['value'] = buy_pct
                    self.sell_progress['value'] = sell_pct
                    
                    # ‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏°‡πà‡∏™‡∏°‡∏î‡∏∏‡∏•
                    if buy_pct >= 70 or sell_pct >= 70:
                        self.balance_warning.config(text="‚ö†Ô∏è Portfolio Imbalance Warning!", fg='orange')
                    elif buy_pct >= 80 or sell_pct >= 80:
                        self.balance_warning.config(text="üö® Critical Imbalance!", fg='red')
                    else:
                        self.balance_warning.config(text="‚úÖ Portfolio Balanced", fg='green')
                        
        except Exception as e:
            logger.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏≠‡∏£‡πå‡∏ï: {str(e)}")
            
    def update_positions_display(self):
        """‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á Positions"""
        try:
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ positions tree ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if not hasattr(self, 'positions_tree'):
                return
                
            # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• positions ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
            try:
                if self.trading_system and hasattr(self.trading_system, 'order_manager'):
                    positions = self.trading_system.order_manager.active_positions
                else:
                    positions = []
            except Exception as e:
                logger.debug(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• positions ‡πÑ‡∏î‡πâ: {str(e)}")
                return
                
            # ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤
            for item in self.positions_tree.get_children():
                self.positions_tree.delete(item)
                
            # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà
            if positions:
                for pos in positions:
                    try:
                        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Profit %
                        profit_pct = 0.0
                        if hasattr(pos, 'price_open') and pos.price_open != 0:
                            if hasattr(pos, 'price_current'):
                                if pos.type == 0:  # BUY
                                    profit_pct = ((pos.price_current - pos.price_open) / pos.price_open) * 100
                                else:  # SELL
                                    profit_pct = ((pos.price_open - pos.price_current) / pos.price_open) * 100
                        
                        # ‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏Ç‡∏≠‡∏á‡πÑ‡∏°‡πâ‡∏ô‡∏µ‡πâ
                        hedge_info = self._get_hedge_info(getattr(pos, 'ticket', 'N/A'), positions)
                        
                        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô Treeview
                        values = (
                            getattr(pos, 'ticket', 'N/A'),
                            getattr(pos, 'symbol', 'N/A'),
                            "BUY" if getattr(pos, 'type', 0) == 0 else "SELL",
                            f"{getattr(pos, 'volume', 0):.2f}",
                            f"{getattr(pos, 'price_open', 0):.5f}",
                            f"{getattr(pos, 'price_current', 0):.5f}",
                            f"{getattr(pos, 'profit', 0):.2f}",
                            f"{profit_pct:.2f}%",
                            f"{getattr(pos, 'swap', 0):.2f}",
                            getattr(pos, 'comment', ''),
                            hedge_info
                    )
                    
                        item = self.positions_tree.insert('', 'end', values=values)
                        
                        # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏µ‡∏ï‡∏≤‡∏°‡∏Å‡∏≥‡πÑ‡∏£‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô
                        profit = getattr(pos, 'profit', 0)
                        if profit > 0:
                            self.positions_tree.set(item, 'Profit', f"+{profit:.2f}")
                        elif profit < 0:
                            self.positions_tree.set(item, 'Profit', f"{profit:.2f}")
                            
                    except Exception as pos_error:
                        logger.debug(f"Error processing position: {str(pos_error)}")
                        continue
            else:
                # ‡πÑ‡∏°‡πà‡∏°‡∏µ positions - ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
                self.positions_tree.insert('', 'end', values=(
                    'No positions', '', '', '', '', '', '', '', '', '', ''
                ))
                    
        except Exception as e:
            logger.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó Positions: {str(e)}")
    
    def _analyze_hedge_pairs(self, positions):
        """‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡πÑ‡∏°‡πâ"""
        try:
            if not positions or len(positions) < 2:
                return []
            
            hedge_pairs = []
            
            # ‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢‡πÜ
            for i, pos1 in enumerate(positions):
                for j, pos2 in enumerate(positions[i+1:], i+1):
                    profit1 = getattr(pos1, 'profit', 0)
                    profit2 = getattr(pos2, 'profit', 0)
                    total_profit = profit1 + profit2
                    
                    # ‡∏ñ‡πâ‡∏≤‡∏ú‡∏•‡∏£‡∏ß‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏ö‡∏ß‡∏Å ‡πÉ‡∏´‡πâ‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà
                    if total_profit > 0.1:
                        hedge_pairs.append({
                            'position1': pos1,
                            'position2': pos2,
                            'total_profit': total_profit,
                            'tickets': [str(getattr(pos1, 'ticket', 'N/A')), str(getattr(pos2, 'ticket', 'N/A'))]
                        })
            
            return hedge_pairs
            
        except Exception as e:
            logger.error(f"Error analyzing hedge pairs: {e}")
            return []
    
    def _get_hedge_info(self, ticket, positions):
        """‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà Hedge ‡∏Ç‡∏≠‡∏á‡πÑ‡∏°‡πâ"""
        try:
            if not positions:
                return "No positions"
            
            # ‡∏´‡∏≤‡πÑ‡∏°‡πâ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö ticket
            current_pos = None
            for pos in positions:
                if getattr(pos, 'ticket', 'N/A') == ticket:
                    current_pos = pos
                    break
            
            if not current_pos:
                return "Position not found"
            
            current_type = getattr(current_pos, 'type', 0)
            current_profit = getattr(current_pos, 'profit', 0)
            
            # ‡∏´‡∏≤‡πÑ‡∏°‡πâ‡∏ï‡∏£‡∏á‡∏Ç‡πâ‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡πÑ‡∏î‡πâ
            hedge_pairs = []
            
            for pos in positions:
                if pos == current_pos:
                    continue
                
                other_type = getattr(pos, 'type', 0)
                other_profit = getattr(pos, 'profit', 0)
                other_ticket = getattr(pos, 'ticket', 'N/A')
                
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏°‡πâ‡∏ï‡∏£‡∏á‡∏Ç‡πâ‡∏≤‡∏°‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                if current_type != other_type:
                    # ‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà Hedge (‡πÑ‡∏°‡πà‡∏™‡∏ô‡πÉ‡∏à‡∏ú‡∏•‡∏£‡∏ß‡∏°)
                    if (current_type == 0 and current_profit < 0 and other_profit > 0) or \
                       (current_type == 1 and current_profit < 0 and other_profit > 0):
                        # Hedge Pair: ‡∏ï‡∏¥‡∏î‡∏•‡∏ö + ‡∏Å‡∏≥‡πÑ‡∏£
                        total_profit = current_profit + other_profit
                        hedge_pairs.append({
                            'ticket': other_ticket,
                            'profit': other_profit,
                            'total_profit': total_profit,
                            'type': 'HEDGE'
                        })
                    elif (current_type == 0 and current_profit > 0 and other_profit < 0) or \
                         (current_type == 1 and current_profit > 0 and other_profit < 0):
                        # Hedge Pair: ‡∏Å‡∏≥‡πÑ‡∏£ + ‡∏ï‡∏¥‡∏î‡∏•‡∏ö
                        total_profit = current_profit + other_profit
                        hedge_pairs.append({
                            'ticket': other_ticket,
                            'profit': other_profit,
                            'total_profit': total_profit,
                            'type': 'HEDGE'
                        })
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà
            if hedge_pairs:
                # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏ú‡∏•‡∏£‡∏ß‡∏°‡∏Å‡∏≥‡πÑ‡∏£ (‡∏°‡∏≤‡∏Å‡∏™‡∏∏‡∏î‡∏Å‡πà‡∏≠‡∏ô)
                hedge_pairs.sort(key=lambda x: x['total_profit'], reverse=True)
                
                best_pair = hedge_pairs[0]
                pair_ticket = best_pair['ticket']
                total_profit = best_pair['total_profit']
                
                if total_profit >= 0.1:
                    return f"üîó Hedge: {pair_ticket} (+${total_profit:.2f})"
                elif total_profit >= -0.1:
                    return f"üîó Hedge: {pair_ticket} (${total_profit:.2f})"
                else:
                    return f"üîó Hedge: {pair_ticket} (${total_profit:.2f})"
            else:
                # ‡∏´‡∏≤‡πÑ‡∏°‡πâ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡πÑ‡∏£‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏°‡∏µ Hedge
                additional_positions = []
                for pos in positions:
                    if pos == current_pos:
                        continue
                    
                    other_profit = getattr(pos, 'profit', 0)
                    other_ticket = getattr(pos, 'ticket', 'N/A')
                    
                    if other_profit > 0:
                        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πâ‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏°‡∏µ Hedge ‡∏Å‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏≠‡∏∑‡πà‡∏ô
                        has_hedge = False
                        for other_pos in positions:
                            if other_pos == pos or other_pos == current_pos:
                                continue
                            
                            other_type = getattr(other_pos, 'type', 0)
                            other_profit2 = getattr(other_pos, 'profit', 0)
                            
                            if getattr(pos, 'type', 0) != other_type and other_profit2 > 0:
                                has_hedge = True
                                break
                        
                        if not has_hedge:
                            additional_positions.append({
                                'ticket': other_ticket,
                                'profit': other_profit
                            })
                
                if additional_positions:
                    # ‡πÅ‡∏™‡∏î‡∏á‡πÑ‡∏°‡πâ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡πÑ‡∏£
                    additional_tickets = [str(p['ticket']) for p in additional_positions[:2]]  # ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏Ñ‡πà 2 ‡∏ï‡∏±‡∏ß
                    return f"‚ûï Additional: {', '.join(additional_tickets)}"
                else:
                    return "üí§ No hedge pair"
            
        except Exception as e:
            logger.error(f"Error getting hedge info: {e}")
            return "Error"
    
    def analyze_hedge_pairs(self):
        """‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡πÑ‡∏°‡πâ"""
        try:
            if not self.trading_system or not hasattr(self.trading_system, 'order_manager'):
                messagebox.showwarning("Warning", "Trading system not available")
                return
            
            positions = self.trading_system.order_manager.active_positions
            if not positions:
                messagebox.showinfo("Info", "No positions to analyze")
                return
            
            # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà
            hedge_pairs = self._analyze_hedge_pairs(positions)
            
            if hedge_pairs:
                message = f"Found {len(hedge_pairs)} hedge pairs:\n\n"
                for i, pair in enumerate(hedge_pairs[:5]):  # ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏Ñ‡πà 5 ‡∏Ñ‡∏π‡πà‡πÅ‡∏£‡∏Å
                    ticket1 = pair['tickets'][0]
                    ticket2 = pair['tickets'][1]
                    profit = pair['total_profit']
                    message += f"Pair {i+1}: {ticket1} + {ticket2} = +${profit:.2f}\n"
                
                if len(hedge_pairs) > 5:
                    message += f"\n... and {len(hedge_pairs) - 5} more pairs"
                
                messagebox.showinfo("Hedge Analysis", message)
                self.hedge_status_label.config(text=f"‚úÖ Found {len(hedge_pairs)} pairs")
            else:
                messagebox.showinfo("Hedge Analysis", "No profitable hedge pairs found")
                self.hedge_status_label.config(text="‚ùå No pairs found")
                
        except Exception as e:
            logger.error(f"Error in hedge analysis: {e}")
            messagebox.showerror("Error", f"Error analyzing hedge pairs: {e}")
    
    def refresh_hedge_pairs(self):
        """‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡πÑ‡∏°‡πâ"""
        try:
            self.update_positions_display()
            if hasattr(self, 'hedge_status_label'):
                self.hedge_status_label.config(text="üîÑ Refreshed", fg='#00ff88')
        except Exception as e:
            logger.error(f"Error refreshing hedge pairs: {e}")
            if hasattr(self, 'hedge_status_label'):
                self.hedge_status_label.config(text="‚ùå Error", fg='#ff4444')
    
    def update_hedge_status(self):
        """‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà Hedge"""
        try:
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ hedge_status_label ‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if not hasattr(self, 'hedge_status_label'):
                logger.debug("hedge_status_label not yet created, skipping update")
                return
                
            if not self.trading_system or not hasattr(self.trading_system, 'order_manager'):
                self.hedge_status_label.config(text="‚ùå No trading system", fg='#ff4444')
                return
            
            positions = self.trading_system.order_manager.active_positions
            if not positions:
                self.hedge_status_label.config(text="üí§ No positions", fg='#cccccc')
                return
            
            # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà Hedge
            hedge_pairs = self._analyze_hedge_pairs(positions)
            
            if hedge_pairs:
                # ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Hedge Pairs
                hedge_count = len(hedge_pairs)
                total_profit = sum(pair['total_profit'] for pair in hedge_pairs)
                
                # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
                if total_profit >= 0.1:
                    status_text = f"‚úÖ {hedge_count} Hedge Pairs (+${total_profit:.2f})"
                    status_color = '#00ff88'
                elif total_profit >= -0.1:
                    status_text = f"‚ö†Ô∏è {hedge_count} Hedge Pairs (${total_profit:.2f})"
                    status_color = '#ffaa00'
                else:
                    status_text = f"‚ùå {hedge_count} Hedge Pairs (${total_profit:.2f})"
                    status_color = '#ff4444'
                
                self.hedge_status_label.config(text=status_text, fg=status_color)
                
                # ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÉ‡∏ô log
                logger.info(f"üîç Hedge Status: {hedge_count} pairs, Total P&L: ${total_profit:.2f}")
                for i, pair in enumerate(hedge_pairs[:3]):  # ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏Ñ‡πà 3 ‡∏Ñ‡∏π‡πà‡πÅ‡∏£‡∏Å
                    ticket1, ticket2 = pair['tickets']
                    profit = pair['total_profit']
                    logger.info(f"   Pair {i+1}: {ticket1} + {ticket2} = ${profit:.2f}")
                
            else:
                self.hedge_status_label.config(text="üí§ No hedge pairs found", fg='#cccccc')
                logger.info("üîç No hedge pairs found")
            
        except Exception as e:
            logger.error(f"Error updating hedge status: {e}")
            self.hedge_status_label.config(text="‚ùå Error", fg='#ff4444')
            
    # Event handlers
    def connect_mt5(self):
        """‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MT5"""
        try:
            success = self.mt5_connection.connect_mt5()
            if success:
                logger.info("‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MT5 ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                messagebox.showinfo("Success", "‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MT5 ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó GUI ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
                self.root.after(100, self.update_connection_status_light)
            else:
                logger.error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MT5 ‡πÑ‡∏î‡πâ")
                messagebox.showerror("Error", "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MT5 ‡πÑ‡∏î‡πâ")
        except Exception as e:
            logger.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MT5: {str(e)}")
            messagebox.showerror("Error", f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}")
            
    def disconnect_mt5(self):
        """‡∏ï‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MT5"""
        try:
            self.mt5_connection.disconnect_mt5()
            logger.info("‡∏ï‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MT5 ‡πÅ‡∏•‡πâ‡∏ß")
        except Exception as e:
            logger.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MT5: {str(e)}")
            
    def start_trading(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î"""
        try:
            if not self.mt5_connection.is_connected:
                messagebox.showerror("Error", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MT5 ‡∏Å‡πà‡∏≠‡∏ô")
                return
                
            # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡∏ú‡πà‡∏≤‡∏ô TradingSystem (‡πÉ‡∏ô background thread)
            def start_trading_async():
                try:
                    success = self.trading_system.start_trading()
                    if success:
                        # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó GUI ‡πÉ‡∏ô main thread
                        self.root.after(0, lambda: self.update_trading_status(True))
                        logger.info("‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡∏à‡∏≤‡∏Å GUI ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                except Exception as e:
                    logger.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏ó‡∏£‡∏î: {str(e)}")
                    self.root.after(0, lambda: messagebox.showerror("Error", f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}"))
            
            # ‡∏£‡∏±‡∏ô start_trading ‡πÉ‡∏ô background thread
            threading.Thread(target=start_trading_async, daemon=True).start()
            
            # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó GUI ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ (‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ "Starting...")
            self.trading_status.config(text="Starting...", fg='orange')
            
        except Exception as e:
            logger.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏ó‡∏£‡∏î: {str(e)}")
            messagebox.showerror("Error", f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}")
            
    def update_trading_status(self, is_running):
        """‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î"""
        try:
            if is_running:
                self.is_trading = True
                self.trading_status.config(text="Running", fg='green')
            else:
                self.is_trading = False
                self.trading_status.config(text="Stopped", fg='red')
        except Exception as e:
            logger.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: {str(e)}")
    
    def stop_trading(self):
        """‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î"""
        try:
            # ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡∏ú‡πà‡∏≤‡∏ô TradingSystem (‡πÉ‡∏ô background thread)
            def stop_trading_async():
                try:
                    self.trading_system.stop_trading()
                    # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó GUI ‡πÉ‡∏ô main thread
                    self.root.after(0, lambda: self.update_trading_status(False))
                    logger.info("‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡∏à‡∏≤‡∏Å GUI ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                except Exception as e:
                    logger.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏ó‡∏£‡∏î: {str(e)}")
                    self.root.after(0, lambda: messagebox.showerror("Error", f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}"))
            
            # ‡∏£‡∏±‡∏ô stop_trading ‡πÉ‡∏ô background thread
            threading.Thread(target=stop_trading_async, daemon=True).start()
            
            # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó GUI ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ (‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ "Stopping...")
            self.trading_status.config(text="Stopping...", fg='orange')
            
        except Exception as e:
            logger.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏ó‡∏£‡∏î: {str(e)}")
            messagebox.showerror("Error", f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}")
            
    def close_all_positions(self):
        """‡∏õ‡∏¥‡∏î Position ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î - üö´ DISABLED: ‡πÉ‡∏ä‡πâ Edge Priority Closing ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô"""
        try:
            messagebox.showwarning("üö´ ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô!", 
                                 "‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ñ‡∏π‡∏Å‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß!\n"
                                 "‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏ä‡πâ Edge Priority Closing ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô\n"
                                 "‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡∏¥‡∏î‡πÑ‡∏°‡πâ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥")
            logger.warning("üö´ close_all_positions disabled - Using Edge Priority Closing only")
        except Exception as e:
            logger.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°: {str(e)}")
            messagebox.showerror("Error", f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}")
            
    def close_selected_position(self):
        """‡∏õ‡∏¥‡∏î Position ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å"""
        # Implementation for closing selected position
        pass
        
    def close_profitable_positions(self):
        """‡∏õ‡∏¥‡∏î Position ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡πÑ‡∏£"""
        # Implementation for closing profitable positions
        pass
        
    def close_losing_positions(self):
        """‡∏õ‡∏¥‡∏î Position ‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô"""
        # Implementation for closing losing positions
        pass
        
    def scale_close(self, scaling_type):
        """‡∏õ‡∏¥‡∏î Position ‡πÅ‡∏ö‡∏ö Scaling"""
        # Implementation for scaling close
        pass
        
    def save_settings(self):
        """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤"""
        try:
            # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô portfolio manager
            pm = self.portfolio_manager
            
            pm.max_risk_per_trade = self.risk_settings['max_risk_per_trade'].get()
            pm.max_portfolio_exposure = self.risk_settings['max_portfolio_exposure'].get()
            pm.max_daily_loss = self.risk_settings['max_daily_loss'].get()
            pm.profit_target = self.risk_settings['profit_target'].get()
            pm.max_drawdown_limit = self.risk_settings['max_drawdown_limit'].get()
            
            pm.balance_warning_threshold = self.balance_settings['balance_warning_threshold'].get()
            pm.balance_stop_threshold = self.balance_settings['balance_stop_threshold'].get()
            
            logger.info("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
            messagebox.showinfo("Success", "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
            
        except Exception as e:
            logger.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤: {str(e)}")
            messagebox.showerror("Error", f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}")
    
    # üß† AI Intelligence Functions
    def save_ai_brains(self):
        """üß† ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å AI Brains"""
        try:
            if hasattr(self.trading_system, '_save_ai_brains'):
                self.trading_system._save_ai_brains()
                messagebox.showinfo("Success", "üß† AI Brains saved successfully!")
            else:
                messagebox.showwarning("Warning", "AI Brain saving not available")
        except Exception as e:
            logger.error(f"Error saving AI brains: {e}")
            messagebox.showerror("Error", f"Failed to save AI brains: {str(e)}")
    
    def load_ai_brains(self):
        """üß† ‡πÇ‡∏´‡∏•‡∏î AI Brains"""
        try:
            if hasattr(self.trading_system, '_load_ai_brains'):
                self.trading_system._load_ai_brains()
                self.update_ai_intelligence_display()
                messagebox.showinfo("Success", "üß† AI Brains loaded successfully!")
            else:
                messagebox.showwarning("Warning", "AI Brain loading not available")
        except Exception as e:
            logger.error(f"Error loading AI brains: {e}")
            messagebox.showerror("Error", f"Failed to load AI brains: {str(e)}")
    
    def reset_ai_brains(self):
        """üß† ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï AI Brains"""
        try:
            result = messagebox.askyesno("Confirm Reset", 
                                       "Are you sure you want to reset all AI Brains?\n"
                                       "This will delete all learning data!")
            if result:
                # Reset AI systems
                if hasattr(self.trading_system, 'ai_position_intelligence'):
                    self.trading_system.ai_position_intelligence.reset_ai_brain()
                if hasattr(self.trading_system, 'ai_entry_intelligence'):
                    self.trading_system.ai_entry_intelligence.reset_ai_brain()
                if hasattr(self.trading_system, 'ai_decision_engine'):
                    self.trading_system.ai_decision_engine.reset_all_ai_brains()
                
                self.update_ai_intelligence_display()
                messagebox.showinfo("Success", "üß† AI Brains reset successfully!")
        except Exception as e:
            logger.error(f"Error resetting AI brains: {e}")
            messagebox.showerror("Error", f"Failed to reset AI brains: {str(e)}")
    
    def start_ai_learning(self):
        """üß† ‡πÄ‡∏£‡∏¥‡πà‡∏° AI Learning"""
        try:
            if hasattr(self.trading_system, 'ai_learning_system'):
                self.trading_system.ai_learning_system.start_learning()
                self.ai_status_label.config(text="AI Status: Learning Active", fg='#00ff88')
                messagebox.showinfo("Success", "üß† AI Learning started!")
            else:
                messagebox.showwarning("Warning", "AI Learning system not available")
        except Exception as e:
            logger.error(f"Error starting AI learning: {e}")
            messagebox.showerror("Error", f"Failed to start AI learning: {str(e)}")
    
    def stop_ai_learning(self):
        """üß† ‡∏´‡∏¢‡∏∏‡∏î AI Learning"""
        try:
            if hasattr(self.trading_system, 'ai_learning_system'):
                self.trading_system.ai_learning_system.stop_learning()
                self.ai_status_label.config(text="AI Status: Learning Stopped", fg='#ff9800')
                messagebox.showinfo("Success", "üß† AI Learning stopped!")
            else:
                messagebox.showwarning("Warning", "AI Learning system not available")
        except Exception as e:
            logger.error(f"Error stopping AI learning: {e}")
            messagebox.showerror("Error", f"Failed to stop AI learning: {str(e)}")
    
    def update_ai_intelligence_display(self):
        """üß† ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• AI Intelligence"""
        try:
            if not hasattr(self.trading_system, 'get_ai_stats'):
                return
            
            ai_stats = self.trading_system.get_ai_stats()
            if not ai_stats:
                return
            
            # Update Position Intelligence
            if 'position_intelligence' in ai_stats:
                pos_stats = ai_stats['position_intelligence']
                for key, label in self.ai_position_stats_labels.items():
                    if key in pos_stats:
                        value = pos_stats[key]
                        if isinstance(value, float):
                            label.config(text=f"{value:.2f}")
                        else:
                            label.config(text=str(value))
            
            # Update Entry Intelligence
            if 'entry_intelligence' in ai_stats:
                entry_stats = ai_stats['entry_intelligence']
                for key, label in self.ai_entry_stats_labels.items():
                    if key in entry_stats:
                        value = entry_stats[key]
                        if isinstance(value, float):
                            label.config(text=f"{value:.2f}")
                        else:
                            label.config(text=str(value))
            
            # Update Learning System
            if 'learning_system' in ai_stats:
                learning_stats = ai_stats['learning_system']
                for key, label in self.ai_learning_stats_labels.items():
                    if key in learning_stats:
                        value = learning_stats[key]
                        if isinstance(value, float):
                            label.config(text=f"{value:.2f}")
                        else:
                            label.config(text=str(value))
            
            # Update Decision Engine
            if 'combined_stats' in ai_stats:
                decision_stats = ai_stats['combined_stats']
                for key, label in self.ai_decision_stats_labels.items():
                    if key in decision_stats:
                        value = decision_stats[key]
                        if isinstance(value, float):
                            label.config(text=f"{value:.2f}")
                        else:
                            label.config(text=str(value))
            
            # Update AI Status
            if 'ai_status' in ai_stats:
                status = ai_stats['ai_status']
                self.ai_status_label.config(text=f"AI Status: {status}", fg='#00ff88')
                
        except Exception as e:
            logger.error(f"Error updating AI intelligence display: {e}")
            
    def run(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô GUI"""
        try:
            logger.info("‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Trading System GUI")
            self.root.protocol("WM_DELETE_WINDOW", self.on_closing)
            self.root.mainloop()
        except Exception as e:
            logger.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô GUI: {str(e)}")
            
    def on_closing(self):
        """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏õ‡∏¥‡∏î GUI"""
        try:
            logger.info("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏¥‡∏î GUI...")
            
            # ‡∏´‡∏¢‡∏∏‡∏î update thread
            self.stop_update = True
            
            # ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡∏Å‡πà‡∏≠‡∏ô
            if hasattr(self, 'trading_system') and self.trading_system.is_running:
                self.trading_system.stop_trading()
            
            # ‡∏£‡∏≠ update thread ‡πÉ‡∏´‡πâ‡∏´‡∏¢‡∏∏‡∏î
            if self.update_thread and self.update_thread.is_alive():
                self.update_thread.join(timeout=2)  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏≠
                
            # ‡∏ï‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MT5
            try:
                self.mt5_connection.disconnect_mt5()
            except:
                pass  # ‡πÑ‡∏°‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ñ‡πâ‡∏≤ disconnect ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ
                
            logger.info("‡∏õ‡∏¥‡∏î Trading System ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
            self.root.quit()  # ‡πÉ‡∏ä‡πâ quit ‡πÅ‡∏ó‡∏ô destroy
            
        except Exception as e:
            logger.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î GUI: {str(e)}")
            try:
                self.root.quit()
            except:
                pass

    def alert(self, message, level='info'):
        """‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô"""
        try:
            if level == 'info':
                messagebox.showinfo("Info", message)
            elif level == 'warning':
                messagebox.showwarning("Warning", message)
            elif level == 'error':
                messagebox.showerror("Error", message)
            else:
                messagebox.showinfo("Info", message)
        except Exception as e:
            logger.error(f"Error showing alert: {e}")
