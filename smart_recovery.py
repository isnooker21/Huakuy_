# -*- coding: utf-8 -*-
"""
Smart Recovery System
‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡∏¥‡∏î Position ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ä‡∏≤‡∏ç‡∏â‡∏•‡∏≤‡∏î ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ü‡∏∑‡πâ‡∏ô‡∏ü‡∏π‡∏û‡∏≠‡∏£‡πå‡∏ï‡πÅ‡∏•‡∏∞‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏Å‡∏≥‡πÑ‡∏£‡∏£‡∏ß‡∏°
"""

import logging
import MetaTrader5 as mt5
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Tuple, Any
from dataclasses import dataclass
from calculations import Position

logger = logging.getLogger(__name__)

@dataclass
class RecoveryCandidate:
    """‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î‡πÅ‡∏ö‡∏ö Recovery"""
    profit_position: Position
    losing_position: Position
    net_profit: float
    recovery_score: float
    spread_cost: float
    margin_freed: float
    reason: str

class SmartRecoverySystem:
    """‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡∏¥‡∏î Position ‡πÅ‡∏ö‡∏ö Smart Recovery"""
    
    def __init__(self, mt5_connection):
        self.mt5 = mt5_connection
        self.minimum_position_age = 300  # 5 ‡∏ô‡∏≤‡∏ó‡∏µ (‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)
        self.minimum_distance_pips = 10  # 10 pips
        self.minimum_net_profit = 1.0    # $1 ‡∏Å‡∏≥‡πÑ‡∏£‡∏™‡∏∏‡∏ó‡∏ò‡∏¥‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥
        
    def analyze_recovery_opportunities(self, positions: List[Position], 
                                     account_balance: float,
                                     current_price: float) -> List[RecoveryCandidate]:
        """‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥ Recovery"""
        try:
            if not positions or len(positions) < 2:
                return []
            
            # ‡πÅ‡∏¢‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó positions
            profitable_positions = [pos for pos in positions if pos.profit > 0]
            losing_positions = [pos for pos in positions if pos.profit < 0]
            
            if not profitable_positions or not losing_positions:
                logger.info("üí° ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™ Recovery - ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏ó‡∏±‡πâ‡∏á‡πÑ‡∏°‡πâ‡∏Å‡∏≥‡πÑ‡∏£‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πâ‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô")
                return []
            
            # ‡∏Å‡∏£‡∏≠‡∏á‡πÑ‡∏°‡πâ‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
            suitable_losing = self._filter_suitable_losing_positions(
                losing_positions, current_price
            )
            
            if not suitable_losing:
                logger.info("üí° ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏°‡πâ‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Recovery")
                return []
            
            # ‡∏´‡∏≤‡∏Ñ‡∏π‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
            candidates = []
            
            for losing_pos in suitable_losing:
                for profit_pos in profitable_positions:
                    candidate = self._evaluate_recovery_pair(
                        profit_pos, losing_pos, account_balance, current_price
                    )
                    
                    if candidate and candidate.net_profit > self.minimum_net_profit:
                        candidates.append(candidate)
            
            # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏° recovery score
            candidates.sort(key=lambda x: x.recovery_score, reverse=True)
            
            logger.info(f"üéØ ‡∏û‡∏ö‡πÇ‡∏≠‡∏Å‡∏≤‡∏™ Recovery: {len(candidates)} ‡∏Ñ‡∏π‡πà")
            for i, candidate in enumerate(candidates[:3]):  # ‡πÅ‡∏™‡∏î‡∏á top 3
                logger.info(f"   {i+1}. Profit: ${candidate.net_profit:.2f}, "
                          f"Score: {candidate.recovery_score:.1f} - {candidate.reason}")
            
            return candidates
            
        except Exception as e:
            logger.error(f"Error analyzing recovery opportunities: {e}")
            return []
    
    def _filter_suitable_losing_positions(self, losing_positions: List[Position], 
                                        current_price: float) -> List[Position]:
        """‡∏Å‡∏£‡∏≠‡∏á‡πÑ‡∏°‡πâ‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Recovery"""
        suitable = []
        current_time = datetime.now()
        
        for pos in losing_positions:
            # ‡πÄ‡∏ä‡πá‡∏Ñ‡∏≠‡∏≤‡∏¢‡∏∏‡∏Ç‡∏≠‡∏á position
            if pos.time_open:
                try:
                    if hasattr(pos.time_open, 'timestamp'):
                        pos_time = datetime.fromtimestamp(pos.time_open.timestamp())
                    else:
                        pos_time = datetime.fromtimestamp(pos.time_open)
                    
                    age_seconds = (current_time - pos_time).total_seconds()
                    
                    if age_seconds < self.minimum_position_age:
                        logger.debug(f"Position {pos.ticket} ‡∏≠‡∏≤‡∏¢‡∏∏‡∏ô‡πâ‡∏≠‡∏¢‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ ({age_seconds:.0f}s)")
                        continue
                except Exception as e:
                    logger.warning(f"Cannot determine age of position {pos.ticket}: {e}")
                    continue
            
            # ‡πÄ‡∏ä‡πá‡∏Ñ‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
            distance = abs(pos.price_open - current_price)
            min_distance = current_price * (self.minimum_distance_pips / 10000)  # Convert pips to price
            
            if distance < min_distance:
                logger.debug(f"Position {pos.ticket} ‡πÉ‡∏Å‡∏•‡πâ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ")
                continue
            
            # ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡πÑ‡∏°‡πà‡∏°‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ (‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 50% ‡∏Ç‡∏≠‡∏á balance)
            if abs(pos.profit) > account_balance * 0.5:
                logger.debug(f"Position {pos.ticket} ‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡∏°‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ")
                continue
            
            suitable.append(pos)
        
        return suitable
    
    def _evaluate_recovery_pair(self, profit_pos: Position, losing_pos: Position,
                               account_balance: float, current_price: float) -> Optional[RecoveryCandidate]:
        """‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏π‡πà position ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Recovery"""
        try:
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì spread cost
            spread_cost = self._calculate_spread_cost(profit_pos, losing_pos)
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Å‡∏≥‡πÑ‡∏£‡∏™‡∏∏‡∏ó‡∏ò‡∏¥
            gross_profit = profit_pos.profit + losing_pos.profit
            net_profit = gross_profit - spread_cost
            
            if net_profit <= 0:
                return None
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì margin ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏Ñ‡∏∑‡∏ô
            margin_freed = self._calculate_margin_freed(profit_pos, losing_pos, current_price)
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì recovery score
            recovery_score = self._calculate_recovery_score(
                profit_pos, losing_pos, account_balance, current_price, margin_freed
            )
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•
            reason = self._generate_recovery_reason(profit_pos, losing_pos, net_profit, recovery_score)
            
            return RecoveryCandidate(
                profit_position=profit_pos,
                losing_position=losing_pos,
                net_profit=net_profit,
                recovery_score=recovery_score,
                spread_cost=spread_cost,
                margin_freed=margin_freed,
                reason=reason
            )
            
        except Exception as e:
            logger.error(f"Error evaluating recovery pair: {e}")
            return None
    
    def _calculate_spread_cost(self, profit_pos: Position, losing_pos: Position) -> float:
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤ spread ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏™‡∏µ‡∏¢‡πÑ‡∏õ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏õ‡∏¥‡∏î"""
        try:
            # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• spread ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
            symbol_info = mt5.symbol_info(profit_pos.symbol)
            if not symbol_info:
                return 5.0  # Default spread cost
            
            current_tick = mt5.symbol_info_tick(profit_pos.symbol)
            if not current_tick:
                return 5.0
            
            spread_points = current_tick.ask - current_tick.bid
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤ spread ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö 2 positions
            if 'XAU' in profit_pos.symbol.upper():
                spread_cost_per_lot = spread_points * 100  # XAUUSD
            else:
                spread_cost_per_lot = spread_points * 100000  # Forex
            
            total_spread_cost = (spread_cost_per_lot * profit_pos.volume + 
                               spread_cost_per_lot * abs(losing_pos.volume))
            
            return total_spread_cost
            
        except Exception as e:
            logger.error(f"Error calculating spread cost: {e}")
            return 5.0
    
    def _calculate_margin_freed(self, profit_pos: Position, losing_pos: Position, 
                               current_price: float) -> float:
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì margin ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏Ñ‡∏∑‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏õ‡∏¥‡∏î positions"""
        try:
            # ‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏Å‡∏≤‡∏£ margin requirement
            if 'XAU' in profit_pos.symbol.upper():
                margin_per_lot = current_price * 100 * 0.02  # 2% margin for XAUUSD
            else:
                margin_per_lot = 100000 * 0.01  # 1% margin for Forex
            
            total_margin = (margin_per_lot * profit_pos.volume + 
                          margin_per_lot * abs(losing_pos.volume))
            
            return total_margin
            
        except Exception:
            return 0.0
    
    def _calculate_recovery_score(self, profit_pos: Position, losing_pos: Position,
                                 account_balance: float, current_price: float,
                                 margin_freed: float) -> float:
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô Recovery"""
        try:
            score = 0.0
            
            # 1. Distance Score (30%) - ‡πÑ‡∏°‡πâ‡∏ó‡∏µ‡πà‡∏´‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÑ‡∏î‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏π‡∏á
            losing_distance = abs(losing_pos.price_open - current_price)
            distance_score = min(losing_distance / current_price * 1000, 30.0)
            score += distance_score
            
            # 2. Loss Amount Score (25%) - ‡πÑ‡∏°‡πâ‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡∏°‡∏≤‡∏Å‡πÑ‡∏î‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏π‡∏á
            loss_amount = abs(losing_pos.profit)
            loss_score = min(loss_amount / account_balance * 500, 25.0)
            score += loss_score
            
            # 3. Age Score (20%) - ‡πÑ‡∏°‡πâ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πà‡∏≤‡∏Å‡∏ß‡πà‡∏≤‡πÑ‡∏î‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏π‡∏á
            try:
                current_time = datetime.now()
                if hasattr(losing_pos.time_open, 'timestamp'):
                    pos_time = datetime.fromtimestamp(losing_pos.time_open.timestamp())
                else:
                    pos_time = datetime.fromtimestamp(losing_pos.time_open)
                
                age_hours = (current_time - pos_time).total_seconds() / 3600
                age_score = min(age_hours / 24 * 20, 20.0)  # Max 20 points for 24+ hours
                score += age_score
            except Exception:
                score += 5.0  # Default age score
            
            # 4. Margin Impact Score (15%) - ‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô margin
            margin_score = min(margin_freed / account_balance * 300, 15.0)
            score += margin_score
            
            # 5. Portfolio Health Score (10%) - ‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡∏ï‡πà‡∏≠‡∏û‡∏≠‡∏£‡πå‡∏ï
            portfolio_impact = (loss_amount / account_balance) * 100
            if portfolio_impact > 10:  # ‡∏ñ‡πâ‡∏≤‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô 10% ‡∏Ç‡∏≠‡∏á balance
                score += 10.0
            elif portfolio_impact > 5:
                score += 5.0
            
            return score
            
        except Exception as e:
            logger.error(f"Error calculating recovery score: {e}")
            return 0.0
    
    def _generate_recovery_reason(self, profit_pos: Position, losing_pos: Position,
                                 net_profit: float, recovery_score: float) -> str:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£ Recovery"""
        try:
            reasons = []
            
            # ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏´‡∏•‡∏±‡∏Å
            if recovery_score > 80:
                reasons.append("High priority recovery")
            elif recovery_score > 60:
                reasons.append("Good recovery opportunity")
            else:
                reasons.append("Moderate recovery")
            
            # ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
            if abs(losing_pos.profit) > 20:
                reasons.append(f"Remove ${abs(losing_pos.profit):.0f} loss")
            
            if net_profit > 10:
                reasons.append(f"Net profit ${net_profit:.0f}")
            
            return " | ".join(reasons)
            
        except Exception:
            return "Portfolio recovery"
    
    def execute_recovery(self, candidate: RecoveryCandidate) -> Dict[str, Any]:
        """‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£ Recovery"""
        try:
            logger.info(f"üéØ ‡πÄ‡∏£‡∏¥‡πà‡∏° Smart Recovery:")
            logger.info(f"   Profit Position: {candidate.profit_position.ticket} (+${candidate.profit_position.profit:.2f})")
            logger.info(f"   Losing Position: {candidate.losing_position.ticket} (${candidate.losing_position.profit:.2f})")
            logger.info(f"   Net Profit: ${candidate.net_profit:.2f}")
            logger.info(f"   Reason: {candidate.reason}")
            
            # ‡∏õ‡∏¥‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á positions
            tickets = [candidate.profit_position.ticket, candidate.losing_position.ticket]
            result = self.mt5.close_positions_group_with_spread_check(tickets)
            
            if result['success'] and len(result['closed_tickets']) == 2:
                logger.info(f"‚úÖ Smart Recovery ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
                logger.info(f"   ‡∏õ‡∏¥‡∏î Positions: {result['closed_tickets']}")
                logger.info(f"   ‡∏Å‡∏≥‡πÑ‡∏£‡∏™‡∏∏‡∏ó‡∏ò‡∏¥: ${result['total_profit']:.2f}")
                logger.info(f"   Margin Freed: ${candidate.margin_freed:.2f}")
                
                return {
                    'success': True,
                    'closed_tickets': result['closed_tickets'],
                    'net_profit': result['total_profit'],
                    'margin_freed': candidate.margin_freed,
                    'message': f"Recovery successful - Net profit ${result['total_profit']:.2f}"
                }
            else:
                # ‡∏ö‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡∏õ‡∏¥‡∏î‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ
                partial_success = len(result['closed_tickets']) > 0
                
                logger.warning(f"‚ö†Ô∏è Smart Recovery ‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô:")
                logger.warning(f"   ‡∏õ‡∏¥‡∏î‡πÑ‡∏î‡πâ: {result['closed_tickets']}")
                logger.warning(f"   ‡∏£‡∏≠‡∏Å‡∏≥‡πÑ‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°: {len(result.get('rejected_tickets', []))}")
                logger.warning(f"   ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {result.get('failed_tickets', [])}")
                
                return {
                    'success': partial_success,
                    'closed_tickets': result['closed_tickets'],
                    'rejected_tickets': result.get('rejected_tickets', []),
                    'failed_tickets': result.get('failed_tickets', []),
                    'net_profit': result['total_profit'],
                    'message': result['message']
                }
                
        except Exception as e:
            logger.error(f"Error executing recovery: {e}")
            return {
                'success': False,
                'error': str(e),
                'message': f"Recovery failed: {str(e)}"
            }
    
    def should_trigger_recovery(self, positions: List[Position], 
                               account_balance: float, 
                               current_equity: float) -> bool:
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡∏ß‡∏£ trigger Recovery ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"""
        try:
            if not positions or len(positions) < 2:
                return False
            
            # ‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç trigger
            conditions_met = 0
            total_conditions = 5
            
            # 1. ‡∏°‡∏µ positions ‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô
            losing_positions = [pos for pos in positions if pos.profit < 0]
            if losing_positions:
                conditions_met += 1
                logger.debug("‚úÖ ‡∏°‡∏µ positions ‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô")
            
            # 2. Equity ‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤ Balance ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 5%
            equity_ratio = current_equity / account_balance
            if equity_ratio < 0.95:
                conditions_met += 1
                logger.debug(f"‚úÖ Equity ratio ‡∏ï‡πà‡∏≥: {equity_ratio:.3f}")
            
            # 3. ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡∏£‡∏ß‡∏°‡πÄ‡∏Å‡∏¥‡∏ô 2% ‡∏Ç‡∏≠‡∏á balance
            total_loss = sum([abs(pos.profit) for pos in losing_positions])
            if total_loss > account_balance * 0.02:
                conditions_met += 1
                logger.debug(f"‚úÖ ‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡∏£‡∏ß‡∏°‡∏™‡∏π‡∏á: ${total_loss:.2f}")
            
            # 4. ‡∏°‡∏µ positions ‡∏≠‡∏≤‡∏¢‡∏∏‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 10 ‡∏ô‡∏≤‡∏ó‡∏µ
            old_positions = []
            current_time = datetime.now()
            for pos in losing_positions:
                try:
                    if hasattr(pos.time_open, 'timestamp'):
                        pos_time = datetime.fromtimestamp(pos.time_open.timestamp())
                    else:
                        pos_time = datetime.fromtimestamp(pos.time_open)
                    
                    age_seconds = (current_time - pos_time).total_seconds()
                    if age_seconds > 600:  # 10 ‡∏ô‡∏≤‡∏ó‡∏µ
                        old_positions.append(pos)
                except Exception:
                    continue
            
            if old_positions:
                conditions_met += 1
                logger.debug(f"‚úÖ ‡∏°‡∏µ positions ‡πÄ‡∏Å‡πà‡∏≤: {len(old_positions)} ‡∏ï‡∏±‡∏ß")
            
            # 5. ‡∏°‡∏µ positions ‡∏Å‡∏≥‡πÑ‡∏£‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡∏õ‡∏¥‡∏î‡∏Ñ‡∏π‡πà‡πÑ‡∏î‡πâ
            profitable_positions = [pos for pos in positions if pos.profit > 5.0]  # ‡∏Å‡∏≥‡πÑ‡∏£‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ $5
            if profitable_positions:
                conditions_met += 1
                logger.debug(f"‚úÖ ‡∏°‡∏µ positions ‡∏Å‡∏≥‡πÑ‡∏£: {len(profitable_positions)} ‡∏ï‡∏±‡∏ß")
            
            # ‡∏ï‡πâ‡∏≠‡∏á‡∏ú‡πà‡∏≤‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 3 ‡∏à‡∏≤‡∏Å 5 ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç
            should_trigger = conditions_met >= 3
            
            if should_trigger:
                logger.info(f"üéØ ‡∏Ñ‡∏ß‡∏£ trigger Smart Recovery ({conditions_met}/{total_conditions} ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç)")
            else:
                logger.debug(f"üí° ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£ Recovery ({conditions_met}/{total_conditions} ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç)")
            
            return should_trigger
            
        except Exception as e:
            logger.error(f"Error checking recovery trigger: {e}")
            return False
