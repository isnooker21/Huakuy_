# -*- coding: utf-8 -*-
"""
Group Closing Manager Example
‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏£‡∏∞‡∏ö‡∏ö Group Closing Manager
"""

import logging
from group_closing_manager import GroupClosingManager
from position_status_manager import PositionStatusManager
from order_management import OrderManager
from mt5_connection import MT5Connection

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def example_usage():
    """‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏£‡∏∞‡∏ö‡∏ö Group Closing Manager"""
    
    # 1. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
    mt5_connection = MT5Connection()
    order_manager = OrderManager(mt5_connection)
    status_manager = PositionStatusManager()
    group_closer = GroupClosingManager(order_manager, mt5_connection)
    
    # 2. ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
    positions = [
        # Protected Position
        type('Position', (), {
            'ticket': 1001,
            'type': 0,  # BUY
            'profit': -25.50,
            'price_open': 2000.0,
            'price_current': 1995.0
        })(),
        
        # HG Position
        type('Position', (), {
            'ticket': 1002,
            'type': 1,  # SELL
            'profit': 15.30,
            'price_open': 2005.0,
            'price_current': 1995.0
        })(),
        
        # Profit Helper 1 (‡πÑ‡∏Å‡∏•‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô)
        type('Position', (), {
            'ticket': 1003,
            'type': 0,  # BUY
            'profit': 8.20,
            'price_open': 1980.0,
            'price_current': 1995.0
        })(),
        
        # Profit Helper 2 (‡πÉ‡∏Å‡∏•‡πâ‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô)
        type('Position', (), {
            'ticket': 1004,
            'type': 1,  # SELL
            'profit': 12.40,
            'price_open': 2010.0,
            'price_current': 1995.0
        })(),
        
        # Standalone Position
        type('Position', (), {
            'ticket': 1005,
            'type': 0,  # BUY
            'profit': 5.80,
            'price_open': 1990.0,
            'price_current': 1995.0
        })()
    ]
    
    # 3. ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏°‡πâ
    current_price = 1995.0
    position_statuses = status_manager.analyze_all_positions(positions, current_price, [])
    
    logger.info("üìä Position Statuses:")
    for ticket, status_obj in position_statuses.items():
        logger.info(f"   #{ticket}: {status_obj.status}")
    
    # 4. ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°
    logger.info("\nüîç Analyzing closing opportunities...")
    closing_groups = group_closer.analyze_closing_opportunities(
        positions, position_statuses, current_price
    )
    
    # 5. ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
    logger.info(f"\nüìã Found {len(closing_groups)} closing groups:")
    for group in closing_groups:
        logger.info(f"\nüéØ Group {group.group_id}:")
        logger.info(f"   Type: {group.group_type}")
        logger.info(f"   Positions: {len(group.positions)}")
        logger.info(f"   Total Profit: ${group.total_profit:.2f}")
        logger.info(f"   Min Required: ${group.min_profit_required:.2f}")
        logger.info(f"   Can Close: {group.can_close}")
        logger.info(f"   Reason: {group.reason}")
        
        if group.can_close:
            logger.info("   ‚úÖ Ready to close!")
        else:
            logger.info("   ‚ö†Ô∏è Needs more profit")
    
    # 6. ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏õ‡∏¥‡∏î
    for group in closing_groups:
        if group.can_close:
            logger.info(f"\nüöÄ Executing group closing for {group.group_id}...")
            result = group_closer.execute_group_closing(group)
            
            if result['success']:
                logger.info(f"‚úÖ Successfully closed group: {result['message']}")
                logger.info(f"   Closed positions: {result['closed_count']}")
                logger.info(f"   Total profit: ${result['total_profit']:.2f}")
            else:
                logger.error(f"‚ùå Failed to close group: {result['message']}")
    
    # 7. ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
    stats = group_closer.get_closing_statistics()
    logger.info(f"\nüìä Closing Statistics:")
    logger.info(f"   Total groups analyzed: {stats['total_groups_analyzed']}")
    logger.info(f"   Successful groups: {stats['successful_groups']}")
    logger.info(f"   Success rate: {stats['success_rate']:.1f}%")

def advanced_usage():
    """‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á"""
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏∞‡∏ö‡∏ö
    mt5_connection = MT5Connection()
    order_manager = OrderManager(mt5_connection)
    group_closer = GroupClosingManager(order_manager, mt5_connection)
    
    # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°
    group_closer.min_profit_config['base_amount'] = 3.0  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≥‡πÑ‡∏£‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥
    group_closer.min_profit_config['multiplier'] = 2.0   # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏π‡∏ì‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÑ‡∏°‡πâ
    
    # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Helper
    group_closer.group_settings['helper_selection_radius'] = 100.0  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏±‡∏®‡∏°‡∏µ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Helper
    
    logger.info("üîß Advanced configuration applied")
    
    # ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏ö‡∏ö‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á
    logger.info("üîÑ Starting continuous analysis...")
    
    for i in range(3):  # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå 3 ‡∏£‡∏≠‡∏ö
        logger.info(f"\n--- Analysis Round {i+1} ---")
        
        # ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Position (‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏∞‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å MT5)
        positions = create_sample_positions(i)
        
        # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
        status_manager = PositionStatusManager()
        position_statuses = status_manager.analyze_all_positions(positions, 1995.0, [])
        
        # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏õ‡∏¥‡∏î
        closing_groups = group_closer.analyze_closing_opportunities(
            positions, position_statuses, 1995.0
        )
        
        logger.info(f"Found {len(closing_groups)} groups in round {i+1}")
        
        # ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°
        for group in closing_groups:
            if group.can_close:
                result = group_closer.execute_group_closing(group)
                logger.info(f"Group {group.group_id}: {result['message']}")
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
    stats = group_closer.get_closing_statistics()
    logger.info(f"\nüìä Final Statistics: {stats}")

def create_sample_positions(round_num: int):
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Position ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á"""
    positions = []
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á Position ‡∏ï‡∏≤‡∏°‡∏£‡∏≠‡∏ö
    for i in range(3 + round_num):
        ticket = 2000 + i
        pos_type = i % 2  # ‡∏™‡∏•‡∏±‡∏ö BUY/SELL
        profit = (i - 1) * 10.0  # ‡∏Å‡∏≥‡πÑ‡∏£/‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡∏™‡∏•‡∏±‡∏ö‡∏Å‡∏±‡∏ô
        
        position = type('Position', (), {
            'ticket': ticket,
            'type': pos_type,
            'profit': profit,
            'price_open': 2000.0 + (i * 5),
            'price_current': 1995.0,
            'swap': 0.0,
            'commission': 0.0
        })()
        
        positions.append(position)
    
    return positions

if __name__ == "__main__":
    logger.info("üöÄ Starting Group Closing Manager Example")
    
    # ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
    example_usage()
    
    # ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á
    advanced_usage()
    
    logger.info("‚úÖ Example completed")
