# -*- coding: utf-8 -*-
"""
Dynamic Position Modifier System
‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÅ‡∏ö‡∏ö Dynamic ‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ‡∏ó‡∏∏‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå
"""

import logging
from typing import Dict, List, Optional, Any, Tuple
from datetime import datetime, timedelta
from dataclasses import dataclass
from enum import Enum
import math
import time

logger = logging.getLogger(__name__)

class PositionProblem(Enum):
    """‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Ç‡∏≠‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á"""
    HEAVY_LOSS = "heavy_loss"           # ‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡∏´‡∏ô‡∏±‡∏Å
    DISTANCE_TOO_FAR = "distance_far"   # ‡∏´‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏°‡∏≤‡∏Å
    TIME_TOO_LONG = "time_too_long"     # ‡∏ñ‡∏∑‡∏≠‡∏ô‡∏≤‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ
    MARGIN_PRESSURE = "margin_pressure" # ‡∏Å‡∏î‡∏î‡∏±‡∏ô margin
    IMBALANCE_CAUSE = "imbalance_cause" # ‡∏ó‡∏≥‡πÉ‡∏´‡πâ portfolio ‡πÑ‡∏°‡πà‡∏™‡∏°‡∏î‡∏∏‡∏•
    CORRELATION_BAD = "correlation_bad" # correlation ‡πÑ‡∏°‡πà‡∏î‡∏µ
    VOLATILITY_VICTIM = "volatility_victim" # ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡∏à‡∏≤‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô

class ModifierAction(Enum):
    """‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç"""
    ADD_SUPPORT = "add_support"         # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠
    ADD_COUNTER = "add_counter"         # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ï‡∏£‡∏á‡∏Ç‡πâ‡∏≤‡∏°
    PARTIAL_CLOSE = "partial_close"     # ‡∏õ‡∏¥‡∏î‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô
    HEDGE_PROTECT = "hedge_protect"     # ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏î‡πâ‡∏ß‡∏¢ hedge
    AVERAGE_DOWN = "average_down"       # ‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏•‡∏á
    AVERAGE_UP = "average_up"          # ‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏Ç‡∏∂‡πâ‡∏ô
    CONVERT_HEDGE = "convert_hedge"     # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô hedge
    WAIT_IMPROVE = "wait_improve"       # ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏î‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô
    EMERGENCY_CLOSE = "emergency_close" # ‡∏õ‡∏¥‡∏î‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô

class ModifierPriority(Enum):
    """‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç"""
    CRITICAL = "critical"     # ‡∏ß‡∏¥‡∏Å‡∏§‡∏ï - ‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
    HIGH = "high"            # ‡∏™‡∏π‡∏á - ‡∏Ñ‡∏ß‡∏£‡∏ó‡∏≥‡πÄ‡∏£‡πá‡∏ß
    MEDIUM = "medium"        # ‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á - ‡∏ó‡∏≥‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™
    LOW = "low"              # ‡∏ï‡πà‡∏≥ - ‡∏ó‡∏≥‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏∞‡∏î‡∏ß‡∏Å
    MONITOR = "monitor"      # ‡πÄ‡∏ù‡∏≤‡∏î‡∏π - ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥

@dataclass
class PositionModification:
    """‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á"""
    position_ticket: int
    problems: List[PositionProblem]
    recommended_action: ModifierAction
    priority: ModifierPriority
    expected_improvement: float
    risk_assessment: float
    suggested_lot_size: float
    suggested_price: Optional[float]
    time_frame: str
    success_probability: float
    alternative_actions: List[ModifierAction]
    dynamic_parameters: Dict[str, Any]

@dataclass
class PortfolioModificationPlan:
    """‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Portfolio"""
    individual_modifications: List[PositionModification]
    group_modifications: List[Dict[str, Any]]
    emergency_actions: List[str]
    expected_portfolio_improvement: float
    estimated_cost: float
    estimated_time: str
    success_probability: float
    risk_level: float

class DynamicPositionModifier:
    """‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÅ‡∏ö‡∏ö Dynamic"""
    
    def __init__(self, mt5_connection=None, symbol: str = "XAUUSD", hedge_pairing_closer=None, initial_balance: float = 10000.0):
        self.mt5_connection = mt5_connection
        self.symbol = symbol
        self.hedge_pairing_closer = None  # Disabled - Using Edge Priority Closing
        self.initial_balance = initial_balance
        
        # üéØ Dynamic Thresholds - ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå
        self.heavy_loss_threshold = -200.0  # Dynamic based on balance
        self.distance_threshold = 100.0     # Dynamic based on volatility
        self.time_threshold_hours = 24      # Dynamic based on market condition
        self.margin_pressure_threshold = 200 # Dynamic based on account size
        
        # üìä Modifier Parameters
        self.max_support_positions = 3      # Dynamic limit
        self.max_hedge_ratio = 0.8         # Dynamic ratio
        self.emergency_loss_limit = -500.0  # Dynamic limit
        
        # üß† Learning Parameters
        self.success_history = {}
        self.failure_history = {}
        self.adaptation_rate = 0.1
        
        # üéØ Outlier Detection Parameters (‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡πà‡∏á‡∏Ç‡∏∂‡πâ‡∏ô)
        self.distance_threshold = 15.0  # ‡∏•‡∏î‡∏à‡∏≤‡∏Å 20 ‡πÄ‡∏õ‡πá‡∏ô 15 points (‡πÑ‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô)
        self.volatility_factor = 2.0    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å 1.5 ‡πÄ‡∏õ‡πá‡∏ô 2.0 (‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô)
        self.max_outlier_positions = 8  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å 5 ‡πÄ‡∏õ‡πá‡∏ô 8 ‡πÑ‡∏°‡πâ (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏î‡πâ‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô)
        self.loss_threshold = -50.0     # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô (‡πÅ‡∏Å‡πâ‡πÑ‡∏°‡πâ‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡∏°‡∏≤‡∏Å)
        self.time_threshold_hours = 12  # ‡∏•‡∏î‡∏à‡∏≤‡∏Å 24 ‡πÄ‡∏õ‡πá‡∏ô 12 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á (‡πÅ‡∏Å‡πâ‡πÑ‡∏°‡πâ‡πÄ‡∏Å‡πà‡∏≤‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô)
        
        # üìä Technical Analysis Parameters
        self.demand_supply_enabled = True
        self.fibonacci_enabled = True
        self.fibonacci_levels = [0.236, 0.382, 0.5, 0.618, 0.786]
        
        # üõ°Ô∏è Safety Parameters (‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡πà‡∏á‡∏Ç‡∏∂‡πâ‡∏ô)
        self.max_correction_distance = 60.0  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å 50 ‡πÄ‡∏õ‡πá‡∏ô 60 points (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏î‡πâ‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô)
        self.max_position_loss = -200.0      # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å -100 ‡πÄ‡∏õ‡πá‡∏ô -200 (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏°‡πâ‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡∏°‡∏≤‡∏Å‡πÑ‡∏î‡πâ)
        self.min_volume_threshold = 0.01     # ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥‡∏Ç‡∏≠‡∏á‡πÇ‡∏ö‡∏£‡∏Å 0.01 lot
        self.min_improvement_threshold = -5.0  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å 0 ‡πÄ‡∏õ‡πá‡∏ô -5 (‡∏¢‡∏≠‡∏°‡πÉ‡∏´‡πâ‡πÄ‡∏™‡∏µ‡∏¢‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ä‡πà‡∏ß‡∏¢‡∏û‡∏≠‡∏£‡πå‡∏ï)
        self.max_corrections_per_cycle = 5   # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÑ‡∏°‡πâ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ï‡πà‡∏≠‡∏£‡∏≠‡∏ö
        self.correction_cooldown = 1800      # 30 ‡∏ô‡∏≤‡∏ó‡∏µ cooldown ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
        self.last_correction_time = 0        # ‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
        
        logger.info("üîß Dynamic Position Modifier initialized")
    
    def _analyze_demand_supply(self, current_price: float) -> Dict:
        """üìä ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå Demand Supply Zones"""
        try:
            # ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏Ñ‡∏≤‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏≤‡∏à‡∏∏‡∏î Demand/Supply
            # ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢
            demand_zones = []
            supply_zones = []
            
            # ‡∏´‡∏≤‡∏à‡∏∏‡∏î‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î‡πÅ‡∏•‡∏∞‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á 20 ‡πÅ‡∏ó‡πà‡∏á
            # (‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏£‡∏¥‡∏á‡∏Ñ‡∏ß‡∏£‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å MT5)
            return {
                'demand_zones': demand_zones,
                'supply_zones': supply_zones,
                'current_price': current_price
            }
        except Exception as e:
            logger.error(f"‚ùå Error analyzing demand supply: {e}")
            return {'demand_zones': [], 'supply_zones': [], 'current_price': current_price}
    
    def _analyze_fibonacci_levels(self, current_price: float, positions: List[Any]) -> Dict:
        """üìä ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå Fibonacci Levels"""
        try:
            if not positions:
                return {'levels': [], 'current_price': current_price}
            
            # ‡∏´‡∏≤‡∏à‡∏∏‡∏î‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡πÅ‡∏•‡∏∞‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å‡πÑ‡∏°‡πâ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
            prices = [getattr(pos, 'price_open', current_price) for pos in positions]
            if not prices:
                return {'levels': [], 'current_price': current_price}
            
            high_price = max(prices)
            low_price = min(prices)
            price_range = high_price - low_price
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Fibonacci Levels
            fib_levels = {}
            for level in self.fibonacci_levels:
                fib_price = low_price + (price_range * level)
                fib_levels[level] = fib_price
            
            return {
                'levels': fib_levels,
                'high_price': high_price,
                'low_price': low_price,
                'current_price': current_price
            }
        except Exception as e:
            logger.error(f"‚ùå Error analyzing fibonacci: {e}")
            return {'levels': [], 'current_price': current_price}
    
    def _check_hedge_pair_status(self, target_pos: Any, positions: List[Any]) -> bool:
        """üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πâ‡∏°‡∏µ HG pair ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á"""
        try:
            target_type = getattr(target_pos, 'type', 0)
            target_ticket = getattr(target_pos, 'ticket', 0)
            
            # ‡∏´‡∏≤‡πÑ‡∏°‡πâ‡∏ù‡∏±‡πà‡∏á‡∏ï‡∏£‡∏á‡∏Ç‡πâ‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô pair
            opposite_positions = [pos for pos in positions 
                                if getattr(pos, 'type', 0) != target_type 
                                and getattr(pos, 'ticket', 0) != target_ticket]
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πâ‡∏ù‡∏±‡πà‡∏á‡∏ï‡∏£‡∏á‡∏Ç‡πâ‡∏≤‡∏°‡∏°‡∏µ comment ‡∏´‡∏£‡∏∑‡∏≠ tag ‡∏ó‡∏µ‡πà‡∏ö‡πà‡∏á‡∏ö‡∏≠‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô pair
            for pos in opposite_positions:
                comment = getattr(pos, 'comment', '')
                if 'HEDGE' in comment or 'PAIR' in comment:
                    return True
            
            return False
        except Exception as e:
            logger.error(f"‚ùå Error checking hedge pair status: {e}")
            return False
    
    def _find_helper_strategy(self, target_pos: Any, positions: List[Any], current_price: float) -> Optional[Dict]:
        """üîç ‡∏´‡∏≤‡πÑ‡∏°‡πâ‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÑ‡∏°‡πâ‡∏ó‡∏µ‡πà‡∏°‡∏µ HG pair ‡πÅ‡∏•‡πâ‡∏ß"""
        try:
            # ‡∏´‡∏≤‡πÑ‡∏°‡πâ‡∏Å‡∏≥‡πÑ‡∏£‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ä‡πà‡∏ß‡∏¢‡πÑ‡∏î‡πâ
            profitable_positions = [pos for pos in positions 
                                  if getattr(pos, 'profit', 0) > 0 
                                  and getattr(pos, 'ticket', 0) != getattr(target_pos, 'ticket', 0)]
            
            if not profitable_positions:
                return None
            
            # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏°‡πâ‡∏Å‡∏≥‡πÑ‡∏£‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
            best_helper = max(profitable_positions, key=lambda x: getattr(x, 'profit', 0))
            
            return {
                'action': 'HELPER',
                'reason': f'HELPER_FOR_HEDGED: Ticket {getattr(best_helper, "ticket", "N/A")}',
                'priority': 75,
                'strategy_type': 'HELPER',
                'helper_position': best_helper
            }
        except Exception as e:
            logger.error(f"‚ùå Error finding helper strategy: {e}")
            return None
    
    def _calculate_position_distance(self, position: Any, current_price: float) -> float:
        """üìè ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡πÑ‡∏°‡πâ‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô"""
        try:
            open_price = getattr(position, 'price_open', current_price)
            distance = abs(open_price - current_price)
            return distance
        except Exception as e:
            logger.error(f"‚ùå Error calculating position distance: {e}")
            return 0.0
    
    def _detect_outlier_positions(self, positions: List[Any], current_price: float) -> List[Any]:
        """üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÑ‡∏°‡πâ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏Ç‡∏≠‡∏ö‡∏ô‡∏≠‡∏Å (‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡πà‡∏á‡∏Ç‡∏∂‡πâ‡∏ô)"""
        try:
            outliers = []
            for pos in positions:
                distance = self._calculate_position_distance(pos, current_price)
                profit = getattr(pos, 'profit', 0)
                open_time = getattr(pos, 'time', 0)
                current_time = time.time()
                hours_old = (current_time - open_time) / 3600 if open_time > 0 else 0
                
                # ‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πà‡∏á‡∏Ç‡∏∂‡πâ‡∏ô (‡∏´‡∏•‡∏≤‡∏¢‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç)
                is_distance_outlier = distance > self.distance_threshold
                is_loss_outlier = profit < self.loss_threshold
                is_time_outlier = hours_old > self.time_threshold_hours
                is_heavy_loss = profit < -200.0  # ‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡∏´‡∏ô‡∏±‡∏Å‡∏°‡∏≤‡∏Å
                
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÑ‡∏°‡πâ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç (‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡πÉ‡∏î‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏´‡∏ô‡∏∂‡πà‡∏á)
                if is_distance_outlier or is_loss_outlier or is_time_outlier or is_heavy_loss:
                    priority_score = 0
                    if is_heavy_loss:
                        priority_score += 100  # ‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡∏´‡∏ô‡∏±‡∏Å = ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
                    if is_distance_outlier:
                        priority_score += distance * 2  # ‡∏£‡∏∞‡∏¢‡∏∞‡πÑ‡∏Å‡∏• = ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏™‡∏π‡∏á
                    if is_loss_outlier:
                        priority_score += abs(profit) * 0.5  # ‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô = ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á
                    if is_time_outlier:
                        priority_score += hours_old * 0.1  # ‡πÑ‡∏°‡πâ‡πÄ‡∏Å‡πà‡∏≤ = ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ï‡πà‡∏≥
                    
                    outliers.append({
                        'position': pos,
                        'distance': distance,
                        'ticket': getattr(pos, 'ticket', 'N/A'),
                        'profit': profit,
                        'hours_old': hours_old,
                        'priority_score': priority_score,
                        'reasons': []
                    })
                    
                    # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•
                    if is_heavy_loss:
                        outliers[-1]['reasons'].append("HEAVY_LOSS")
                    if is_distance_outlier:
                        outliers[-1]['reasons'].append("DISTANCE_FAR")
                    if is_loss_outlier:
                        outliers[-1]['reasons'].append("LOSS_HIGH")
                    if is_time_outlier:
                        outliers[-1]['reasons'].append("TIME_OLD")
            
            # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏° Priority Score (‡∏°‡∏≤‡∏Å‡∏™‡∏∏‡∏î‡∏Å‡πà‡∏≠‡∏ô)
            outliers.sort(key=lambda x: x['priority_score'], reverse=True)
            
            logger.info(f"üéØ Outlier Detection: Found {len(outliers)} outlier positions")
            if outliers:
                logger.info(f"   Top priority: Ticket {outliers[0]['ticket']} (score: {outliers[0]['priority_score']:.1f})")
            return outliers
        except Exception as e:
            logger.error(f"‚ùå Error detecting outlier positions: {e}")
            return []
    
    def _prioritize_outlier_positions(self, outliers: List[Dict], current_price: float) -> List[Dict]:
        """üìä ‡∏à‡∏±‡∏î‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏Ç‡∏≠‡∏á‡πÑ‡∏°‡πâ‡πÑ‡∏Å‡∏•"""
        try:
            for outlier in outliers:
                pos = outlier['position']
                distance = outlier['distance']
                profit = getattr(pos, 'profit', 0)
                volume = getattr(pos, 'volume', 0.01)
                
                # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì priority score (‡∏¢‡∏¥‡πà‡∏á‡πÑ‡∏Å‡∏• + ‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡πÄ‡∏¢‡∏≠‡∏∞ = priority ‡∏™‡∏π‡∏á)
                priority_score = (distance * 0.5) + (abs(profit) * 0.3) + (volume * 100)
                outlier['priority_score'] = priority_score
            
            # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏° priority (‡∏°‡∏≤‡∏Å‡∏™‡∏∏‡∏î‡∏Å‡πà‡∏≠‡∏ô)
            outliers.sort(key=lambda x: x['priority_score'], reverse=True)
            
            # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÑ‡∏°‡πâ‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏î‡πâ
            return outliers[:self.max_outlier_positions]
        except Exception as e:
            logger.error(f"‚ùå Error prioritizing outlier positions: {e}")
            return outliers
    
    def _create_correction_position_real(self, target_position: Any, action_type: str, 
                                       current_price: float) -> Optional[Any]:
        """üîÑ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏°‡πâ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏à‡∏£‡∏¥‡∏á‡∏ú‡πà‡∏≤‡∏ô MT5"""
        try:
            if not self.mt5_connection:
                logger.warning("‚ö†Ô∏è No MT5 connection available for creating correction position")
                return None
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÑ‡∏°‡πâ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
            correction_volume = self._calculate_correction_volume(target_position)
            correction_price = self._calculate_correction_price(target_position, current_price)
            correction_type = 0 if action_type == "BUY" else 1
            
            # ‡∏™‡πà‡∏á Order ‡∏ú‡πà‡∏≤‡∏ô MT5 (‡πÉ‡∏ä‡πâ order_management.py)
            from order_management import OrderManager
            order_manager = OrderManager(self.mt5_connection)
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á Signal object ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Order
            from trading_conditions import Signal
            signal = Signal(
                symbol=getattr(target_position, 'symbol', 'XAUUSD'),
                direction="BUY" if correction_type == 0 else "SELL",
                price=correction_price,  # ‡πÉ‡∏ä‡πâ price ‡πÅ‡∏ó‡∏ô entry_price
                timestamp=datetime.now(),
                comment=f"CORRECTION_{getattr(target_position, 'ticket', 'unknown')}",
                strength=50.0,  # ‡πÅ‡∏£‡∏á‡∏Ç‡∏≠‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á
                confidence=80.0  # ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡∏™‡∏π‡∏á
            )
            
            order_result = order_manager.place_order_from_signal(
                signal, correction_volume, 10000.0  # ‡πÉ‡∏ä‡πâ balance ‡∏à‡∏≥‡∏•‡∏≠‡∏á
            )
            
            if order_result.success:
                # ‡∏™‡∏£‡πâ‡∏≤‡∏á Position object
                correction_pos = type('Position', (), {
                    'ticket': order_result.ticket,
                    'symbol': getattr(target_position, 'symbol', 'XAUUSD'),
                    'type': correction_type,
                    'volume': correction_volume,
                    'price_open': correction_price,
                    'price_current': correction_price,
                    'profit': 0.0,
                    'position_role': 'CORRECTION',
                    'correction_target': getattr(target_position, 'ticket', 'unknown'),
                    'creation_reason': action_type,
                    'time': int(time.time()),
                    'comment': f"CORRECTION_{getattr(target_position, 'ticket', 'unknown')}"
                })()
                
                logger.info(f"‚úÖ Created correction position: {correction_pos.ticket} for target {target_position.ticket}")
                return correction_pos
            else:
                logger.error(f"‚ùå Failed to create correction position: {order_result.error_message}")
                return None
                
        except Exception as e:
            logger.error(f"‚ùå Error creating correction position: {e}")
            return None
    
    def _calculate_correction_volume(self, target_position: Any) -> float:
        """üí∞ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏°‡πâ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç (‡πÉ‡∏ä‡πâ‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÑ‡∏°‡πâ‡∏´‡∏•‡∏±‡∏Å)"""
        try:
            target_volume = getattr(target_position, 'volume', 0.01)
            
            # ‡πÉ‡∏ä‡πâ‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÑ‡∏°‡πâ‡∏´‡∏•‡∏±‡∏Å
            correction_volume = target_volume
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥‡∏Ç‡∏≠‡∏á‡πÇ‡∏ö‡∏£‡∏Å (0.01 lot)
            if correction_volume < 0.01:
                correction_volume = 0.01
                logger.warning(f"‚ö†Ô∏è Correction volume too small, using minimum 0.01 lot")
            
            logger.info(f"üí∞ Correction volume calculation:")
            logger.info(f"   Target volume: {target_volume}")
            logger.info(f"   Correction volume: {correction_volume}")
            logger.info(f"   Strategy: Same as main position")
            
            return correction_volume
        except Exception as e:
            logger.error(f"‚ùå Error calculating correction volume: {e}")
            return 0.01  # ‡πÉ‡∏ä‡πâ‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥
    
    def _calculate_correction_price(self, target_position: Any, current_price: float) -> float:
        """üí∞ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏≤‡∏Ñ‡∏≤‡πÑ‡∏°‡πâ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç"""
        try:
            # ‡πÉ‡∏ä‡πâ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
            return current_price
        except Exception as e:
            logger.error(f"‚ùå Error calculating correction price: {e}")
            return current_price
    
    def _is_safe_to_create_correction(self, target_pos: Any, current_price: float) -> bool:
        """üõ°Ô∏è ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏°‡πâ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"""
        try:
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á
            distance = self._calculate_position_distance(target_pos, current_price)
            if distance > self.max_correction_distance:
                logger.warning(f"‚ö†Ô∏è Position too far ({distance:.1f} points) - not safe to correct")
                return False
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô
            profit = getattr(target_pos, 'profit', 0)
            if profit < self.max_position_loss:
                logger.warning(f"‚ö†Ô∏è Position loss too high (${profit:.2f}) - not safe to correct")
                return False
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏û‡∏≠‡∏£‡πå‡∏ï
            if self._is_portfolio_critical():
                logger.warning("‚ö†Ô∏è Portfolio critical - not safe to create corrections")
                return False
            
            return True
        except Exception as e:
            logger.error(f"‚ùå Error checking correction safety: {e}")
            return False
    
    def _is_portfolio_critical(self) -> bool:
        """üö® ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏û‡∏≠‡∏£‡πå‡∏ï‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏†‡∏≤‡∏ß‡∏∞‡∏ß‡∏¥‡∏Å‡∏§‡∏ï‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"""
        try:
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≤‡∏Å account info ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
            if hasattr(self, 'last_account_info'):
                balance = self.last_account_info.get('balance', 10000)
                margin_level = self.last_account_info.get('margin_level', 1000)
                
                # ‡∏û‡∏≠‡∏£‡πå‡∏ï‡∏ß‡∏¥‡∏Å‡∏§‡∏ï‡∏ñ‡πâ‡∏≤ margin level ‡∏ï‡πà‡∏≥
                if margin_level < 150:
                    return True
                
                # ‡∏û‡∏≠‡∏£‡πå‡∏ï‡∏ß‡∏¥‡∏Å‡∏§‡∏ï‡∏ñ‡πâ‡∏≤ balance ‡∏•‡∏î‡∏•‡∏á‡∏°‡∏≤‡∏Å
                if balance < self.initial_balance * 0.5:
                    return True
            
            return False
        except Exception as e:
            logger.error(f"‚ùå Error checking portfolio critical status: {e}")
            return False
    
    def _validate_correction_profitability(self, main_pos: Any, correction_pos: Any, helpers: List[Any]) -> bool:
        """üìä ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πâ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏à‡∏∞‡∏ä‡πà‡∏ß‡∏¢‡∏û‡∏≠‡∏£‡πå‡∏ï‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"""
        try:
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Å‡∏≥‡πÑ‡∏£‡∏£‡∏ß‡∏°‡∏Å‡πà‡∏≠‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏°‡πâ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
            current_profit = getattr(main_pos, 'profit', 0)
            helper_profit = sum(getattr(h, 'profit', 0) for h in helpers)
            total_before = current_profit + helper_profit
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Å‡∏≥‡πÑ‡∏£‡∏£‡∏ß‡∏°‡∏´‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏°‡πâ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç (‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå)
            estimated_correction_profit = self._estimate_correction_profit(correction_pos)
            total_after = total_before + estimated_correction_profit
            
            # ‡∏ï‡πâ‡∏≠‡∏á‡∏î‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢‡πÑ‡∏°‡πà‡πÅ‡∏¢‡πà‡∏•‡∏á
            improvement = total_after - total_before
            is_profitable = improvement >= self.min_improvement_threshold
            
            logger.info(f"üìä Correction profitability check:")
            logger.info(f"   Before: ${total_before:.2f}")
            logger.info(f"   After: ${total_after:.2f}")
            logger.info(f"   Improvement: ${improvement:.2f}")
            logger.info(f"   Profitable: {is_profitable}")
            
            return is_profitable
        except Exception as e:
            logger.error(f"‚ùå Error validating correction profitability: {e}")
            return False
    
    def _estimate_correction_profit(self, correction_pos: Any) -> float:
        """üí∞ ‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏Å‡∏≥‡πÑ‡∏£‡∏Ç‡∏≠‡∏á‡πÑ‡∏°‡πâ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç"""
        try:
            # ‡πÑ‡∏°‡πâ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏´‡∏°‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≥‡πÑ‡∏£
            return 0.0
        except Exception as e:
            logger.error(f"‚ùå Error estimating correction profit: {e}")
            return 0.0
    
    def _smart_correction_strategy(self, target_pos: Any, current_price: float, positions: List[Any] = None) -> Optional[Dict]:
        """üéØ ‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏ö‡∏ö‡∏â‡∏•‡∏≤‡∏î (‡πÉ‡∏ä‡πâ Demand Supply + Fibo + Logic ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô)"""
        try:
            # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ positions default
            if positions is None:
                positions = []
                
            target_profit = getattr(target_pos, 'profit', 0)
            distance = self._calculate_position_distance(target_pos, current_price)
            position_type = getattr(target_pos, 'type', 0)
            
            logger.info(f"üéØ Correction strategy: ${target_profit:.2f} profit, {distance:.1f} points")
            
            # 1. ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå Demand Supply
            ds_analysis = self._analyze_demand_supply(current_price)
            
            # 2. ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå Fibonacci
            fib_analysis = self._analyze_fibonacci_levels(current_price, positions)
            
            # 3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πâ‡∏°‡∏µ HG pair ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
            has_hedge_pair = self._check_hedge_pair_status(target_pos, positions)
            
            # 4. ‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ï‡∏≤‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç
            strategies = []
            
            # ‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà 1: ‡πÑ‡∏°‡πâ‡πÑ‡∏Å‡∏•‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (Distance > 20 points)
            if distance > 20.0:
                if target_profit < 0:  # ‡πÑ‡∏°‡πâ‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô + ‡πÑ‡∏Å‡∏•
                    # ‡∏≠‡∏≠‡∏Å‡πÑ‡∏°‡πâ‡∏ù‡∏±‡πà‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô (Average Down/Up)
                    strategies.append({
                        'action': 'BUY' if position_type == 0 else 'SELL',  # ‡∏ù‡∏±‡πà‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô
                        'reason': f'DISTANCE_FAR_SAME_SIDE: {distance:.1f}pts + ${target_profit:.2f}',
                        'priority': 90,
                        'strategy_type': 'AVERAGE_SAME_SIDE'
                    })
                else:  # ‡πÑ‡∏°‡πâ‡∏Å‡∏≥‡πÑ‡∏£ + ‡πÑ‡∏Å‡∏•
                    logger.info("‚úÖ Position is profitable but far - no correction needed")
                    return None
            
            # ‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà 2: ‡πÑ‡∏°‡πâ‡πÉ‡∏Å‡∏•‡πâ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (Distance <= 20 points)
            elif distance <= 20.0:
                if has_hedge_pair:  # ‡∏°‡∏µ HG pair ‡πÅ‡∏•‡πâ‡∏ß
                    # ‡∏´‡∏≤‡πÑ‡∏°‡πâ‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠
                    helper_strategy = self._find_helper_strategy(target_pos, positions, current_price)
                    if helper_strategy:
                        strategies.append(helper_strategy)
                else:  # ‡πÑ‡∏°‡πà‡∏°‡∏µ HG pair
                    # ‡∏™‡∏£‡πâ‡∏≤‡∏á HG pair
                    strategies.append({
                        'action': 'BUY' if position_type == 1 else 'SELL',  # ‡∏ù‡∏±‡πà‡∏á‡∏ï‡∏£‡∏á‡∏Ç‡πâ‡∏≤‡∏°
                        'reason': f'CREATE_HEDGE_PAIR: {distance:.1f}pts + ${target_profit:.2f}',
                        'priority': 85,
                        'strategy_type': 'CREATE_HEDGE'
                    })
            
            # ‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà 3: ‡πÑ‡∏°‡πâ‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡∏´‡∏ô‡∏±‡∏Å (‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÑ‡∏Å‡∏•‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏Å‡∏•‡πâ)
            if target_profit < -100.0:
                strategies.append({
                    'action': 'BUY' if position_type == 1 else 'SELL',  # ‡∏ù‡∏±‡πà‡∏á‡∏ï‡∏£‡∏á‡∏Ç‡πâ‡∏≤‡∏°
                    'reason': f'HEAVY_LOSS_HEDGE: ${target_profit:.2f}',
                    'priority': 95,
                    'strategy_type': 'HEAVY_LOSS_HEDGE'
                })
            
            # ‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà 4: ‡πÑ‡∏°‡πâ‡πÄ‡∏Å‡πà‡∏≤ + ‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô
            hours_old = (time.time() - getattr(target_pos, 'time', 0)) / 3600 if getattr(target_pos, 'time', 0) > 0 else 0
            if hours_old > 24.0 and target_profit < -30.0:
                strategies.append({
                    'action': 'BUY' if position_type == 1 else 'SELL',  # ‡∏ù‡∏±‡πà‡∏á‡∏ï‡∏£‡∏á‡∏Ç‡πâ‡∏≤‡∏°
                    'reason': f'OLD_POSITION_HEDGE: {hours_old:.1f}h + ${target_profit:.2f}',
                    'priority': 80,
                    'strategy_type': 'OLD_POSITION_HEDGE'
                })
            
            # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
            if strategies:
                best_strategy = max(strategies, key=lambda x: x['priority'])
                logger.info(f"üéØ Best Strategy: {best_strategy['action']} - {best_strategy['reason']}")
                return best_strategy
            
            return None
        except Exception as e:
            logger.error(f"‚ùå Error in smart correction strategy: {e}")
            return None
    
    def _cancel_correction_position(self, correction_pos: Any):
        """‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÑ‡∏°‡πâ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ä‡πà‡∏ß‡∏¢‡∏û‡∏≠‡∏£‡πå‡∏ï"""
        try:
            ticket = getattr(correction_pos, 'ticket', 'N/A')
            logger.info(f"‚ùå Cancelling correction position {ticket}")
            
            # ‡∏õ‡∏¥‡∏î‡πÑ‡∏°‡πâ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
            if self.mt5_connection:
                # ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏õ‡∏¥‡∏î‡πÑ‡∏°‡πâ
                close_result = self.mt5_connection.close_position(ticket)
                if close_result:
                    logger.info(f"‚úÖ Successfully cancelled correction position {ticket}")
                else:
                    logger.error(f"‚ùå Failed to cancel correction position {ticket}")
            
        except Exception as e:
            logger.error(f"‚ùå Error cancelling correction position: {e}")
    
    def _send_correction_to_hedge_pairing(self, correction_pos: Any, target_pos: Any):
        """üì§ ‡∏™‡πà‡∏á‡πÑ‡∏°‡πâ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏õ‡πÉ‡∏´‡πâ Hedge Pairing Closer - DISABLED"""
        try:
            # üö´ DISABLED: hedge_pairing_closer - Using Edge Priority Closing instead
            logger.debug("üö´ hedge_pairing_closer disabled - Using Edge Priority Closing instead")
            return
            
            # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏°‡πâ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÑ‡∏°‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
            logger.info(f"üì§ Sending correction position {getattr(correction_pos, 'ticket', 'N/A')} to Hedge Pairing Closer")
            logger.info(f"   Target: {getattr(target_pos, 'ticket', 'N/A')}")
            logger.info(f"   Role: {getattr(correction_pos, 'position_role', 'UNKNOWN')}")
            logger.info(f"   Reason: {getattr(correction_pos, 'creation_reason', 'UNKNOWN')}")
            
            # ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πâ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏ï‡πà‡∏≠‡πÑ‡∏õ
            # Hedge Pairing Closer ‡∏à‡∏∞‡∏£‡∏π‡πâ‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πâ‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏°‡πâ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏¥‡∏î‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÑ‡∏°‡πâ‡∏´‡∏•‡∏±‡∏Å
            
        except Exception as e:
            logger.error(f"‚ùå Error sending correction to hedge pairing: {e}")
    
    def analyze_portfolio_modifications(self, positions: List[Any], account_info: Dict,
                                      current_price: float) -> PortfolioModificationPlan:
        """
        üéØ ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Portfolio ‡πÅ‡∏ö‡∏ö Dynamic
        """
        try:
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Cooldown ‡∏Å‡πà‡∏≠‡∏ô
            current_time = time.time()
            if current_time - self.last_correction_time < self.correction_cooldown:
                logger.info(f"‚è∞ Position Modifier: Cooldown active ({self.correction_cooldown}s) - skipping analysis")
                return None
            
            logger.info(f"üîç DYNAMIC PORTFOLIO MODIFICATION ANALYSIS: {len(positions)} positions")
            
            # 1. üéØ Outlier Detection - ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÑ‡∏°‡πâ‡πÑ‡∏Å‡∏• (‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡πà‡∏á‡∏Ç‡∏∂‡πâ‡∏ô)
            outliers = self._detect_outlier_positions(positions, current_price)
            if outliers:
                logger.info(f"üéØ Found {len(outliers)} outlier positions that need correction")
                prioritized_outliers = self._prioritize_outlier_positions(outliers, current_price)
                
                # ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏ö‡∏ö Batch (‡∏´‡∏•‡∏≤‡∏¢‡πÑ‡∏°‡πâ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô)
                correction_count = 0
                max_corrections = min(self.max_corrections_per_cycle, len(prioritized_outliers))
                
                # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏°‡πâ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÑ‡∏°‡πâ‡πÑ‡∏Å‡∏• (‡πÅ‡∏ö‡∏ö‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢)
                correction_positions = []
                for outlier in prioritized_outliers:
                    # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ï‡πà‡∏≠‡∏£‡∏≠‡∏ö
                    if correction_count >= max_corrections:
                        logger.info(f"üõë Reached maximum corrections per cycle: {max_corrections}")
                        break
                    target_pos = outlier['position']
                    distance = outlier['distance']
                    profit = getattr(target_pos, 'profit', 0)
                    
                    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏Å‡πà‡∏≠‡∏ô
                    if not self._is_safe_to_create_correction(target_pos, current_price):
                        logger.warning(f"‚ö†Ô∏è Skipping correction for ticket {getattr(target_pos, 'ticket', 'N/A')} - not safe")
                        continue
                    
                    # ‡πÉ‡∏ä‡πâ‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏â‡∏•‡∏≤‡∏î
                    correction_strategy = self._smart_correction_strategy(target_pos, current_price, positions)
                    if not correction_strategy:
                        logger.info(f"üí§ No correction needed for ticket {getattr(target_pos, 'ticket', 'N/A')}")
                        continue
                    
                    action_type = correction_strategy['action']
                    correction_pos = self._create_correction_position_real(target_pos, action_type, current_price)
                    
                    if correction_pos:
                        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ä‡πà‡∏ß‡∏¢‡∏û‡∏≠‡∏£‡πå‡∏ï
                        helpers = []  # ‡πÑ‡∏°‡πâ‡∏ä‡πà‡∏ß‡∏¢ (‡∏à‡∏∞‡∏´‡∏≤‡πÉ‡∏ô Hedge Pairing)
                        if self._validate_correction_profitability(target_pos, correction_pos, helpers):
                            correction_positions.append(correction_pos)
                            correction_count += 1
                            logger.info(f"‚úÖ Created safe correction for ticket {getattr(target_pos, 'ticket', 'N/A')} (distance: {distance:.1f}) [{correction_count}/{max_corrections}]")
                            
                            # üö´ DISABLED: hedge_pairing_closer - Using Edge Priority Closing instead
                            logger.debug("üö´ hedge_pairing_closer disabled - Using Edge Priority Closing instead")
                            
                            # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
                            self.last_correction_time = current_time
                        else:
                            logger.warning(f"‚ö†Ô∏è Correction not profitable for ticket {getattr(target_pos, 'ticket', 'N/A')} - cancelled")
                            # ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÑ‡∏°‡πâ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ä‡πà‡∏ß‡∏¢‡∏û‡∏≠‡∏£‡πå‡∏ï
                            self._cancel_correction_position(correction_pos)
            
            # 2. üîç Individual Position Analysis (‡πÑ‡∏°‡πâ‡∏õ‡∏Å‡∏ï‡∏¥)
            individual_modifications = []
            for position in positions:
                modification = self._analyze_individual_position(position, current_price, account_info)
                if modification:
                    individual_modifications.append(modification)
            
            # 2. ü§ù Group Modification Analysis
            group_modifications = self._analyze_group_modifications(positions, current_price, account_info)
            
            # 3. üö® Emergency Action Analysis
            emergency_actions = self._analyze_emergency_actions(positions, account_info)
            
            # 4. üìä Portfolio Impact Calculation
            portfolio_improvement = self._calculate_portfolio_improvement(
                individual_modifications, group_modifications, positions, account_info
            )
            
            # 5. üí∞ Cost Estimation
            estimated_cost = self._estimate_modification_cost(
                individual_modifications, group_modifications, current_price
            )
            
            # 6. ‚è∞ Time Estimation
            estimated_time = self._estimate_completion_time(
                individual_modifications, group_modifications
            )
            
            # 7. üéØ Success Probability
            success_probability = self._calculate_success_probability(
                individual_modifications, group_modifications, positions
            )
            
            # 8. ‚öñÔ∏è Risk Assessment
            risk_level = self._assess_modification_risk(
                individual_modifications, group_modifications, account_info
            )
            
            plan = PortfolioModificationPlan(
                individual_modifications=individual_modifications,
                group_modifications=group_modifications,
                emergency_actions=emergency_actions,
                expected_portfolio_improvement=portfolio_improvement,
                estimated_cost=estimated_cost,
                estimated_time=estimated_time,
                success_probability=success_probability,
                risk_level=risk_level
            )
            
            self._log_modification_plan(plan)
            return plan
            
        except Exception as e:
            logger.error(f"‚ùå Error analyzing portfolio modifications: {e}")
            return self._create_safe_modification_plan()
    
    def _analyze_individual_position(self, position: Any, current_price: float,
                                   account_info: Dict) -> Optional[PositionModification]:
        """üîç ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß"""
        try:
            ticket = getattr(position, 'ticket', 0)
            position_type = getattr(position, 'type', 0)
            open_price = getattr(position, 'price_open', current_price)
            profit = getattr(position, 'profit', 0)
            volume = getattr(position, 'volume', 0.01)
            open_time = getattr(position, 'time', datetime.now().timestamp())
            
            # 1. üîç Problem Detection
            problems = self._detect_position_problems(position, current_price, account_info)
            
            if not problems:
                return None  # No problems found
            
            # 2. üéØ Action Recommendation
            recommended_action = self._recommend_modifier_action(position, problems, current_price, account_info)
            
            # 3. üìä Priority Assessment
            priority = self._assess_modifier_priority(problems, profit, account_info)
            
            # 4. üìà Improvement Estimation
            expected_improvement = self._estimate_position_improvement(
                position, recommended_action, current_price, account_info
            )
            
            # 5. ‚öñÔ∏è Risk Assessment
            risk_assessment = self._assess_modification_risk_individual(
                position, recommended_action, current_price
            )
            
            # 6. üí∞ Lot Size Calculation
            suggested_lot_size = self._calculate_modifier_lot_size(
                position, recommended_action, current_price, account_info
            )
            
            # 7. üí∞ Price Calculation
            suggested_price = self._calculate_modifier_price(
                position, recommended_action, current_price
            )
            
            # 8. üéØ Success Probability
            success_probability = self._calculate_individual_success_probability(
                position, recommended_action, problems
            )
            
            # 9. üîÑ Alternative Actions
            alternative_actions = self._find_alternative_actions(
                position, recommended_action, problems
            )
            
            # 10. üîß Dynamic Parameters
            dynamic_parameters = self._calculate_dynamic_parameters(
                position, recommended_action, current_price, account_info
            )
            
            return PositionModification(
                position_ticket=ticket,
                problems=problems,
                recommended_action=recommended_action,
                priority=priority,
                expected_improvement=expected_improvement,
                risk_assessment=risk_assessment,
                suggested_lot_size=suggested_lot_size,
                suggested_price=suggested_price,
                time_frame=self._estimate_action_timeframe(recommended_action),
                success_probability=success_probability,
                alternative_actions=alternative_actions,
                dynamic_parameters=dynamic_parameters
            )
            
        except Exception as e:
            logger.error(f"‚ùå Error analyzing individual position: {e}")
            return None
    
    def _detect_position_problems(self, position: Any, current_price: float,
                                account_info: Dict) -> List[PositionProblem]:
        """üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏´‡∏≤‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Ç‡∏≠‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á"""
        problems = []
        
        try:
            profit = getattr(position, 'profit', 0)
            open_price = getattr(position, 'price_open', current_price)
            position_type = getattr(position, 'type', 0)
            open_time = getattr(position, 'time', datetime.now().timestamp())
            balance = account_info.get('balance', 10000)
            
            # 1. üí∏ Smart Loss Detection - ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏° Lot Size
            lot_size = getattr(position, 'volume', 0.01)
            
            # Dynamic loss threshold based on lot size and balance
            base_loss_per_lot = -50.0  # -$50 per 0.01 lot
            lot_adjusted_loss = base_loss_per_lot * (lot_size / 0.01)
            balance_adjusted_loss = balance * -0.015  # 1.5% of balance
            
            # Use the more restrictive threshold
            smart_loss_threshold = max(lot_adjusted_loss, balance_adjusted_loss, self.heavy_loss_threshold)
            
            if profit < smart_loss_threshold:
                problems.append(PositionProblem.HEAVY_LOSS)
                logger.debug(f"üí∏ Smart Loss: ${profit:.2f} < ${smart_loss_threshold:.2f} (Lot:{lot_size}, Balance%:{balance_adjusted_loss:.2f})")
            
            # 2. Distance Detection
            distance = abs(current_price - open_price)
            # Dynamic distance threshold based on current volatility
            volatility_factor = self._calculate_current_volatility(current_price)
            dynamic_distance_threshold = self.distance_threshold * (1 + volatility_factor)
            
            if distance > dynamic_distance_threshold:
                problems.append(PositionProblem.DISTANCE_TOO_FAR)
            
            # 3. ‚è∞ Smart Time Detection - ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô‡πÅ‡∏•‡∏∞‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á
            current_time = datetime.now().timestamp()
            hours_held = (current_time - open_time) / 3600
            
            # Calculate how much price moved during holding period
            price_movement = abs(current_price - open_price)
            volatility_factor = self._calculate_current_volatility(current_price)
            
            # Dynamic time threshold based on price movement and volatility
            # ‡∏ñ‡πâ‡∏≤‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß‡∏°‡∏≤‡∏Å = ‡∏ï‡∏•‡∏≤‡∏î‡πÄ‡∏£‡πá‡∏ß = ‡∏•‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏¢‡∏≠‡∏°‡πÉ‡∏´‡πâ‡∏ñ‡∏∑‡∏≠
            # ‡∏ñ‡πâ‡∏≤‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß‡∏ô‡πâ‡∏≠‡∏¢ = ‡∏ï‡∏•‡∏≤‡∏î‡πÄ‡∏á‡∏µ‡∏¢‡∏ö = ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏¢‡∏≠‡∏°‡πÉ‡∏´‡πâ‡∏ñ‡∏∑‡∏≠
            base_time = self.time_threshold_hours
            
            if price_movement > 200:  # ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß‡∏°‡∏≤‡∏Å (>200 points)
                smart_time_threshold = base_time * 0.5  # ‡∏•‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏•‡∏á 50%
                reason = "high_volatility"
            elif price_movement > 100:  # ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á
                smart_time_threshold = base_time * 0.75  # ‡∏•‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏•‡∏á 25%
                reason = "medium_volatility"
            elif price_movement < 30:  # ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß‡∏ô‡πâ‡∏≠‡∏¢ (<30 points)
                smart_time_threshold = base_time * 2.0  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏Ç‡∏∂‡πâ‡∏ô 100%
                reason = "low_volatility"
            else:
                smart_time_threshold = base_time
                reason = "normal_volatility"
            
            if hours_held > smart_time_threshold:
                problems.append(PositionProblem.TIME_TOO_LONG)
                logger.debug(f"‚è∞ Smart Time: {hours_held:.1f}h > {smart_time_threshold:.1f}h (Movement:{price_movement:.1f}, {reason})")
            
            # 4. Margin Pressure Detection
            margin_level = account_info.get('margin_level', 1000)
            if margin_level < self.margin_pressure_threshold:
                problems.append(PositionProblem.MARGIN_PRESSURE)
            
            # 5. Volatility Victim Detection
            if self._is_volatility_victim(position, current_price):
                problems.append(PositionProblem.VOLATILITY_VICTIM)
                
        except Exception as e:
            logger.error(f"‚ùå Error detecting position problems: {e}")
            
        return problems
    
    def _recommend_modifier_action(self, position: Any, problems: List[PositionProblem],
                                 current_price: float, account_info: Dict) -> ModifierAction:
        """üéØ ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç"""
        try:
            profit = getattr(position, 'profit', 0)
            balance = account_info.get('balance', 10000)
            margin_level = account_info.get('margin_level', 1000)
            
            # Critical situations
            if profit < balance * -0.05:  # 5% of balance loss
                return ModifierAction.EMERGENCY_CLOSE
            
            if margin_level < 120:
                return ModifierAction.PARTIAL_CLOSE
            
            # Problem-based recommendations
            if PositionProblem.HEAVY_LOSS in problems:
                if profit < balance * -0.03:
                    return ModifierAction.ADD_SUPPORT
                else:
                    return ModifierAction.AVERAGE_DOWN
            
            if PositionProblem.DISTANCE_TOO_FAR in problems:
                return ModifierAction.ADD_COUNTER
            
            if PositionProblem.TIME_TOO_LONG in problems:
                if profit < 0:
                    return ModifierAction.ADD_SUPPORT
                else:
                    return ModifierAction.PARTIAL_CLOSE
            
            if PositionProblem.MARGIN_PRESSURE in problems:
                return ModifierAction.PARTIAL_CLOSE
            
            if PositionProblem.VOLATILITY_VICTIM in problems:
                return ModifierAction.HEDGE_PROTECT
            
            # Default action
            return ModifierAction.WAIT_IMPROVE
            
        except Exception as e:
            logger.error(f"‚ùå Error recommending modifier action: {e}")
            return ModifierAction.WAIT_IMPROVE
    
    def _assess_modifier_priority(self, problems: List[PositionProblem], profit: float,
                                account_info: Dict) -> ModifierPriority:
        """üìä ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç"""
        try:
            balance = account_info.get('balance', 10000)
            margin_level = account_info.get('margin_level', 1000)
            
            # Critical priorities
            if profit < balance * -0.05 or margin_level < 120:
                return ModifierPriority.CRITICAL
            
            # High priorities
            if (PositionProblem.HEAVY_LOSS in problems or 
                PositionProblem.MARGIN_PRESSURE in problems):
                return ModifierPriority.HIGH
            
            # Medium priorities
            if (PositionProblem.DISTANCE_TOO_FAR in problems or 
                PositionProblem.TIME_TOO_LONG in problems):
                return ModifierPriority.MEDIUM
            
            # Low priorities
            if PositionProblem.VOLATILITY_VICTIM in problems:
                return ModifierPriority.LOW
            
            return ModifierPriority.MONITOR
            
        except Exception as e:
            logger.error(f"‚ùå Error assessing modifier priority: {e}")
            return ModifierPriority.MONITOR
    
    def _analyze_group_modifications(self, positions: List[Any], current_price: float,
                                   account_info: Dict) -> List[Dict[str, Any]]:
        """ü§ù ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏ö‡∏ö‡∏Å‡∏•‡∏∏‡πà‡∏°"""
        group_modifications = []
        
        try:
            # 1. Balance Correction Groups
            buy_positions = [p for p in positions if getattr(p, 'type', 0) == 0]
            sell_positions = [p for p in positions if getattr(p, 'type', 1) == 1]
            
            if abs(len(buy_positions) - len(sell_positions)) > 5:
                group_modifications.append({
                    'type': 'BALANCE_CORRECTION',
                    'description': f'Balance {len(buy_positions)}B vs {len(sell_positions)}S',
                    'action': 'ADD_COUNTER_POSITIONS',
                    'priority': 'HIGH',
                    'estimated_positions': abs(len(buy_positions) - len(sell_positions)) // 2
                })
            
            # 2. Heavy Loss Recovery Groups
            heavy_loss_positions = [p for p in positions if getattr(p, 'profit', 0) < -200]
            if len(heavy_loss_positions) > 3:
                group_modifications.append({
                    'type': 'HEAVY_LOSS_RECOVERY',
                    'description': f'{len(heavy_loss_positions)} positions with heavy losses',
                    'action': 'COORDINATED_SUPPORT',
                    'priority': 'CRITICAL',
                    'estimated_support_lot': len(heavy_loss_positions) * 0.01
                })
            
            # 3. Distance Clustering
            far_positions = []
            for pos in positions:
                distance = abs(current_price - getattr(pos, 'price_open', current_price))
                if distance > 200:  # 200 points away
                    far_positions.append(pos)
            
            if len(far_positions) > 2:
                group_modifications.append({
                    'type': 'DISTANCE_CLUSTERING',
                    'description': f'{len(far_positions)} positions too far from current price',
                    'action': 'CLUSTER_SUPPORT',
                    'priority': 'MEDIUM',
                    'estimated_bridge_positions': len(far_positions)
                })
                
        except Exception as e:
            logger.error(f"‚ùå Error analyzing group modifications: {e}")
            
        return group_modifications
    
    def _analyze_emergency_actions(self, positions: List[Any], account_info: Dict) -> List[str]:
        """üö® ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô"""
        emergency_actions = []
        
        try:
            balance = account_info.get('balance', 10000)
            equity = account_info.get('equity', balance)
            margin_level = account_info.get('margin_level', 1000)
            
            # Margin Call Risk - ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ positions
            if len(positions) > 0 and margin_level > 0 and margin_level < 100:
                emergency_actions.append("MARGIN_CALL_PREVENTION")
            
            # Equity Protection
            if equity < balance * 0.8:
                emergency_actions.append("EQUITY_PROTECTION")
            
            # Heavy Loss Positions
            total_loss = sum(getattr(pos, 'profit', 0) for pos in positions if getattr(pos, 'profit', 0) < 0)
            if total_loss < balance * -0.1:  # 10% total loss
                emergency_actions.append("LOSS_LIMITATION")
            
            # Position Count Limit
            if len(positions) > 25:
                emergency_actions.append("POSITION_COUNT_CONTROL")
                
        except Exception as e:
            logger.error(f"‚ùå Error analyzing emergency actions: {e}")
            
        return emergency_actions
    
    def _calculate_current_volatility(self, current_price: float) -> float:
        """üìä ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô"""
        # Simplified volatility calculation
        # In real implementation, this would use historical price data
        return 0.5  # Default moderate volatility
    
    def _assess_market_speed(self) -> float:
        """‚ö° ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏≠‡∏á‡∏ï‡∏•‡∏≤‡∏î"""
        # Simplified market speed assessment
        # In real implementation, this would analyze recent price movements
        return 0.3  # Default moderate speed
    
    def _is_volatility_victim(self, position: Any, current_price: float) -> bool:
        """üìä ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡∏à‡∏≤‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"""
        try:
            profit = getattr(position, 'profit', 0)
            open_price = getattr(position, 'price_open', current_price)
            
            # Simple check: if position is losing and price moved significantly
            distance = abs(current_price - open_price)
            return profit < 0 and distance > 100
            
        except Exception as e:
            logger.error(f"‚ùå Error checking volatility victim: {e}")
            return False
    
    def _estimate_position_improvement(self, position: Any, action: ModifierAction,
                                     current_price: float, account_info: Dict) -> float:
        """üìà ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÅ‡∏ö‡∏ö Dynamic"""
        try:
            current_profit = getattr(position, 'profit', 0)
            open_price = getattr(position, 'price_open', current_price)
            volume = getattr(position, 'volume', 0.01)
            position_type = getattr(position, 'type', 0)
            
            # üéØ DYNAMIC IMPROVEMENT FACTORS (‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå)
            base_factors = {
                ModifierAction.ADD_SUPPORT: 0.6,
                ModifierAction.ADD_COUNTER: 0.4,
                ModifierAction.PARTIAL_CLOSE: 0.3,
                ModifierAction.HEDGE_PROTECT: 0.5,
                ModifierAction.AVERAGE_DOWN: 0.7,
                ModifierAction.AVERAGE_UP: 0.7,
                ModifierAction.CONVERT_HEDGE: 0.4,
                ModifierAction.WAIT_IMPROVE: 0.1,
                ModifierAction.EMERGENCY_CLOSE: 0.0
            }
            
            base_factor = base_factors.get(action, 0.2)
            
            # üìä MARKET CONDITIONS ADJUSTMENT
            price_distance = abs(current_price - open_price)
            
            # ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏´‡∏≤‡∏£‡∏î‡πâ‡∏ß‡∏¢‡∏®‡∏π‡∏ô‡∏¢‡πå
            if open_price > 0:
                price_distance_pct = (price_distance / open_price) * 100
            else:
                # ‡∏ñ‡πâ‡∏≤ open_price = 0 ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ current_price ‡πÅ‡∏ó‡∏ô
                price_distance_pct = (price_distance / current_price) * 100 if current_price > 0 else 0.0
            
            # ‡∏õ‡∏£‡∏±‡∏ö factor ‡∏ï‡∏≤‡∏°‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤
            if price_distance_pct > 2.0:  # ‡∏´‡πà‡∏≤‡∏á‡∏°‡∏≤‡∏Å
                distance_multiplier = 1.5
            elif price_distance_pct > 1.0:  # ‡∏´‡πà‡∏≤‡∏á‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á
                distance_multiplier = 1.2
            else:  # ‡∏´‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢
                distance_multiplier = 0.8
            
            # üí∞ VOLUME ADJUSTMENT
            if volume > 0.05:  # Volume ‡πÉ‡∏´‡∏ç‡πà
                volume_multiplier = 1.3
            elif volume < 0.02:  # Volume ‡πÄ‡∏•‡πá‡∏Å
                volume_multiplier = 0.7
            else:
                volume_multiplier = 1.0
            
            # üéØ ACCOUNT CONDITIONS
            margin_level = account_info.get('margin_level', 1000)
            if margin_level < 300:  # Margin ‡∏ï‡πà‡∏≥
                urgency_multiplier = 1.4
            elif margin_level > 800:  # Margin ‡∏™‡∏π‡∏á
                urgency_multiplier = 0.9
            else:
                urgency_multiplier = 1.0
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì final factor
            final_factor = base_factor * distance_multiplier * volume_multiplier * urgency_multiplier
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì expected improvement
            if current_profit < 0:
                # ‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô ‚Üí ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≤‡∏Å‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô
                expected_improvement = abs(current_profit) * final_factor
            else:
                # ‡∏Å‡∏≥‡πÑ‡∏£ ‚Üí ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≤‡∏Å‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≥‡πÑ‡∏£
                expected_improvement = current_profit * final_factor * 0.3
            
            # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ñ‡πà‡∏≤‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î (‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 50% ‡∏Ç‡∏≠‡∏á balance)
            balance = account_info.get('balance', 10000)
            max_improvement = balance * 0.5
            expected_improvement = min(expected_improvement, max_improvement)
            
            logger.debug(f"üìà POSITION IMPROVEMENT: Ticket {getattr(position, 'ticket', 'N/A')}, "
                        f"Action={action.value}, Base={base_factor:.2f}, "
                        f"Final={final_factor:.2f}, Expected=${expected_improvement:.2f}")
            
            return max(0.0, expected_improvement)
            
        except Exception as e:
            logger.error(f"‚ùå Error estimating position improvement: {e}")
            return 0.0
    
    def _log_modification_plan(self, plan: PortfolioModificationPlan):
        """üìä ‡πÅ‡∏™‡∏î‡∏á log ‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏ö‡∏ö‡∏™‡∏±‡πâ‡∏ô‡∏Å‡∏£‡∏∞‡∏ä‡∏±‡∏ö"""
        if not plan.individual_modifications and not plan.group_modifications:
            logger.info("üîß No modifications needed")
            return
        
        # Log ‡πÅ‡∏ö‡∏ö‡∏™‡∏±‡πâ‡∏ô‡∏Å‡∏£‡∏∞‡∏ä‡∏±‡∏ö
        logger.info(f"üîß MODIFY: {len(plan.individual_modifications)} positions | "
                   f"Profit: +${plan.expected_portfolio_improvement:.0f}")
        
        # ‡πÅ‡∏™‡∏î‡∏á high priority ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
        critical_mods = [mod for mod in plan.individual_modifications 
                        if mod.priority == ModifierPriority.CRITICAL]
        
        if critical_mods:
            for mod in critical_mods[:2]:  # ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏Ñ‡πà 2 ‡∏≠‡∏±‡∏ô‡πÅ‡∏£‡∏Å
                logger.warning(f"üö® CRITICAL: Ticket {mod.position_ticket} - {mod.recommended_action.value}")
        
        # ‡πÅ‡∏™‡∏î‡∏á emergency actions ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ
        if plan.emergency_actions:
            logger.warning(f"üö® EMERGENCY: {', '.join(plan.emergency_actions[:2])}")
    
    def _create_safe_modification_plan(self) -> PortfolioModificationPlan:
        """üõ°Ô∏è ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç fallback ‡∏ó‡∏µ‡πà‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢"""
        return PortfolioModificationPlan(
            individual_modifications=[],
            group_modifications=[],
            emergency_actions=["SYSTEM_ERROR"],
            expected_portfolio_improvement=0.0,
            estimated_cost=0.0,
            estimated_time="unknown",
            success_probability=0.0,
            risk_level=0.0
        )
    
    # Additional helper methods would be implemented here...
    def _assess_modification_risk_individual(self, position: Any, action: ModifierAction, current_price: float) -> float:
        return 0.3  # Placeholder
    
    def _calculate_modifier_lot_size(self, position: Any, action: ModifierAction, current_price: float, account_info: Dict) -> float:
        return 0.01  # Placeholder
    
    def _calculate_modifier_price(self, position: Any, action: ModifierAction, current_price: float) -> Optional[float]:
        return None  # Placeholder
    
    def _calculate_individual_success_probability(self, position: Any, action: ModifierAction, problems: List[PositionProblem]) -> float:
        return 0.7  # Placeholder
    
    def _find_alternative_actions(self, position: Any, action: ModifierAction, problems: List[PositionProblem]) -> List[ModifierAction]:
        return [ModifierAction.WAIT_IMPROVE]  # Placeholder
    
    def _calculate_dynamic_parameters(self, position: Any, action: ModifierAction, current_price: float, account_info: Dict) -> Dict[str, Any]:
        return {}  # Placeholder
    
    def _estimate_action_timeframe(self, action: ModifierAction) -> str:
        return "immediate"  # Placeholder
    
    def _calculate_portfolio_improvement(self, individual: List, group: List, positions: List, account_info: Dict) -> float:
        """üí∞ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Å‡∏≥‡πÑ‡∏£‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏î‡∏´‡∏ß‡∏±‡∏á‡πÅ‡∏ö‡∏ö Dynamic ‡∏à‡∏≤‡∏Å Portfolio"""
        try:
            if not individual:
                return 0.0
            
            total_improvement = 0.0
            current_portfolio_profit = sum(getattr(pos, 'profit', 0) for pos in positions)
            
            for modification in individual:
                # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏à‡∏≤‡∏Å‡πÅ‡∏ï‡πà‡∏•‡∏∞ position
                position_profit = getattr(modification, 'expected_improvement', 0)
                success_prob = getattr(modification, 'success_probability', 0.7)
                
                # ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
                weighted_improvement = position_profit * success_prob
                total_improvement += weighted_improvement
            
            # ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå Portfolio
            balance = account_info.get('balance', 10000)
            equity = account_info.get('equity', balance)
            margin_level = account_info.get('margin_level', 1000)
            
            # ‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå
            if margin_level < 200:  # Margin ‡∏ï‡πà‡∏≥
                total_improvement *= 1.5  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
            elif margin_level > 1000:  # Margin ‡∏™‡∏π‡∏á
                total_improvement *= 0.8  # ‡∏•‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
            
            # ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏Ç‡∏ô‡∏≤‡∏î Portfolio
            if current_portfolio_profit < -100:  # Portfolio ‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡∏´‡∏ô‡∏±‡∏Å
                total_improvement *= 1.3  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
            elif current_portfolio_profit > 100:  # Portfolio ‡∏Å‡∏≥‡πÑ‡∏£
                total_improvement *= 0.7  # ‡∏•‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
            
            logger.debug(f"üí∞ PORTFOLIO IMPROVEMENT: Base={total_improvement:.2f}, "
                        f"Current P&L=${current_portfolio_profit:.2f}, "
                        f"Margin={margin_level:.0f}%")
            
            return max(0.0, total_improvement)
            
        except Exception as e:
            logger.error(f"‚ùå Error calculating portfolio improvement: {e}")
            return 0.0
    
    def _estimate_modification_cost(self, individual: List, group: List, current_price: float) -> float:
        return 50.0  # Placeholder
    
    def _estimate_completion_time(self, individual: List, group: List) -> str:
        return "5-10 minutes"  # Placeholder
    
    def _calculate_success_probability(self, individual: List, group: List, positions: List) -> float:
        """üéØ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏ö‡∏ö Dynamic"""
        try:
            if not individual:
                return 0.0
            
            total_probability = 0.0
            total_weight = 0.0
            
            for modification in individual:
                # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏à‡∏≤‡∏Å‡πÅ‡∏ï‡πà‡∏•‡∏∞ position
                base_prob = getattr(modification, 'success_probability', 0.7)
                priority = getattr(modification, 'priority', ModifierPriority.MEDIUM)
                
                # ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏° priority
                priority_weights = {
                    ModifierPriority.CRITICAL: 1.0,
                    ModifierPriority.HIGH: 0.9,
                    ModifierPriority.MEDIUM: 0.8,
                    ModifierPriority.LOW: 0.7,
                    ModifierPriority.MONITOR: 0.5
                }
                
                weight = priority_weights.get(priority, 0.8)
                
                # ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏° action type
                action = getattr(modification, 'recommended_action', ModifierAction.WAIT_IMPROVE)
                action_success_rates = {
                    ModifierAction.ADD_SUPPORT: 0.8,
                    ModifierAction.ADD_COUNTER: 0.7,
                    ModifierAction.PARTIAL_CLOSE: 0.9,
                    ModifierAction.HEDGE_PROTECT: 0.8,
                    ModifierAction.AVERAGE_DOWN: 0.6,
                    ModifierAction.AVERAGE_UP: 0.6,
                    ModifierAction.CONVERT_HEDGE: 0.7,
                    ModifierAction.WAIT_IMPROVE: 0.5,
                    ModifierAction.EMERGENCY_CLOSE: 0.9
                }
                
                action_rate = action_success_rates.get(action, 0.7)
                final_prob = base_prob * action_rate * weight
                
                total_probability += final_prob * weight
                total_weight += weight
            
            if total_weight > 0:
                average_probability = total_probability / total_weight
            else:
                average_probability = 0.0
            
            # ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô positions
            position_count = len(positions)
            if position_count > 5:  # ‡∏´‡∏•‡∏≤‡∏¢ positions
                average_probability *= 0.9  # ‡∏•‡∏î‡∏•‡∏á‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢
            elif position_count < 2:  # ‡∏ô‡πâ‡∏≠‡∏¢ positions
                average_probability *= 1.1  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢
            
            # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ñ‡πà‡∏≤ 0.0 - 1.0
            final_probability = max(0.0, min(1.0, average_probability))
            
            logger.debug(f"üéØ SUCCESS PROBABILITY: {final_probability:.1%} "
                        f"(from {len(individual)} modifications, {position_count} positions)")
            
            return final_probability
            
        except Exception as e:
            logger.error(f"‚ùå Error calculating success probability: {e}")
            return 0.5  # Default 50%
    
    def _assess_modification_risk(self, individual: List, group: List, account_info: Dict) -> float:
        return 0.2  # Placeholder

def create_dynamic_position_modifier(mt5_connection=None, symbol: str = "XAUUSD", hedge_pairing_closer=None, initial_balance: float = 10000.0) -> DynamicPositionModifier:
    """‡∏™‡∏£‡πâ‡∏≤‡∏á Dynamic Position Modifier"""
    return DynamicPositionModifier(mt5_connection, symbol, hedge_pairing_closer, initial_balance)

if __name__ == "__main__":
    # Test the system
    modifier = create_dynamic_position_modifier()
    logger.info("üîß Dynamic Position Modifier ready for testing")
