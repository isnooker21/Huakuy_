# -*- coding: utf-8 -*-
"""
Dynamic Position Modifier System
‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÅ‡∏ö‡∏ö Dynamic ‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ‡∏ó‡∏∏‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå
"""

import logging
from typing import Dict, List, Optional, Any, Tuple
from datetime import datetime, timedelta
from dataclasses import dataclass
from enum import Enum
import math

logger = logging.getLogger(__name__)

class PositionProblem(Enum):
    """‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Ç‡∏≠‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á"""
    HEAVY_LOSS = "heavy_loss"           # ‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡∏´‡∏ô‡∏±‡∏Å
    DISTANCE_TOO_FAR = "distance_far"   # ‡∏´‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏°‡∏≤‡∏Å
    TIME_TOO_LONG = "time_too_long"     # ‡∏ñ‡∏∑‡∏≠‡∏ô‡∏≤‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ
    MARGIN_PRESSURE = "margin_pressure" # ‡∏Å‡∏î‡∏î‡∏±‡∏ô margin
    IMBALANCE_CAUSE = "imbalance_cause" # ‡∏ó‡∏≥‡πÉ‡∏´‡πâ portfolio ‡πÑ‡∏°‡πà‡∏™‡∏°‡∏î‡∏∏‡∏•
    CORRELATION_BAD = "correlation_bad" # correlation ‡πÑ‡∏°‡πà‡∏î‡∏µ
    VOLATILITY_VICTIM = "volatility_victim" # ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡∏à‡∏≤‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô

class ModifierAction(Enum):
    """‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç"""
    ADD_SUPPORT = "add_support"         # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠
    ADD_COUNTER = "add_counter"         # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ï‡∏£‡∏á‡∏Ç‡πâ‡∏≤‡∏°
    PARTIAL_CLOSE = "partial_close"     # ‡∏õ‡∏¥‡∏î‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô
    HEDGE_PROTECT = "hedge_protect"     # ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏î‡πâ‡∏ß‡∏¢ hedge
    AVERAGE_DOWN = "average_down"       # ‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏•‡∏á
    AVERAGE_UP = "average_up"          # ‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏Ç‡∏∂‡πâ‡∏ô
    CONVERT_HEDGE = "convert_hedge"     # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô hedge
    WAIT_IMPROVE = "wait_improve"       # ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏î‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô
    EMERGENCY_CLOSE = "emergency_close" # ‡∏õ‡∏¥‡∏î‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô

class ModifierPriority(Enum):
    """‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç"""
    CRITICAL = "critical"     # ‡∏ß‡∏¥‡∏Å‡∏§‡∏ï - ‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
    HIGH = "high"            # ‡∏™‡∏π‡∏á - ‡∏Ñ‡∏ß‡∏£‡∏ó‡∏≥‡πÄ‡∏£‡πá‡∏ß
    MEDIUM = "medium"        # ‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á - ‡∏ó‡∏≥‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™
    LOW = "low"              # ‡∏ï‡πà‡∏≥ - ‡∏ó‡∏≥‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏∞‡∏î‡∏ß‡∏Å
    MONITOR = "monitor"      # ‡πÄ‡∏ù‡∏≤‡∏î‡∏π - ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥

@dataclass
class PositionModification:
    """‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á"""
    position_ticket: int
    problems: List[PositionProblem]
    recommended_action: ModifierAction
    priority: ModifierPriority
    expected_improvement: float
    risk_assessment: float
    suggested_lot_size: float
    suggested_price: Optional[float]
    time_frame: str
    success_probability: float
    alternative_actions: List[ModifierAction]
    dynamic_parameters: Dict[str, Any]

@dataclass
class PortfolioModificationPlan:
    """‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Portfolio"""
    individual_modifications: List[PositionModification]
    group_modifications: List[Dict[str, Any]]
    emergency_actions: List[str]
    expected_portfolio_improvement: float
    estimated_cost: float
    estimated_time: str
    success_probability: float
    risk_level: float

class DynamicPositionModifier:
    """‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÅ‡∏ö‡∏ö Dynamic"""
    
    def __init__(self, mt5_connection=None, symbol: str = "XAUUSD"):
        self.mt5_connection = mt5_connection
        self.symbol = symbol
        
        # üéØ Dynamic Thresholds - ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå
        self.heavy_loss_threshold = -200.0  # Dynamic based on balance
        self.distance_threshold = 100.0     # Dynamic based on volatility
        self.time_threshold_hours = 24      # Dynamic based on market condition
        self.margin_pressure_threshold = 200 # Dynamic based on account size
        
        # üìä Modifier Parameters
        self.max_support_positions = 3      # Dynamic limit
        self.max_hedge_ratio = 0.8         # Dynamic ratio
        self.emergency_loss_limit = -500.0  # Dynamic limit
        
        # üß† Learning Parameters
        self.success_history = {}
        self.failure_history = {}
        self.adaptation_rate = 0.1
        
        logger.info("üîß Dynamic Position Modifier initialized")
    
    def analyze_portfolio_modifications(self, positions: List[Any], account_info: Dict,
                                      current_price: float) -> PortfolioModificationPlan:
        """
        üéØ ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Portfolio ‡πÅ‡∏ö‡∏ö Dynamic
        """
        try:
            logger.info(f"üîç DYNAMIC PORTFOLIO MODIFICATION ANALYSIS: {len(positions)} positions")
            
            # 1. üîç Individual Position Analysis
            individual_modifications = []
            for position in positions:
                modification = self._analyze_individual_position(position, current_price, account_info)
                if modification:
                    individual_modifications.append(modification)
            
            # 2. ü§ù Group Modification Analysis
            group_modifications = self._analyze_group_modifications(positions, current_price, account_info)
            
            # 3. üö® Emergency Action Analysis
            emergency_actions = self._analyze_emergency_actions(positions, account_info)
            
            # 4. üìä Portfolio Impact Calculation
            portfolio_improvement = self._calculate_portfolio_improvement(
                individual_modifications, group_modifications, positions, account_info
            )
            
            # 5. üí∞ Cost Estimation
            estimated_cost = self._estimate_modification_cost(
                individual_modifications, group_modifications, current_price
            )
            
            # 6. ‚è∞ Time Estimation
            estimated_time = self._estimate_completion_time(
                individual_modifications, group_modifications
            )
            
            # 7. üéØ Success Probability
            success_probability = self._calculate_success_probability(
                individual_modifications, group_modifications, positions
            )
            
            # 8. ‚öñÔ∏è Risk Assessment
            risk_level = self._assess_modification_risk(
                individual_modifications, group_modifications, account_info
            )
            
            plan = PortfolioModificationPlan(
                individual_modifications=individual_modifications,
                group_modifications=group_modifications,
                emergency_actions=emergency_actions,
                expected_portfolio_improvement=portfolio_improvement,
                estimated_cost=estimated_cost,
                estimated_time=estimated_time,
                success_probability=success_probability,
                risk_level=risk_level
            )
            
            self._log_modification_plan(plan)
            return plan
            
        except Exception as e:
            logger.error(f"‚ùå Error analyzing portfolio modifications: {e}")
            return self._create_safe_modification_plan()
    
    def _analyze_individual_position(self, position: Any, current_price: float,
                                   account_info: Dict) -> Optional[PositionModification]:
        """üîç ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß"""
        try:
            ticket = getattr(position, 'ticket', 0)
            position_type = getattr(position, 'type', 0)
            open_price = getattr(position, 'price_open', current_price)
            profit = getattr(position, 'profit', 0)
            volume = getattr(position, 'volume', 0.01)
            open_time = getattr(position, 'time', datetime.now().timestamp())
            
            # 1. üîç Problem Detection
            problems = self._detect_position_problems(position, current_price, account_info)
            
            if not problems:
                return None  # No problems found
            
            # 2. üéØ Action Recommendation
            recommended_action = self._recommend_modifier_action(position, problems, current_price, account_info)
            
            # 3. üìä Priority Assessment
            priority = self._assess_modifier_priority(problems, profit, account_info)
            
            # 4. üìà Improvement Estimation
            expected_improvement = self._estimate_position_improvement(
                position, recommended_action, current_price, account_info
            )
            
            # 5. ‚öñÔ∏è Risk Assessment
            risk_assessment = self._assess_modification_risk_individual(
                position, recommended_action, current_price
            )
            
            # 6. üí∞ Lot Size Calculation
            suggested_lot_size = self._calculate_modifier_lot_size(
                position, recommended_action, current_price, account_info
            )
            
            # 7. üí∞ Price Calculation
            suggested_price = self._calculate_modifier_price(
                position, recommended_action, current_price
            )
            
            # 8. üéØ Success Probability
            success_probability = self._calculate_individual_success_probability(
                position, recommended_action, problems
            )
            
            # 9. üîÑ Alternative Actions
            alternative_actions = self._find_alternative_actions(
                position, recommended_action, problems
            )
            
            # 10. üîß Dynamic Parameters
            dynamic_parameters = self._calculate_dynamic_parameters(
                position, recommended_action, current_price, account_info
            )
            
            return PositionModification(
                position_ticket=ticket,
                problems=problems,
                recommended_action=recommended_action,
                priority=priority,
                expected_improvement=expected_improvement,
                risk_assessment=risk_assessment,
                suggested_lot_size=suggested_lot_size,
                suggested_price=suggested_price,
                time_frame=self._estimate_action_timeframe(recommended_action),
                success_probability=success_probability,
                alternative_actions=alternative_actions,
                dynamic_parameters=dynamic_parameters
            )
            
        except Exception as e:
            logger.error(f"‚ùå Error analyzing individual position: {e}")
            return None
    
    def _detect_position_problems(self, position: Any, current_price: float,
                                account_info: Dict) -> List[PositionProblem]:
        """üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏´‡∏≤‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Ç‡∏≠‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á"""
        problems = []
        
        try:
            profit = getattr(position, 'profit', 0)
            open_price = getattr(position, 'price_open', current_price)
            position_type = getattr(position, 'type', 0)
            open_time = getattr(position, 'time', datetime.now().timestamp())
            balance = account_info.get('balance', 10000)
            
            # 1. üí∏ Smart Loss Detection - ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏° Lot Size
            lot_size = getattr(position, 'volume', 0.01)
            
            # Dynamic loss threshold based on lot size and balance
            base_loss_per_lot = -50.0  # -$50 per 0.01 lot
            lot_adjusted_loss = base_loss_per_lot * (lot_size / 0.01)
            balance_adjusted_loss = balance * -0.015  # 1.5% of balance
            
            # Use the more restrictive threshold
            smart_loss_threshold = max(lot_adjusted_loss, balance_adjusted_loss, self.heavy_loss_threshold)
            
            if profit < smart_loss_threshold:
                problems.append(PositionProblem.HEAVY_LOSS)
                logger.debug(f"üí∏ Smart Loss: ${profit:.2f} < ${smart_loss_threshold:.2f} (Lot:{lot_size}, Balance%:{balance_adjusted_loss:.2f})")
            
            # 2. Distance Detection
            distance = abs(current_price - open_price)
            # Dynamic distance threshold based on current volatility
            volatility_factor = self._calculate_current_volatility(current_price)
            dynamic_distance_threshold = self.distance_threshold * (1 + volatility_factor)
            
            if distance > dynamic_distance_threshold:
                problems.append(PositionProblem.DISTANCE_TOO_FAR)
            
            # 3. ‚è∞ Smart Time Detection - ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô‡πÅ‡∏•‡∏∞‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á
            current_time = datetime.now().timestamp()
            hours_held = (current_time - open_time) / 3600
            
            # Calculate how much price moved during holding period
            price_movement = abs(current_price - open_price)
            volatility_factor = self._calculate_current_volatility(current_price)
            
            # Dynamic time threshold based on price movement and volatility
            # ‡∏ñ‡πâ‡∏≤‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß‡∏°‡∏≤‡∏Å = ‡∏ï‡∏•‡∏≤‡∏î‡πÄ‡∏£‡πá‡∏ß = ‡∏•‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏¢‡∏≠‡∏°‡πÉ‡∏´‡πâ‡∏ñ‡∏∑‡∏≠
            # ‡∏ñ‡πâ‡∏≤‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß‡∏ô‡πâ‡∏≠‡∏¢ = ‡∏ï‡∏•‡∏≤‡∏î‡πÄ‡∏á‡∏µ‡∏¢‡∏ö = ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏¢‡∏≠‡∏°‡πÉ‡∏´‡πâ‡∏ñ‡∏∑‡∏≠
            base_time = self.time_threshold_hours
            
            if price_movement > 200:  # ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß‡∏°‡∏≤‡∏Å (>200 points)
                smart_time_threshold = base_time * 0.5  # ‡∏•‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏•‡∏á 50%
                reason = "high_volatility"
            elif price_movement > 100:  # ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á
                smart_time_threshold = base_time * 0.75  # ‡∏•‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏•‡∏á 25%
                reason = "medium_volatility"
            elif price_movement < 30:  # ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß‡∏ô‡πâ‡∏≠‡∏¢ (<30 points)
                smart_time_threshold = base_time * 2.0  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏Ç‡∏∂‡πâ‡∏ô 100%
                reason = "low_volatility"
            else:
                smart_time_threshold = base_time
                reason = "normal_volatility"
            
            if hours_held > smart_time_threshold:
                problems.append(PositionProblem.TIME_TOO_LONG)
                logger.debug(f"‚è∞ Smart Time: {hours_held:.1f}h > {smart_time_threshold:.1f}h (Movement:{price_movement:.1f}, {reason})")
            
            # 4. Margin Pressure Detection
            margin_level = account_info.get('margin_level', 1000)
            if margin_level < self.margin_pressure_threshold:
                problems.append(PositionProblem.MARGIN_PRESSURE)
            
            # 5. Volatility Victim Detection
            if self._is_volatility_victim(position, current_price):
                problems.append(PositionProblem.VOLATILITY_VICTIM)
                
        except Exception as e:
            logger.error(f"‚ùå Error detecting position problems: {e}")
            
        return problems
    
    def _recommend_modifier_action(self, position: Any, problems: List[PositionProblem],
                                 current_price: float, account_info: Dict) -> ModifierAction:
        """üéØ ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç"""
        try:
            profit = getattr(position, 'profit', 0)
            balance = account_info.get('balance', 10000)
            margin_level = account_info.get('margin_level', 1000)
            
            # Critical situations
            if profit < balance * -0.05:  # 5% of balance loss
                return ModifierAction.EMERGENCY_CLOSE
            
            if margin_level < 120:
                return ModifierAction.PARTIAL_CLOSE
            
            # Problem-based recommendations
            if PositionProblem.HEAVY_LOSS in problems:
                if profit < balance * -0.03:
                    return ModifierAction.ADD_SUPPORT
                else:
                    return ModifierAction.AVERAGE_DOWN
            
            if PositionProblem.DISTANCE_TOO_FAR in problems:
                return ModifierAction.ADD_COUNTER
            
            if PositionProblem.TIME_TOO_LONG in problems:
                if profit < 0:
                    return ModifierAction.ADD_SUPPORT
                else:
                    return ModifierAction.PARTIAL_CLOSE
            
            if PositionProblem.MARGIN_PRESSURE in problems:
                return ModifierAction.PARTIAL_CLOSE
            
            if PositionProblem.VOLATILITY_VICTIM in problems:
                return ModifierAction.HEDGE_PROTECT
            
            # Default action
            return ModifierAction.WAIT_IMPROVE
            
        except Exception as e:
            logger.error(f"‚ùå Error recommending modifier action: {e}")
            return ModifierAction.WAIT_IMPROVE
    
    def _assess_modifier_priority(self, problems: List[PositionProblem], profit: float,
                                account_info: Dict) -> ModifierPriority:
        """üìä ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç"""
        try:
            balance = account_info.get('balance', 10000)
            margin_level = account_info.get('margin_level', 1000)
            
            # Critical priorities
            if profit < balance * -0.05 or margin_level < 120:
                return ModifierPriority.CRITICAL
            
            # High priorities
            if (PositionProblem.HEAVY_LOSS in problems or 
                PositionProblem.MARGIN_PRESSURE in problems):
                return ModifierPriority.HIGH
            
            # Medium priorities
            if (PositionProblem.DISTANCE_TOO_FAR in problems or 
                PositionProblem.TIME_TOO_LONG in problems):
                return ModifierPriority.MEDIUM
            
            # Low priorities
            if PositionProblem.VOLATILITY_VICTIM in problems:
                return ModifierPriority.LOW
            
            return ModifierPriority.MONITOR
            
        except Exception as e:
            logger.error(f"‚ùå Error assessing modifier priority: {e}")
            return ModifierPriority.MONITOR
    
    def _analyze_group_modifications(self, positions: List[Any], current_price: float,
                                   account_info: Dict) -> List[Dict[str, Any]]:
        """ü§ù ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏ö‡∏ö‡∏Å‡∏•‡∏∏‡πà‡∏°"""
        group_modifications = []
        
        try:
            # 1. Balance Correction Groups
            buy_positions = [p for p in positions if getattr(p, 'type', 0) == 0]
            sell_positions = [p for p in positions if getattr(p, 'type', 1) == 1]
            
            if abs(len(buy_positions) - len(sell_positions)) > 5:
                group_modifications.append({
                    'type': 'BALANCE_CORRECTION',
                    'description': f'Balance {len(buy_positions)}B vs {len(sell_positions)}S',
                    'action': 'ADD_COUNTER_POSITIONS',
                    'priority': 'HIGH',
                    'estimated_positions': abs(len(buy_positions) - len(sell_positions)) // 2
                })
            
            # 2. Heavy Loss Recovery Groups
            heavy_loss_positions = [p for p in positions if getattr(p, 'profit', 0) < -200]
            if len(heavy_loss_positions) > 3:
                group_modifications.append({
                    'type': 'HEAVY_LOSS_RECOVERY',
                    'description': f'{len(heavy_loss_positions)} positions with heavy losses',
                    'action': 'COORDINATED_SUPPORT',
                    'priority': 'CRITICAL',
                    'estimated_support_lot': len(heavy_loss_positions) * 0.01
                })
            
            # 3. Distance Clustering
            far_positions = []
            for pos in positions:
                distance = abs(current_price - getattr(pos, 'price_open', current_price))
                if distance > 200:  # 200 points away
                    far_positions.append(pos)
            
            if len(far_positions) > 2:
                group_modifications.append({
                    'type': 'DISTANCE_CLUSTERING',
                    'description': f'{len(far_positions)} positions too far from current price',
                    'action': 'CLUSTER_SUPPORT',
                    'priority': 'MEDIUM',
                    'estimated_bridge_positions': len(far_positions)
                })
                
        except Exception as e:
            logger.error(f"‚ùå Error analyzing group modifications: {e}")
            
        return group_modifications
    
    def _analyze_emergency_actions(self, positions: List[Any], account_info: Dict) -> List[str]:
        """üö® ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô"""
        emergency_actions = []
        
        try:
            balance = account_info.get('balance', 10000)
            equity = account_info.get('equity', balance)
            margin_level = account_info.get('margin_level', 1000)
            
            # Margin Call Risk - ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ positions
            if len(positions) > 0 and margin_level > 0 and margin_level < 100:
                emergency_actions.append("MARGIN_CALL_PREVENTION")
            
            # Equity Protection
            if equity < balance * 0.8:
                emergency_actions.append("EQUITY_PROTECTION")
            
            # Heavy Loss Positions
            total_loss = sum(getattr(pos, 'profit', 0) for pos in positions if getattr(pos, 'profit', 0) < 0)
            if total_loss < balance * -0.1:  # 10% total loss
                emergency_actions.append("LOSS_LIMITATION")
            
            # Position Count Limit
            if len(positions) > 25:
                emergency_actions.append("POSITION_COUNT_CONTROL")
                
        except Exception as e:
            logger.error(f"‚ùå Error analyzing emergency actions: {e}")
            
        return emergency_actions
    
    def _calculate_current_volatility(self, current_price: float) -> float:
        """üìä ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô"""
        # Simplified volatility calculation
        # In real implementation, this would use historical price data
        return 0.5  # Default moderate volatility
    
    def _assess_market_speed(self) -> float:
        """‚ö° ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏≠‡∏á‡∏ï‡∏•‡∏≤‡∏î"""
        # Simplified market speed assessment
        # In real implementation, this would analyze recent price movements
        return 0.3  # Default moderate speed
    
    def _is_volatility_victim(self, position: Any, current_price: float) -> bool:
        """üìä ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡∏à‡∏≤‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"""
        try:
            profit = getattr(position, 'profit', 0)
            open_price = getattr(position, 'price_open', current_price)
            
            # Simple check: if position is losing and price moved significantly
            distance = abs(current_price - open_price)
            return profit < 0 and distance > 100
            
        except Exception as e:
            logger.error(f"‚ùå Error checking volatility victim: {e}")
            return False
    
    def _estimate_position_improvement(self, position: Any, action: ModifierAction,
                                     current_price: float, account_info: Dict) -> float:
        """üìà ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á"""
        try:
            current_profit = getattr(position, 'profit', 0)
            
            # Improvement estimates based on action type
            improvement_factors = {
                ModifierAction.ADD_SUPPORT: 0.6,
                ModifierAction.ADD_COUNTER: 0.4,
                ModifierAction.PARTIAL_CLOSE: 0.3,
                ModifierAction.HEDGE_PROTECT: 0.5,
                ModifierAction.AVERAGE_DOWN: 0.7,
                ModifierAction.AVERAGE_UP: 0.7,
                ModifierAction.CONVERT_HEDGE: 0.4,
                ModifierAction.WAIT_IMPROVE: 0.1,
                ModifierAction.EMERGENCY_CLOSE: 0.0
            }
            
            factor = improvement_factors.get(action, 0.2)
            
            # Calculate expected improvement
            if current_profit < 0:
                expected_improvement = abs(current_profit) * factor
            else:
                expected_improvement = current_profit * factor * 0.5
                
            return expected_improvement
            
        except Exception as e:
            logger.error(f"‚ùå Error estimating position improvement: {e}")
            return 0.0
    
    def _log_modification_plan(self, plan: PortfolioModificationPlan):
        """üìä ‡πÅ‡∏™‡∏î‡∏á log ‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏ö‡∏ö‡∏™‡∏±‡πâ‡∏ô‡∏Å‡∏£‡∏∞‡∏ä‡∏±‡∏ö"""
        if not plan.individual_modifications and not plan.group_modifications:
            logger.info("üîß No modifications needed")
            return
        
        # Log ‡πÅ‡∏ö‡∏ö‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡πÄ‡∏î‡∏µ‡∏¢‡∏ß ‡∏™‡∏±‡πâ‡∏ô‡∏Å‡∏£‡∏∞‡∏ä‡∏±‡∏ö
        logger.info(f"üîß MODIFY: {len(plan.individual_modifications)}pos | "
                   f"Profit:+${plan.expected_portfolio_improvement:.0f} | "
                   f"Success:{plan.success_probability:.0%}")
        
        # ‡πÅ‡∏™‡∏î‡∏á high priority ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
        critical_mods = [mod for mod in plan.individual_modifications 
                        if mod.priority == ModifierPriority.CRITICAL]
        
        if critical_mods:
            for mod in critical_mods[:2]:  # ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏Ñ‡πà 2 ‡∏≠‡∏±‡∏ô‡πÅ‡∏£‡∏Å
                logger.warning(f"üö® CRITICAL: Ticket {mod.position_ticket} - {mod.recommended_action.value}")
        
        # ‡πÅ‡∏™‡∏î‡∏á emergency actions ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ
        if plan.emergency_actions:
            logger.warning(f"üö® EMERGENCY: {', '.join(plan.emergency_actions[:2])}")
    
    def _create_safe_modification_plan(self) -> PortfolioModificationPlan:
        """üõ°Ô∏è ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç fallback ‡∏ó‡∏µ‡πà‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢"""
        return PortfolioModificationPlan(
            individual_modifications=[],
            group_modifications=[],
            emergency_actions=["SYSTEM_ERROR"],
            expected_portfolio_improvement=0.0,
            estimated_cost=0.0,
            estimated_time="unknown",
            success_probability=0.0,
            risk_level=0.0
        )
    
    # Additional helper methods would be implemented here...
    def _assess_modification_risk_individual(self, position: Any, action: ModifierAction, current_price: float) -> float:
        return 0.3  # Placeholder
    
    def _calculate_modifier_lot_size(self, position: Any, action: ModifierAction, current_price: float, account_info: Dict) -> float:
        return 0.01  # Placeholder
    
    def _calculate_modifier_price(self, position: Any, action: ModifierAction, current_price: float) -> Optional[float]:
        return None  # Placeholder
    
    def _calculate_individual_success_probability(self, position: Any, action: ModifierAction, problems: List[PositionProblem]) -> float:
        return 0.7  # Placeholder
    
    def _find_alternative_actions(self, position: Any, action: ModifierAction, problems: List[PositionProblem]) -> List[ModifierAction]:
        return [ModifierAction.WAIT_IMPROVE]  # Placeholder
    
    def _calculate_dynamic_parameters(self, position: Any, action: ModifierAction, current_price: float, account_info: Dict) -> Dict[str, Any]:
        return {}  # Placeholder
    
    def _estimate_action_timeframe(self, action: ModifierAction) -> str:
        return "immediate"  # Placeholder
    
    def _calculate_portfolio_improvement(self, individual: List, group: List, positions: List, account_info: Dict) -> float:
        return 100.0  # Placeholder
    
    def _estimate_modification_cost(self, individual: List, group: List, current_price: float) -> float:
        return 50.0  # Placeholder
    
    def _estimate_completion_time(self, individual: List, group: List) -> str:
        return "5-10 minutes"  # Placeholder
    
    def _calculate_success_probability(self, individual: List, group: List, positions: List) -> float:
        return 0.75  # Placeholder
    
    def _assess_modification_risk(self, individual: List, group: List, account_info: Dict) -> float:
        return 0.2  # Placeholder

def create_dynamic_position_modifier(mt5_connection=None, symbol: str = "XAUUSD") -> DynamicPositionModifier:
    """‡∏™‡∏£‡πâ‡∏≤‡∏á Dynamic Position Modifier"""
    return DynamicPositionModifier(mt5_connection, symbol)

if __name__ == "__main__":
    # Test the system
    modifier = create_dynamic_position_modifier()
    logger.info("üîß Dynamic Position Modifier ready for testing")
