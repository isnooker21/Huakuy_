# -*- coding: utf-8 -*-
"""
Main Trading System
‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏ó‡∏£‡∏î‡∏´‡∏•‡∏±‡∏Å‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå
"""

import logging
import time
import threading
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any

# Import modules
from mt5_connection import MT5Connection
from calculations import Position, PercentageCalculator, LotSizeCalculator
from trading_conditions import TradingConditions, Signal, CandleData
from order_management import OrderManager
from portfolio_manager import PortfolioManager
from gui import TradingGUI

# üéØ Zone-Based Position Management System
from zone_position_manager import ZonePositionManager, create_zone_position_manager

# üß† Intelligent Position Management System
from intelligent_position_manager import IntelligentPositionManager, create_intelligent_position_manager
from dynamic_7d_smart_closer import create_dynamic_7d_smart_closer

# üéØ Position Purpose Tracking System
from position_purpose_tracker import create_position_purpose_tracker

# üìä Market Analysis Systems
from market_analysis import MultiTimeframeAnalyzer, MarketSessionAnalyzer
from price_action_analyzer import PriceActionAnalyzer

# Configure logging - ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏ó‡∏£‡∏î‡πÅ‡∏•‡∏∞‡∏õ‡∏¥‡∏î‡∏Å‡∏≥‡πÑ‡∏£
logging.basicConfig(
    level=logging.INFO,  # ‡∏•‡∏î‡πÄ‡∏õ‡πá‡∏ô INFO ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î noise
    format='%(asctime)s - %(levelname)s - %(message)s',  # ‡∏•‡∏ö module name
    handlers=[
        logging.FileHandler('trading_system.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)

# ‡∏õ‡∏¥‡∏î debug logs ‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡∏≠‡∏∑‡πà‡∏ô‡πÜ
logging.getLogger('mt5_connection').setLevel(logging.WARNING)
logging.getLogger('order_management').setLevel(logging.WARNING)
logging.getLogger('trading_conditions').setLevel(logging.INFO)
logging.getLogger('portfolio_manager').setLevel(logging.WARNING)
logging.getLogger('calculations').setLevel(logging.WARNING)
logging.getLogger('signal_manager').setLevel(logging.INFO)
logging.getLogger('smart_gap_filler').setLevel(logging.WARNING)
logging.getLogger('force_trading_mode').setLevel(logging.WARNING)
logging.getLogger('advanced_breakout_recovery').setLevel(logging.WARNING)
logging.getLogger('price_zone_analysis').setLevel(logging.WARNING)
logging.getLogger('zone_rebalancer').setLevel(logging.WARNING)
logging.getLogger('market_analysis').setLevel(logging.WARNING)

# üöÄ PERFORMANCE-OPTIMIZED LOGGING
logging.getLogger('zone_position_manager').setLevel(logging.INFO)  # ‡πÄ‡∏õ‡∏¥‡∏î Zone Analysis logs
logging.getLogger('zone_manager').setLevel(logging.INFO)  # ‡πÄ‡∏õ‡∏¥‡∏î Zone Health calculation logs
logging.getLogger('zone_analyzer').setLevel(logging.WARNING)  # ‡∏õ‡∏¥‡∏î INFO logs
logging.getLogger('zone_coordinator').setLevel(logging.WARNING)  # ‡∏õ‡∏¥‡∏î INFO logs
logging.getLogger('intelligent_position_manager').setLevel(logging.WARNING)  # ‡∏õ‡∏¥‡∏î DEBUG logs ‡∏ó‡∏µ‡πà‡πÄ‡∏¢‡∏≠‡∏∞‡∏°‡∏≤‡∏Å
logging.getLogger('position_purpose_tracker').setLevel(logging.INFO)  # ‡πÄ‡∏õ‡∏¥‡∏î Purpose Analysis logs
logging.getLogger('dynamic_7d_smart_closer').setLevel(logging.INFO)  # ‡πÄ‡∏õ‡∏¥‡∏î Purpose-Aware Closing logs
logging.getLogger('__main__').setLevel(logging.INFO)

logger = logging.getLogger(__name__)

class TradingSystem:
    """‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏ó‡∏£‡∏î‡∏´‡∏•‡∏±‡∏Å‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå"""
    
    def __init__(self, initial_balance: float = 10000.0, symbol: str = "XAUUSD"):
        """
        ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏ó‡∏£‡∏î
        
        Args:
            initial_balance: ‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏∏‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
            symbol: ‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î (default: XAUUSD ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏≠‡∏á‡∏Ñ‡∏≥)
        """
        self.base_symbol = symbol
        self.actual_symbol = None  # ‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå‡∏à‡∏£‡∏¥‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡πÇ‡∏ö‡∏£‡∏Å‡πÄ‡∏Å‡∏≠‡∏£‡πå
        self.initial_balance = initial_balance
        
        # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô components
        self.mt5_connection = MT5Connection()
        self.order_manager = OrderManager(self.mt5_connection)
        self.portfolio_manager = PortfolioManager(self.order_manager, initial_balance)
        self.trading_conditions = TradingConditions()
        
        # üéØ Zone-Based Position Management System (‡∏à‡∏∞‡∏ñ‡∏π‡∏Å initialize ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å MT5 connect)
        self.zone_position_manager = None
        
        # üß† Intelligent Systems (‡∏à‡∏∞‡∏ñ‡∏π‡∏Å initialize ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å MT5 connect)
        self.intelligent_position_manager = None
        self.dynamic_7d_smart_closer = None
        
        # üéØ Purpose Tracking System
        self.position_purpose_tracker = None
        
        # üìä Market Analysis Systems
        self.market_analyzer = None
        self.price_action_analyzer = None
        
        # ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
        self.is_running = False
        self.trading_thread = None
        self.last_candle_time = None
        self.is_trading_started_from_gui = False  # ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å GUI ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
        
        # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏•‡∏≤‡∏î
        self.current_prices = {}
        self.volume_history = []
        self.price_history = []
        
        # GUI
        self.gui = None
        
        # üîí Position Locking - ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î‡∏ã‡πâ‡∏≥
        self.closing_positions = set()  # ‡πÄ‡∏Å‡πá‡∏ö tickets ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà
        self.closing_lock = threading.Lock()
        
        # Initialize trading system
        
    def initialize_system(self) -> bool:
        """
        ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        
        Returns:
            bool: ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        """
        try:
            # Starting system initialization
            
            # ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MT5
            if not self.mt5_connection.connect_mt5():
                logger.error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MT5 ‡πÑ‡∏î‡πâ")
                return False
                
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏´‡∏≤‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå‡∏ó‡∏≠‡∏á‡∏Ñ‡∏≥‡πÇ‡∏î‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
            logger.info("üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏´‡∏≤‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå‡∏ó‡∏≠‡∏á‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°...")
            self.actual_symbol = self.mt5_connection.auto_detect_gold_symbol()
            
            if not self.actual_symbol:
                logger.error("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå‡∏ó‡∏≠‡∏á‡∏Ñ‡∏≥‡πÉ‡∏ô‡πÇ‡∏ö‡∏£‡∏Å‡πÄ‡∏Å‡∏≠‡∏£‡πå‡∏ô‡∏µ‡πâ")
                return False
                    
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå
            symbol_info = self.mt5_connection.get_symbol_info(self.actual_symbol)
            if not symbol_info:
                logger.error(f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå {self.actual_symbol}")
                return False
                
            logger.info(f"‡πÉ‡∏ä‡πâ‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå: {self.base_symbol} -> {self.actual_symbol}")
            logger.info(f"‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå: {symbol_info}")
            
            # ‡∏™‡πà‡∏á symbol ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á portfolio_manager
            self.portfolio_manager.current_symbol = self.actual_symbol
            
            # ‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Position
            positions = self.order_manager.sync_positions_from_mt5()
            logger.info(f"‡∏û‡∏ö Position ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà: {len(positions)} ‡∏ï‡∏±‡∏ß")
            
            # ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
            self.load_initial_market_data()
            
            # üìä Initialize Market Analysis Systems
            logger.info("üìä Initializing Market Analysis Systems...")
            self.market_analyzer = MultiTimeframeAnalyzer(symbol=self.actual_symbol)
            self.price_action_analyzer = PriceActionAnalyzer(
                mt5_connection=self.mt5_connection,
                symbol=self.actual_symbol
            )
            
            # üéØ Initialize Position Purpose Tracking System
            logger.info("üéØ Initializing Position Purpose Tracking System...")
            self.position_purpose_tracker = create_position_purpose_tracker(
                market_analyzer=self.market_analyzer,
                price_action_analyzer=self.price_action_analyzer
            )
            
            # üß† Initialize Intelligent Position Management System
            logger.info("üß† Initializing Intelligent Position Management System...")
            self.intelligent_position_manager = create_intelligent_position_manager(
                mt5_connection=self.mt5_connection,
                order_manager=self.order_manager,
                symbol=self.actual_symbol
            )
            
            # üöÄ Initialize Dynamic 7D Smart Closer with Purpose Intelligence
            logger.info("üöÄ Initializing Dynamic 7D Smart Closer...")
            self.dynamic_7d_smart_closer = create_dynamic_7d_smart_closer(
                intelligent_manager=self.intelligent_position_manager,
                purpose_tracker=self.position_purpose_tracker,
                market_analyzer=self.market_analyzer,
                price_action_analyzer=self.price_action_analyzer
            )
            
            # üéØ Initialize Zone-Based Position Management System
            logger.info("üéØ Initializing Zone-Based Position Management System...")
            self.zone_position_manager = create_zone_position_manager(
                mt5_connection=self.mt5_connection,
                order_manager=self.order_manager,
                zone_size_pips=30.0,  # 30 pips per zone
                symbol=self.actual_symbol  # ‡πÉ‡∏ä‡πâ symbol ‡∏ó‡∏µ‡πà auto-detect ‡πÑ‡∏î‡πâ
            )
            
            # üîó ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Purpose-Aware Systems ‡∏Å‡∏±‡∏ö Trading Conditions
            logger.info("üîó Connecting Purpose-Aware Intelligence to Trading Conditions...")
            self.trading_conditions.intelligent_position_manager = self.intelligent_position_manager
            self.trading_conditions.position_purpose_tracker = self.position_purpose_tracker
            
            # ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Portfolio Manager
            if hasattr(self.portfolio_manager, 'position_manager'):
                self.portfolio_manager.position_manager = self.zone_position_manager
                logger.info("‚úÖ Zone-Based System integrated with Portfolio Manager")
            else:
                logger.warning("‚ö†Ô∏è Portfolio Manager doesn't support Zone integration - using direct integration")
            
            logger.info("‚úÖ SYSTEM READY")
            return True
            
        except Exception as e:
            logger.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö: {str(e)}")
            return False
            
    def load_initial_market_data(self):
        """‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏•‡∏≤‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô"""
        try:
            # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏Ñ‡∏≤ 100 ‡πÅ‡∏ó‡πà‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
            import MetaTrader5 as mt5
            rates = self.mt5_connection.get_market_data(
                self.actual_symbol, mt5.TIMEFRAME_M1, 100
            )
            
            if rates:
                self.price_history = [rate['close'] for rate in rates]
                self.volume_history = [rate['tick_volume'] for rate in rates]
                
                # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
                latest_rate = rates[-1]
                self.current_prices[self.actual_symbol] = latest_rate['close']
                
                # Market data loaded successfully
            else:
                logger.warning("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏•‡∏≤‡∏î‡πÑ‡∏î‡πâ")
                
        except Exception as e:
            logger.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏•‡∏≤‡∏î: {str(e)}")
            
    def start_trading(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î"""
        try:
            if self.is_running:
                logger.warning("‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏ó‡∏£‡∏î‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß")
                return
                
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÅ‡∏ö‡∏ö‡πÄ‡∏ö‡∏≤
            if not self.mt5_connection.is_connected:
                logger.error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MT5 ‡πÑ‡∏î‡πâ")
                return
                
            self.is_running = True
            self.is_trading_started_from_gui = True
            
            # ‡πÄ‡∏£‡∏¥‡πà‡∏° trading thread ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ (‡πÑ‡∏°‡πà block GUI)
            self.trading_thread = threading.Thread(target=self.trading_loop, daemon=True)
            self.trading_thread.start()
            
            logger.info("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡πÅ‡∏•‡πâ‡∏ß (‡∏à‡∏≤‡∏Å GUI)")
            return True  # ‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
            
        except Exception as e:
            logger.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏ó‡∏£‡∏î: {str(e)}")
            self.is_running = False
            return False
            
    def stop_trading(self):
        """‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î"""
        try:
            self.is_running = False
            self.is_trading_started_from_gui = False
            
            if self.trading_thread and self.trading_thread.is_alive():
                self.trading_thread.join(timeout=5)
                
            logger.info("‚èπÔ∏è ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡πÅ‡∏•‡πâ‡∏ß (‡∏à‡∏≤‡∏Å GUI)")
            
        except Exception as e:
            logger.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏ó‡∏£‡∏î: {str(e)}")
            
    def trading_loop(self):
        """Loop ‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î"""
        logger.info("‡πÄ‡∏£‡∏¥‡πà‡∏° Trading Loop")
        
        # ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà
        loop_count = 0
        last_daily_reset = None
        
        while self.is_running:
            try:
                loop_count += 1
                
                # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏•‡∏≤‡∏î (‡∏ó‡∏∏‡∏Å‡∏£‡∏≠‡∏ö)
                self.update_market_data()
                
                # ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÄ‡∏°‡∏ï‡∏£‡∏¥‡∏Å‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô (‡∏ó‡∏∏‡∏Å 1 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á)
                current_hour = datetime.now().hour
                if last_daily_reset is None or last_daily_reset != current_hour:
                    self.portfolio_manager.reset_daily_metrics()
                    last_daily_reset = current_hour
                
                # üöÄ HIGH-PERFORMANCE TRADING LOOP - Optimized Intervals
                account_info = self.mt5_connection.get_account_info()
                if not account_info:
                    logger.warning("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÑ‡∏î‡πâ")
                    time.sleep(5)  # ‡∏•‡∏î‡∏à‡∏≤‡∏Å 10 ‡πÄ‡∏õ‡πá‡∏ô 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
                    continue
                    
                portfolio_state = self.portfolio_manager.analyze_portfolio_state(account_info)
                
                # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î Position (‡∏ó‡∏∏‡∏Å‡∏£‡∏≠‡∏ö - 1 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)
                self.check_exit_conditions(portfolio_state)
                
                # üéØ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏ó‡∏£‡∏î‡πÉ‡∏´‡∏°‡πà (‡∏ó‡∏∏‡∏Å 3 ‡∏£‡∏≠‡∏ö - 3 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)
                if loop_count % 3 == 0:
                    self.check_entry_conditions(portfolio_state)
                
                # ‚ö° ‡∏£‡∏≠ 1 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ (‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô‡πÅ‡∏ï‡πà‡πÄ‡∏™‡∏ñ‡∏µ‡∏¢‡∏£)
                time.sleep(1)
                
            except Exception as e:
                logger.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô Trading Loop: {str(e)}")
                
                # üõ°Ô∏è SMART ERROR RECOVERY
                if "connection" in str(e).lower() or "timeout" in str(e).lower():
                    logger.warning("üîÑ ‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ - ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà...")
                    if self.mt5_connection.attempt_reconnection():
                        logger.info("‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                        time.sleep(2)  # ‡∏£‡∏≠‡∏™‡∏±‡πâ‡∏ô‡πÜ ‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà
                    else:
                        logger.error("‚ùå ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à - ‡∏£‡∏≠ 30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ")
                        time.sleep(30)
                else:
                    time.sleep(10)  # ‡∏£‡∏≠‡∏õ‡∏Å‡∏ï‡∏¥‡πÄ‡∏°‡∏∑‡πà‡∏≠ error ‡∏≠‡∏∑‡πà‡∏ô‡πÜ
                
        logger.info("‡∏à‡∏ö Trading Loop")
        
    def update_market_data(self):
        """‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏•‡∏≤‡∏î"""
        try:
            import MetaTrader5 as mt5
            
            # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
            rates = self.mt5_connection.get_market_data(
                self.actual_symbol, mt5.TIMEFRAME_M1, 1
            )
            
            if rates and len(rates) > 0:
                latest_rate = rates[0]
                current_time = datetime.fromtimestamp(latest_rate['time'])
                
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                if self.last_candle_time is None or current_time > self.last_candle_time:
                    self.last_candle_time = current_time
                    
                    # ‡∏™‡∏£‡πâ‡∏≤‡∏á CandleData
                    candle = CandleData(
                        open=latest_rate['open'],
                        high=latest_rate['high'],
                        low=latest_rate['low'],
                        close=latest_rate['close'],
                        volume=latest_rate['tick_volume'],
                        timestamp=current_time
                    )
                    
                    # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥
                    self.price_history.append(candle.close)
                    self.volume_history.append(candle.volume)
                    
                    # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ç‡∏ô‡∏≤‡∏î‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥
                    if len(self.price_history) > 100:
                        self.price_history = self.price_history[-100:]
                        self.volume_history = self.volume_history[-100:]
                        
                    # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
                    self.current_prices[self.actual_symbol] = candle.close
                    
                    # ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô‡πÉ‡∏´‡∏°‡πà
                    self.process_new_candle(candle)
                    
        except Exception as e:
            logger.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏•‡∏≤‡∏î: {str(e)}")
            
    # üóëÔ∏è DEPRECATED - Signal generation moved to SignalManager
    def process_new_candle(self, candle: CandleData):
        """‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô‡πÉ‡∏´‡∏°‡πà (‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÑ‡∏ß‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ logging)"""
        try:
            # ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏¥‡∏î
            logger.info(f"üìä PRICE: {candle.close}")
                
            # Signal generation ‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏õ SignalManager ‡πÅ‡∏•‡πâ‡∏ß
            
        except Exception as e:
            logger.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô: {str(e)}")
            
    def calculate_signal_strength(self, candle: CandleData) -> float:
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÅ‡∏£‡∏á‡∏Ç‡∏≠‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì"""
        try:
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÅ‡∏£‡∏á‡∏à‡∏≤‡∏Å‡∏Ç‡∏ô‡∏≤‡∏î‡∏ï‡∏±‡∏ß‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô
            body_strength = candle.body_size_percentage * 10  # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô 0-100
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÅ‡∏£‡∏á‡∏à‡∏≤‡∏Å Volume
            volume_strength = 0.0
            if len(self.volume_history) > 1:
                avg_volume = sum(self.volume_history[:-1]) / len(self.volume_history[:-1])
                if avg_volume > 0:
                    volume_ratio = candle.volume / avg_volume
                    volume_strength = min(100, volume_ratio * 50)
                    
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÅ‡∏£‡∏á‡∏à‡∏≤‡∏Å‡∏ä‡πà‡∏ß‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤
            range_strength = min(100, candle.range_percentage * 20)
            
            # ‡∏£‡∏ß‡∏°‡πÅ‡∏£‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
            total_strength = (body_strength * 0.4 + volume_strength * 0.4 + range_strength * 0.2)
            
            return min(100, total_strength)
            
        except Exception as e:
            logger.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÅ‡∏£‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì: {str(e)}")
            return 0.0
            
    def check_entry_conditions(self, portfolio_state):
        """üéØ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏ó‡∏£‡∏î (Single Entry Point)"""
        try:
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á CandleData ‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
            if len(self.price_history) < 4:
                return
                
            candle = CandleData(
                open=self.price_history[-2] if len(self.price_history) > 1 else self.price_history[-1],
                high=max(self.price_history[-4:]),
                low=min(self.price_history[-4:]),
                close=self.price_history[-1],
                volume=self.volume_history[-1] if self.volume_history else 1000,
                timestamp=datetime.now(),
                symbol=self.actual_symbol  # ‡πÉ‡∏ä‡πâ symbol ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
            )
            
            current_price = candle.close
            
            # üéØ Single Entry Point - ‡∏î‡∏∂‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å SignalManager
            unified_signal = self.portfolio_manager.get_unified_signal(
                candle=candle,
                current_price=current_price,
                account_balance=portfolio_state.account_balance,
                volume_history=self.volume_history
            )
            
            if not unified_signal:
                logger.debug("‚è∏Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°")
                # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì (‡πÅ‡∏°‡πâ‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì)
                self.portfolio_manager.update_trade_timing(signal_generated=False)
                return
            
            # ‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏Ñ‡∏ß‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏ó‡∏£‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            decision = self.portfolio_manager.should_enter_trade(
                unified_signal.signal, candle, portfolio_state, self.volume_history
            )
            
            if decision['should_enter']:
                # üéØ TRADE ENTRY (Trust the system - let Lightning Cleanup handle risk)
                logger.info(f"üéØ ENTRY: {unified_signal.signal.direction} {decision['lot_size']:.2f} lots @ {unified_signal.signal.price}")
                
                # ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î
                result = self.portfolio_manager.execute_trade_decision(decision)
                
                if result.success:
                    logger.info(f"‚úÖ ORDER SUCCESS: Ticket #{result.ticket}")
                    self.portfolio_manager.update_trade_timing(trade_executed=True)
                else:
                    logger.error(f"‚ùå ORDER FAILED: {result.error_message}")
            else:
                # üö´ ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏°‡πâ (‡∏™‡∏±‡πâ‡∏ô‡πÜ)
                reasons = decision.get('reasons', ['Unknown reason'])
                if reasons and len(reasons) > 0:
                    # ‡πÄ‡∏≠‡∏≤‡πÅ‡∏Ñ‡πà‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡πÅ‡∏£‡∏Å ‡πÅ‡∏•‡∏∞‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏™‡∏±‡πâ‡∏ô
                    main_reason = reasons[0] if isinstance(reasons, list) else str(reasons)
                    # ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏™‡∏±‡πâ‡∏ô‡∏•‡∏á
                    short_reason = self._simplify_reason(main_reason)
                    logger.info(f"‚è∏Ô∏è NO ENTRY: {short_reason}")
                else:
                    logger.info(f"‚è∏Ô∏è NO ENTRY: No specific reason provided")
                    
            # ‡∏•‡πâ‡∏≤‡∏á signal ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•
            self.last_signal = None
            
        except Exception as e:
            logger.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏ó‡∏£‡∏î: {str(e)}")
    
    def _simplify_reason(self, reason: str) -> str:
        """‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏™‡∏±‡πâ‡∏ô‡∏•‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠ log ‡∏ó‡∏µ‡πà‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢"""
        # ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡πÜ ‡πÉ‡∏´‡πâ‡∏™‡∏±‡πâ‡∏ô
        simplifications = {
            "‡∏°‡∏µ Order ‡πÉ‡∏ô‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß": "Already ordered this candle",
            "‡πÅ‡∏£‡∏á‡∏ï‡∏•‡∏≤‡∏î‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠": "Market strength insufficient", 
            "Volume ‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏Å‡∏ì‡∏ë‡πå": "Volume too low",
            "Entry price invalid": "Price invalid",
            "Too many bad positions": "Too many losing positions",
            "Buy positions ‡πÄ‡∏Å‡∏¥‡∏ô 80%": "Too many BUY positions",
            "Sell positions ‡πÄ‡∏Å‡∏¥‡∏ô 80%": "Too many SELL positions",
            "‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏∏‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô": "Capital exposure exceeded"
        }
        
        # ‡∏´‡∏≤‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô
        for long_phrase, short_phrase in simplifications.items():
            if long_phrase in reason:
                return short_phrase
        
        # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠ ‡∏ï‡∏±‡∏î‡πÉ‡∏´‡πâ‡∏™‡∏±‡πâ‡∏ô
        if len(reason) > 50:
            return reason[:47] + "..."
        
        return reason
    
    # üóëÔ∏è REMOVED: _aggressive_balance_recovery - replaced by Dynamic 7D Smart Closer
    def _aggressive_balance_recovery_REMOVED(self, positions, current_price):
        """üöÄ ‡πÄ‡∏£‡πà‡∏á‡∏´‡∏≤‡∏Ñ‡∏π‡πà‡∏õ‡∏¥‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠ positions ‡πÄ‡∏¢‡∏≠‡∏∞ - ‡πÑ‡∏°‡πà‡∏™‡∏ô‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡πÅ‡∏ï‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏¥‡∏î‡∏ö‡∏ß‡∏Å‡πÄ‡∏™‡∏°‡∏≠"""
        try:
            logger.info(f"üöÄ Aggressive Balance Recovery: {len(positions)} positions")
            
            # ‡πÅ‡∏¢‡∏Å BUY ‡πÅ‡∏•‡∏∞ SELL
            buy_positions = [pos for pos in positions if pos.type == 0]  # BUY
            sell_positions = [pos for pos in positions if pos.type == 1]  # SELL
            
            # ‡πÅ‡∏¢‡∏Å‡πÄ‡∏õ‡πá‡∏ô ‡∏Å‡∏≥‡πÑ‡∏£ ‡πÅ‡∏•‡∏∞ ‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô
            profitable_buys = [pos for pos in buy_positions if pos.profit > 0]
            losing_buys = [pos for pos in buy_positions if pos.profit <= 0]
            profitable_sells = [pos for pos in sell_positions if pos.profit > 0]
            losing_sells = [pos for pos in sell_positions if pos.profit <= 0]
            
            # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏° P&L
            profitable_buys.sort(key=lambda x: x.profit, reverse=True)  # ‡∏Å‡∏≥‡πÑ‡∏£‡∏°‡∏≤‡∏Å‡∏Å‡πà‡∏≠‡∏ô
            losing_buys.sort(key=lambda x: x.profit)  # ‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡πà‡∏≠‡∏ô (‡πÅ‡∏¢‡πà‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢)
            profitable_sells.sort(key=lambda x: x.profit, reverse=True)  # ‡∏Å‡∏≥‡πÑ‡∏£‡∏°‡∏≤‡∏Å‡∏Å‡πà‡∏≠‡∏ô
            losing_sells.sort(key=lambda x: x.profit)  # ‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡πà‡∏≠‡∏ô (‡πÅ‡∏¢‡πà‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢)
            
            # ‡∏´‡∏≤‡∏Ñ‡∏π‡πà‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î (BUY + SELL = ‡∏Å‡∏≥‡πÑ‡∏£‡∏£‡∏ß‡∏°)
            best_combinations = []
            
            # üéØ SMART PAIRING: ‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà positions ‡∏î‡∏µ ‡∏Å‡∏±‡∏ö positions ‡πÅ‡∏¢‡πà
            logger.info(f"üéØ Smart Pairing: Profitable BUY={len(profitable_buys)}, Losing BUY={len(losing_buys)}")
            logger.info(f"üéØ Smart Pairing: Profitable SELL={len(profitable_sells)}, Losing SELL={len(losing_sells)}")
            
            # ‡∏•‡∏≠‡∏á combination ‡∏Ç‡∏ô‡∏≤‡∏î‡∏ï‡πà‡∏≤‡∏á‡πÜ (2-12 positions) - ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏¥‡∏î‡πÑ‡∏î‡πâ‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô
            for combo_size in range(2, min(13, len(positions) + 1)):
                # ‡∏•‡∏≠‡∏á ratio ‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á profitable ‡πÅ‡∏•‡∏∞ losing
                for profitable_ratio in [0.3, 0.4, 0.5, 0.6, 0.7]:  # 30%-70% ‡πÄ‡∏õ‡πá‡∏ô profitable
                    profitable_count = max(1, int(combo_size * profitable_ratio))
                    losing_count = combo_size - profitable_count
                    
                    if losing_count < 1:  # ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ losing positions ‡∏î‡πâ‡∏ß‡∏¢
                        continue
                    
                    # ‡πÅ‡∏ö‡πà‡∏á profitable ‡πÅ‡∏•‡∏∞ losing ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á BUY/SELL
                    for buy_profitable in range(max(0, profitable_count - len(profitable_sells)), 
                                              min(profitable_count + 1, len(profitable_buys) + 1)):
                        sell_profitable = profitable_count - buy_profitable
                        
                        for buy_losing in range(max(0, losing_count - len(losing_sells)), 
                                              min(losing_count + 1, len(losing_buys) + 1)):
                            sell_losing = losing_count - buy_losing
                            
                            # ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏°‡∏µ positions ‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠‡πÑ‡∏´‡∏°
                            if (buy_profitable > len(profitable_buys) or 
                                sell_profitable > len(profitable_sells) or
                                buy_losing > len(losing_buys) or 
                                sell_losing > len(losing_sells)):
                                continue
                            
                            # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å positions
                            selected_positions = []
                            selected_positions.extend(profitable_buys[:buy_profitable])
                            selected_positions.extend(profitable_sells[:sell_profitable])
                            selected_positions.extend(losing_buys[-buy_losing:] if buy_losing > 0 else [])  # ‡πÅ‡∏¢‡πà‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
                            selected_positions.extend(losing_sells[-sell_losing:] if sell_losing > 0 else [])  # ‡πÅ‡∏¢‡πà‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
                            
                            if len(selected_positions) != combo_size:
                                continue
                            
                            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì P&L ‡∏£‡∏ß‡∏°
                            total_pnl = sum([pos.profit for pos in selected_positions])
                            
                            # ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ö‡∏ß‡∏Å‡πÄ‡∏™‡∏°‡∏≠ (‡πÑ‡∏°‡πà‡∏õ‡∏¥‡∏î‡∏ï‡∏¥‡∏î‡∏•‡∏ö)
                            if total_pnl > 3.0:  # ‡∏Å‡∏≥‡πÑ‡∏£‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥ $3
                                buy_total = buy_profitable + buy_losing
                                sell_total = sell_profitable + sell_losing
                                balance_score = abs(buy_total - sell_total) * -5  # ‡∏¢‡∏¥‡πà‡∏á‡∏™‡∏°‡∏î‡∏∏‡∏•‡∏¢‡∏¥‡πà‡∏á‡∏î‡∏µ
                                
                                # üéØ HEAVY LOSS BONUS - ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏≠‡∏∑‡πà‡∏ô
                                heavy_loss_bonus = 0
                                # ‡∏ô‡∏±‡∏ö losing positions ‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡∏´‡∏ô‡∏±‡∏Å
                                losing_positions_selected = []
                                if buy_losing > 0:
                                    losing_positions_selected.extend(losing_buys[-buy_losing:])
                                if sell_losing > 0:
                                    losing_positions_selected.extend(losing_sells[-sell_losing:])
                                
                                logger.debug(f"üîç Losing positions selected: {len(losing_positions_selected)} (BUY:{buy_losing}, SELL:{sell_losing})")
                                
                                for pos in losing_positions_selected:
                                    if pos.profit < -10:  # ‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô > $10
                                        heavy_loss_bonus += abs(pos.profit) * 2  # Bonus = 2x ‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô
                                        logger.debug(f"üí• Heavy Loss >$10: {pos.profit:.2f} ‚Üí Bonus +{abs(pos.profit)*2:.1f}")
                                    elif pos.profit < -5:  # ‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô > $5
                                        heavy_loss_bonus += abs(pos.profit) * 1  # Bonus = 1x ‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô
                                        logger.debug(f"üí• Heavy Loss >$5: {pos.profit:.2f} ‚Üí Bonus +{abs(pos.profit):.1f}")
                                    elif pos.profit < 0:
                                        logger.debug(f"üìä Small Loss: {pos.profit:.2f} ‚Üí No bonus")
                                
                                losing_bonus = (buy_losing + sell_losing) * 1 + heavy_loss_bonus  # ‡∏£‡∏ß‡∏° bonus
                                total_score = total_pnl + balance_score + losing_bonus
                                
                                best_combinations.append({
                                    'positions': selected_positions,
                                    'total_pnl': total_pnl,
                                    'balance_score': balance_score,
                                    'losing_bonus': losing_bonus,
                                    'heavy_loss_bonus': heavy_loss_bonus,
                                    'total_score': total_score,
                                    'profitable_count': profitable_count,
                                    'losing_count': losing_count,
                                    'buy_count': buy_total,
                                    'sell_count': sell_total
                                })
            
            if best_combinations:
                # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
                best_combinations.sort(key=lambda x: x['total_score'], reverse=True)
                best = best_combinations[0]
                
                # üîç DEBUG: ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î losing positions
                losing_details = []
                losing_positions_in_best = []
                
                # ‡∏´‡∏≤ losing positions ‡πÉ‡∏ô best combination
                for pos in best['positions']:
                    if pos.profit < 0:
                        losing_positions_in_best.append(pos)
                        if pos.profit < -10:
                            losing_details.append(f"{pos.profit:.2f}(>$10)")
                        elif pos.profit < -5:
                            losing_details.append(f"{pos.profit:.2f}(>$5)")
                        else:
                            losing_details.append(f"{pos.profit:.2f}(<$5)")
                
                logger.info(f"üéØ Found SMART aggressive combination: {best['profitable_count']}P+{best['losing_count']}L "
                           f"({best['buy_count']}B+{best['sell_count']}S) = ${best['total_pnl']:.2f}")
                logger.info(f"üí• Heavy Loss Bonus: +{best['heavy_loss_bonus']:.1f}, Total Bonus: +{best['losing_bonus']:.1f}")
                logger.info(f"üìä Losing Details: {', '.join(losing_details) if losing_details else 'No losing positions'}")
                
                return {
                    'should_close': True,
                    'positions_to_close': best['positions'],
                    'expected_pnl': best['total_pnl'],
                    'reason': f"Smart Aggressive: {best['profitable_count']}P+{best['losing_count']}L pairs"
                }
            else:
                logger.info(f"‚ùå No profitable aggressive combinations found")
                return {'should_close': False}
                
        except Exception as e:
            logger.error(f"‚ùå Error in aggressive balance recovery: {e}")
            return {'should_close': False}
    
    def _unified_closing_decision(self, positions: List[Any], current_price: float, 
                                 position_scores: List[Any], margin_health: Any, account_info: Dict) -> Dict[str, Any]:
        """
        ü§ù Unified Closing Decision System - Enhanced with Dynamic 7D Smart Closer
        ‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡∏¥‡∏î‡πÑ‡∏°‡πâ‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ Dynamic 7D Analysis
        """
        try:
            logger.info(f"ü§ù UNIFIED ANALYSIS: {len(positions)} positions, Margin: {margin_health.risk_level if margin_health else 'UNKNOWN'}")
            
            # üöÄ Priority 1: Purpose-Aware Dynamic 7D Smart Closer (Primary System)
            if hasattr(self, 'dynamic_7d_smart_closer') and self.dynamic_7d_smart_closer:
                logger.info(f"üß† PURPOSE-AWARE 7D MODE: Using intelligent purpose-based closing system")
                dynamic_result = self.dynamic_7d_smart_closer.find_optimal_closing(positions, account_info)
                
                if dynamic_result and dynamic_result.should_close:
                    # Convert to unified format
                    return {
                        'should_close': True,
                        'positions_to_close': dynamic_result.positions_to_close,
                        'method': f'purpose_aware_{dynamic_result.method}',
                        'expected_pnl': dynamic_result.expected_pnl,
                        'positions_count': dynamic_result.position_count,
                        'reason': dynamic_result.reason,
                        'confidence_score': dynamic_result.confidence_score,
                        'portfolio_improvement': dynamic_result.portfolio_improvement
                    }
            
            # üß† Priority 2: Intelligent Manager (Fallback)
            if hasattr(self, 'intelligent_position_manager') and self.intelligent_position_manager and position_scores:
                logger.info(f"üß† INTELLIGENT FALLBACK: Using 7D intelligent manager")
                intelligent_decision = self.intelligent_position_manager.analyze_closing_decision(positions, account_info)
                if intelligent_decision.get('should_close', False):
                    intelligent_decision['method'] = 'intelligent_7d_fallback'
                    logger.info(f"‚úÖ INTELLIGENT DECISION: {intelligent_decision.get('positions_count', 0)} positions selected")
                    return intelligent_decision
            
            # üéØ Priority 3: Zone-Based (Last Resort)
            if self.zone_position_manager:
                logger.info(f"üéØ ZONE FALLBACK: Using zone-based analysis")
                close_decision = self.zone_position_manager.should_close_positions(positions, current_price)
                
                if close_decision.get('should_close', False):
                    close_decision['method'] = 'zone_fallback'
                    logger.info(f"‚úÖ ZONE DECISION: {len(close_decision.get('positions_to_close', []))} positions selected")
                    return close_decision
            
            # üìä No closing decision made
            logger.info(f"‚è∏Ô∏è NO CLOSING: No system found suitable positions to close")
            return {'should_close': False, 'reason': 'No suitable closing opportunities found', 'method': 'none'}
            
        except Exception as e:
            logger.error(f"‚ùå Error in unified closing decision: {e}")
            return {'should_close': False, 'reason': f'Unified system error: {str(e)}', 'method': 'error'}
    
    def _filter_locked_positions(self, positions: List[Any]) -> List[Any]:
        """üîí ‡∏Å‡∏£‡∏≠‡∏á‡πÑ‡∏°‡πâ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ñ‡∏π‡∏Å lock ‡∏≠‡∏≠‡∏Å‡∏°‡∏≤"""
        with self.closing_lock:
            filtered = []
            for pos in positions:
                ticket = getattr(pos, 'ticket', None)
                if ticket and ticket not in self.closing_positions:
                    filtered.append(pos)
                else:
                    logger.info(f"üîí Position {ticket} is already being closed - skipping")
            return filtered
    
    def _lock_positions(self, positions: List[Any]):
        """üîí ‡∏•‡πá‡∏≠‡∏Ñ‡πÑ‡∏°‡πâ‡∏Å‡πà‡∏≠‡∏ô‡∏õ‡∏¥‡∏î"""
        with self.closing_lock:
            for pos in positions:
                ticket = getattr(pos, 'ticket', None)
                if ticket:
                    self.closing_positions.add(ticket)
                    logger.info(f"üîí Locked position {ticket}")
    
    def _unlock_positions(self, positions: List[Any]):
        """üîì ‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Ñ‡πÑ‡∏°‡πâ‡∏´‡∏•‡∏±‡∏á‡∏õ‡∏¥‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à"""
        with self.closing_lock:
            for pos in positions:
                ticket = getattr(pos, 'ticket', None)
                if ticket and ticket in self.closing_positions:
                    self.closing_positions.remove(ticket)
                    logger.info(f"üîì Unlocked position {ticket}")
            
    def check_exit_conditions(self, portfolio_state):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î Position"""
        try:
            # üéØ CRITICAL FIX: Sync positions from MT5 FIRST
            logger.debug(f"üîÑ Syncing positions from MT5 before closing analysis...")
            synced_positions = self.portfolio_manager.order_manager.sync_positions_from_mt5()
            positions = self.portfolio_manager.order_manager.active_positions
            logger.info(f"üîÑ SYNC COMPLETE: {len(positions)} positions active (synced: {len(synced_positions)})")
            
            # 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Breakout Strategy ‡∏Å‡πà‡∏≠‡∏ô
            breakout_info = None
            should_block_recovery = False
            
            if self.current_prices:
                current_price = self.current_prices.get('close', 0)
                
                # Advanced Breakout Recovery DISABLED - ‡πÉ‡∏ä‡πâ Simple Position Manager ‡πÅ‡∏ó‡∏ô
                # breakout_info = self.portfolio_manager.check_advanced_breakout_recovery(current_price)
                # should_block_recovery = breakout_info.get('should_block_recovery', False)
                breakout_info = {'should_block_recovery': False, 'reason': 'Advanced Breakout Recovery disabled'}
                should_block_recovery = False
                
                if breakout_info.get('is_breakout_pending'):
                    # Show only successful recovery results
                    for result in breakout_info.get('recovery_results', []):
                        if result['success']:
                            logger.info(f"‚úÖ RECOVERY SUCCESS: ${result['net_profit']:.2f} profit")
                
                # 2. üóëÔ∏è Smart Recovery REMOVED - functionality moved to Smart Profit Taking System
                
                # ü§ù UNIFIED CLOSING SYSTEM - ‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡∏¥‡∏î‡πÑ‡∏°‡πâ‡πÅ‡∏ö‡∏ö‡∏õ‡∏£‡∏∞‡∏™‡∏≤‡∏ô‡∏á‡∏≤‡∏ô
                logger.info(f"ü§ù UNIFIED CLOSING: Analyzing {len(positions)} positions...")
                
                # 1. üß† Get 7D Analysis (‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß)
                account_info = self.mt5_connection.get_account_info()
                margin_health = None
                position_scores = None
                
                if hasattr(self, 'intelligent_position_manager') and self.intelligent_position_manager:
                    margin_health = self.intelligent_position_manager._analyze_margin_health(account_info)
                    position_scores = self.intelligent_position_manager._score_all_positions(positions, account_info, margin_health)
                    logger.info(f"üß† 7D Analysis Complete: {len(position_scores)} positions scored")
                    logger.info(f"üíä Margin Health: {margin_health.risk_level} - {margin_health.recommendation}")
                
                # 2. üéØ Unified Decision Making
                closing_result = self._unified_closing_decision(positions, current_price, position_scores, margin_health, account_info)
                
                if closing_result.get('should_close', False):
                    positions_to_close = closing_result.get('positions_to_close', [])
                    if positions_to_close:
                        # üîí Check for position locking conflicts
                        filtered_positions = self._filter_locked_positions(positions_to_close)
                        
                        if not filtered_positions:
                            logger.info("üîí All selected positions are already being closed - skipping")
                            return
                        
                        # üìä Log unified decision
                        method = closing_result.get('method', 'unified')
                        count = len(filtered_positions)
                        expected_pnl = closing_result.get('expected_pnl', 0.0)
                        reason = closing_result.get('reason', '')
                        
                        logger.info(f"ü§ù UNIFIED DECISION ({method.upper()}): {count} positions")
                        logger.info(f"üí∞ Expected P&L: ${expected_pnl:.2f} - {reason}")
                        
                        # üîí Lock positions before closing
                        self._lock_positions(filtered_positions)
                        
                        try:
                            # 3. üéØ Execute closing
                            close_result = self.zone_position_manager.close_positions(filtered_positions)
                            if close_result.get('success', False):
                                closed_count = close_result.get('closed_count', 0)
                                total_profit = close_result.get('total_profit', 0.0)
                                logger.info(f"‚úÖ UNIFIED SUCCESS: {closed_count} positions closed, ${total_profit:.2f} profit")
                            else:
                                logger.warning(f"‚ùå UNIFIED FAILED: {close_result.get('message', 'Unknown error')}")
                        finally:
                            # üîì Always unlock positions after attempt
                            self._unlock_positions(filtered_positions)
                        return
                
                # üß† OLD SYSTEMS REMOVED - ‡πÉ‡∏ä‡πâ Unified System ‡πÅ‡∏ó‡∏ô
                
                # 3. Zone Analysis & Rebalancing (silent)
                zone_result = self.portfolio_manager.check_and_execute_zone_rebalance(current_price)
            
            # üóëÔ∏è Emergency Exit REMOVED - All exits handled by Smart Profit Taking System
        except Exception as e:
            logger.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î: {str(e)}")
            
    def start_gui(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏° GUI"""
        try:
            self.gui = TradingGUI(self)
            self.gui.run()
        except Exception as e:
            logger.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô GUI: {str(e)}")
            
    def shutdown(self):
        """‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö"""
        try:
            logger.info("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏ó‡∏£‡∏î...")
            
            # ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î
            self.stop_trading()
            
            # ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MT5
            self.mt5_connection.disconnect_mt5()
            
            logger.info("‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏ó‡∏£‡∏î‡πÅ‡∏•‡πâ‡∏ß")
            
        except Exception as e:
            logger.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö: {str(e)}")
            
def main():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å"""
    try:
        logger.info("üöÄ TRADING SYSTEM STARTING")
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏ó‡∏£‡∏î
        trading_system = TradingSystem(
            initial_balance=10000.0,  # ‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏∏‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
            symbol="XAUUSD"           # ‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î (‡∏ó‡∏≠‡∏á‡∏Ñ‡∏≥)
        )
        
        # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
        if not trading_system.initialize_system():
            logger.error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏î‡πâ")
            return
            
        # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
        logger.info(f"üí∞ Balance: ${trading_system.initial_balance:,.2f}")
        logger.info(f"üìä Symbol: {trading_system.actual_symbol}")
        logger.info("")
        logger.info("‚ö†Ô∏è  ‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô - ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° 'Start Trading' ‡πÉ‡∏ô GUI ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏ó‡∏£‡∏î")
        logger.info("=" * 60)
        
        # ‡πÄ‡∏£‡∏¥‡πà‡∏° GUI (‡πÑ‡∏°‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥)
        trading_system.start_gui()
        
        # ‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏°‡∏∑‡πà‡∏≠ GUI ‡∏õ‡∏¥‡∏î
        trading_system.shutdown()
        
    except KeyboardInterrupt:
        logger.info("‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏´‡∏¢‡∏∏‡∏î‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ")
    except Exception as e:
        logger.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å: {str(e)}")
    finally:
        logger.info("üèÅ ‡∏à‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô Trading System")

if __name__ == "__main__":
    main()
