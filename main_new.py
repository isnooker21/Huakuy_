# -*- coding: utf-8 -*-
"""
Main Trading System
‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏ó‡∏£‡∏î‡∏´‡∏•‡∏±‡∏Å‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå
"""

import logging
import time
import threading
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any

# üöÄ NEW SIMPLE TRADING SYSTEM
from mt5_connection import MT5Connection
from calculations import Position, PercentageCalculator, LotSizeCalculator
from trading_conditions import TradingConditions, Signal, CandleData
from order_management import OrderManager

# üöÄ NEW BREAKOUT TRADING ENGINE
from simple_breakout_engine import create_simple_breakout_engine, CandleData as BreakoutCandle, TimeFrame
from sr_detection_engine import create_sr_detection_engine

# ‚úÖ KEEP POSITION MANAGEMENT & CLOSING SYSTEMS
from dynamic_position_modifier import create_dynamic_position_modifier
from dynamic_adaptive_closer import create_dynamic_adaptive_closer

# üéØ SIMPLE & CLEAN LOGGING CONFIGURATION
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(message)s',  # ‡∏•‡∏ö levelname ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î
    handlers=[
        logging.FileHandler('trading_system.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)

# üöÄ NEW SYSTEM LOGGING - Clean & Simple
logging.getLogger('mt5_connection').setLevel(logging.WARNING)
logging.getLogger('order_management').setLevel(logging.INFO)
logging.getLogger('simple_breakout_engine').setLevel(logging.INFO)
logging.getLogger('sr_detection_engine').setLevel(logging.INFO)
logging.getLogger('dynamic_position_modifier').setLevel(logging.INFO)
logging.getLogger('dynamic_adaptive_closer').setLevel(logging.INFO)
logging.getLogger('calculations').setLevel(logging.ERROR)

logger = logging.getLogger(__name__)

class TradingSystem:
    """‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏ó‡∏£‡∏î‡∏´‡∏•‡∏±‡∏Å‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå"""
    
    def __init__(self, initial_balance: float = 10000.0, symbol: str = "XAUUSD"):
        """
        üöÄ NEW SIMPLE BREAKOUT TRADING SYSTEM
        
        Args:
            initial_balance: ‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏∏‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
            symbol: ‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î (default: XAUUSD ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏≠‡∏á‡∏Ñ‡∏≥)
        """
        self.base_symbol = symbol
        self.actual_symbol = None  # ‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå‡∏à‡∏£‡∏¥‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡πÇ‡∏ö‡∏£‡∏Å‡πÄ‡∏Å‡∏≠‡∏£‡πå
        self.initial_balance = initial_balance
        
        # üöÄ NEW CORE SYSTEMS
        self.mt5_connection = MT5Connection()
        self.order_manager = OrderManager(self.mt5_connection)
        self.trading_conditions = TradingConditions()
        
        # üöÄ NEW BREAKOUT TRADING ENGINE
        self.breakout_engine = None
        self.sr_detector = None
        
        # ‚úÖ KEEP POSITION MANAGEMENT & CLOSING SYSTEMS
        self.dynamic_position_modifier = None
        self.dynamic_adaptive_closer = None
        
        # üéØ Trading State - NEW SYSTEM
        self.is_running = False
        self.trading_thread = None
        self.last_candle_time = {}  # {timeframe: last_time}
        
        # üìä Multi-Timeframe Candle Storage
        self.candle_history = {}  # {timeframe: [candles]}
        self.timeframes = [TimeFrame.M5, TimeFrame.M15, TimeFrame.M30, TimeFrame.H1]
        
        # Initialize candle history for each timeframe
        for tf in self.timeframes:
            self.candle_history[tf] = []
            self.last_candle_time[tf] = None
        
        # üîí Position Locking - ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î‡∏ã‡πâ‡∏≥
        self.closing_positions = set()  # ‡πÄ‡∏Å‡πá‡∏ö tickets ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà
        self.closing_lock = threading.Lock()
        
        # ‚è∞ Closing Cooldown - ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î‡∏ö‡πà‡∏≠‡∏¢‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ
        self.last_closing_time = None
        self.closing_cooldown_seconds = 30  # ‡∏£‡∏≠ 30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î
        
        # Initialize trading system
        
    def initialize_system(self) -> bool:
        """
        ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        
        Returns:
            bool: ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        """
        try:
            # Starting system initialization
            
            # ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MT5
            if not self.mt5_connection.connect_mt5():
                logger.error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MT5 ‡πÑ‡∏î‡πâ")
                return False
                
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏´‡∏≤‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå‡∏ó‡∏≠‡∏á‡∏Ñ‡∏≥‡πÇ‡∏î‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
            logger.info("üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏´‡∏≤‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå‡∏ó‡∏≠‡∏á‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°...")
            self.actual_symbol = self.mt5_connection.auto_detect_gold_symbol()
            
            if not self.actual_symbol:
                logger.error("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå‡∏ó‡∏≠‡∏á‡∏Ñ‡∏≥‡πÉ‡∏ô‡πÇ‡∏ö‡∏£‡∏Å‡πÄ‡∏Å‡∏≠‡∏£‡πå‡∏ô‡∏µ‡πâ")
                return False
                    
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå
            symbol_info = self.mt5_connection.get_symbol_info(self.actual_symbol)
            if not symbol_info:
                logger.error(f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå {self.actual_symbol}")
                return False
                
            logger.info(f"‡πÉ‡∏ä‡πâ‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå: {self.base_symbol} -> {self.actual_symbol}")
            logger.info(f"‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå: {symbol_info}")
            
            # ‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Position
            positions = self.order_manager.sync_positions_from_mt5()
            logger.info(f"‡∏û‡∏ö Position ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà: {len(positions)} ‡∏ï‡∏±‡∏ß")
            
            # üöÄ Initialize NEW Breakout Trading Engine
            logger.info("üöÄ Initializing Simple Breakout Engine...")
            self.breakout_engine = create_simple_breakout_engine(
                mt5_connection=self.mt5_connection,
                symbol=self.actual_symbol
            )
            logger.info(f"‚úÖ Breakout Engine created: {type(self.breakout_engine)}")
            
            # üõ°Ô∏è Initialize Support/Resistance Detection Engine
            logger.info("üõ°Ô∏è Initializing S/R Detection Engine...")
            self.sr_detector = create_sr_detection_engine(symbol=self.actual_symbol)
            logger.info(f"‚úÖ S/R Detector created: {type(self.sr_detector)}")
            
            # ‚úÖ Initialize Position Management & Closing Systems (KEEP)
            logger.info("‚úÖ Initializing Position Management Systems...")
            
            # Dynamic Position Modifier
            self.dynamic_position_modifier = create_dynamic_position_modifier(
                mt5_connection=self.mt5_connection,
                symbol=self.actual_symbol
            )
            logger.info(f"‚úÖ Dynamic Position Modifier created: {type(self.dynamic_position_modifier)}")
            
            # Dynamic Adaptive Closer
            self.dynamic_adaptive_closer = create_dynamic_adaptive_closer(
                mt5_connection=self.mt5_connection,
                symbol=self.actual_symbol
            )
            logger.info(f"‚úÖ Dynamic Adaptive Closer created: {type(self.dynamic_adaptive_closer)}")
            
            logger.info("‚úÖ NEW SIMPLE BREAKOUT SYSTEM initialized successfully")
            return True
            
        except Exception as e:
            logger.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö: {str(e)}")
            return False
            
    def load_initial_market_data(self):
        """‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏•‡∏≤‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô"""
        try:
            # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏Ñ‡∏≤ 100 ‡πÅ‡∏ó‡πà‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
            import MetaTrader5 as mt5
            rates = self.mt5_connection.get_market_data(
                self.actual_symbol, mt5.TIMEFRAME_M1, 100
            )
            
            if rates:
                self.price_history = [rate['close'] for rate in rates]
                self.volume_history = [rate['tick_volume'] for rate in rates]
                
                # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
                latest_rate = rates[-1]
                self.current_prices[self.actual_symbol] = latest_rate['close']
                
                # Market data loaded successfully
            else:
                logger.warning("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏•‡∏≤‡∏î‡πÑ‡∏î‡πâ")
                
        except Exception as e:
            logger.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏•‡∏≤‡∏î: {str(e)}")
            
    def start_trading(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î"""
        try:
            if self.is_running:
                logger.warning("‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏ó‡∏£‡∏î‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß")
                return
                
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÅ‡∏ö‡∏ö‡πÄ‡∏ö‡∏≤
            if not self.mt5_connection.is_connected:
                logger.error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MT5 ‡πÑ‡∏î‡πâ")
                return
                
            self.is_running = True
            self.is_trading_started_from_gui = True
            
            # ‡πÄ‡∏£‡∏¥‡πà‡∏° trading thread ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ (‡πÑ‡∏°‡πà block GUI)
            self.trading_thread = threading.Thread(target=self.trading_loop, daemon=True)
            self.trading_thread.start()
            
            logger.info("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡πÅ‡∏•‡πâ‡∏ß (‡∏à‡∏≤‡∏Å GUI)")
            return True  # ‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
            
        except Exception as e:
            logger.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏ó‡∏£‡∏î: {str(e)}")
            self.is_running = False
            return False
            
    def stop_trading(self):
        """‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î"""
        try:
            self.is_running = False
            self.is_trading_started_from_gui = False
            
            if self.trading_thread and self.trading_thread.is_alive():
                self.trading_thread.join(timeout=5)
                
            logger.info("‚èπÔ∏è ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡πÅ‡∏•‡πâ‡∏ß (‡∏à‡∏≤‡∏Å GUI)")
            
        except Exception as e:
            logger.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏ó‡∏£‡∏î: {str(e)}")
            
    def trading_loop(self):
        """Loop ‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î"""
        logger.info("‡πÄ‡∏£‡∏¥‡πà‡∏° Trading Loop")
        
        # ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà
        loop_count = 0
        last_daily_reset = None
        
        while self.is_running:
            try:
                loop_count += 1
                
                # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏•‡∏≤‡∏î (‡∏ó‡∏∏‡∏Å‡∏£‡∏≠‡∏ö)
                self.update_market_data()
                
                # ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÄ‡∏°‡∏ï‡∏£‡∏¥‡∏Å‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô (‡∏ó‡∏∏‡∏Å 1 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á)
                current_hour = datetime.now().hour
                if last_daily_reset is None or last_daily_reset != current_hour:
                    self.portfolio_manager.reset_daily_metrics()
                    last_daily_reset = current_hour
                
                # üöÄ HIGH-PERFORMANCE TRADING LOOP - Optimized Intervals
                account_info = self.mt5_connection.get_account_info()
                if not account_info:
                    logger.warning("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÑ‡∏î‡πâ")
                    time.sleep(5)  # ‡∏•‡∏î‡∏à‡∏≤‡∏Å 10 ‡πÄ‡∏õ‡πá‡∏ô 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
                    continue
                    
                portfolio_state = self.portfolio_manager.analyze_portfolio_state(account_info)
                
                # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î Position (‡∏ó‡∏∏‡∏Å‡∏£‡∏≠‡∏ö - 1 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)
                self.check_exit_conditions(portfolio_state)
                
                # üéØ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏ó‡∏£‡∏î‡πÉ‡∏´‡∏°‡πà (‡∏ó‡∏∏‡∏Å 3 ‡∏£‡∏≠‡∏ö - 3 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)
                if loop_count % 3 == 0:
                    self.check_entry_conditions(portfolio_state)
                
                # ‚ö° ‡∏£‡∏≠ 1 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ (‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô‡πÅ‡∏ï‡πà‡πÄ‡∏™‡∏ñ‡∏µ‡∏¢‡∏£)
                time.sleep(1)
                
            except Exception as e:
                logger.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô Trading Loop: {str(e)}")
                
                # üõ°Ô∏è SMART ERROR RECOVERY
                if "connection" in str(e).lower() or "timeout" in str(e).lower():
                    logger.warning("üîÑ ‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ - ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà...")
                    if self.mt5_connection.attempt_reconnection():
                        logger.info("‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                        time.sleep(2)  # ‡∏£‡∏≠‡∏™‡∏±‡πâ‡∏ô‡πÜ ‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà
                    else:
                        logger.error("‚ùå ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à - ‡∏£‡∏≠ 30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ")
                        time.sleep(30)
                else:
                    time.sleep(10)  # ‡∏£‡∏≠‡∏õ‡∏Å‡∏ï‡∏¥‡πÄ‡∏°‡∏∑‡πà‡∏≠ error ‡∏≠‡∏∑‡πà‡∏ô‡πÜ
                
        logger.info("‡∏à‡∏ö Trading Loop")
        
    def update_market_data(self):
        """‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏•‡∏≤‡∏î"""
        try:
            import MetaTrader5 as mt5
            
            # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
            rates = self.mt5_connection.get_market_data(
                self.actual_symbol, mt5.TIMEFRAME_M1, 1
            )
            
            if rates and len(rates) > 0:
                latest_rate = rates[0]
                current_time = datetime.fromtimestamp(latest_rate['time'])
                
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                if self.last_candle_time is None or current_time > self.last_candle_time:
                    self.last_candle_time = current_time
                    
                    # ‡∏™‡∏£‡πâ‡∏≤‡∏á CandleData
                    candle = CandleData(
                        open=latest_rate['open'],
                        high=latest_rate['high'],
                        low=latest_rate['low'],
                        close=latest_rate['close'],
                        volume=latest_rate['tick_volume'],
                        timestamp=current_time
                    )
                    
                    # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥
                    self.price_history.append(candle.close)
                    self.volume_history.append(candle.volume)
                    
                    # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ç‡∏ô‡∏≤‡∏î‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥
                    if len(self.price_history) > 100:
                        self.price_history = self.price_history[-100:]
                        self.volume_history = self.volume_history[-100:]
                        
                    # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
                    self.current_prices[self.actual_symbol] = candle.close
                    
                    # ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô‡πÉ‡∏´‡∏°‡πà
                    self.process_new_candle(candle)
                    
        except Exception as e:
            logger.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏•‡∏≤‡∏î: {str(e)}")
            
    def process_new_candle(self, candle: CandleData):
        """‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô‡πÉ‡∏´‡∏°‡πà - ‡πÉ‡∏ä‡πâ Smart Entry Timing System"""
        try:
            # ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡πÅ‡∏•‡∏∞ signal ‡πÅ‡∏ö‡∏ö‡∏™‡∏±‡πâ‡∏ô
            raw_signal = "BUY" if candle.close > candle.open else "SELL"
            logger.info(f"üìä {candle.close:.2f} ‚Üí {raw_signal}")
            
        except Exception as e:
            logger.info(f"‚ùå Error: {str(e)}")
            
    # üö´ REMOVED: calculate_signal_strength - Signal analysis moved to Smart Entry Timing System
            
    def check_entry_conditions(self, portfolio_state):
        """üéØ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏ó‡∏£‡∏î (Single Entry Point)"""
        try:
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á CandleData ‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
            if len(self.price_history) < 4:
                return
                
            candle = CandleData(
                open=self.price_history[-2] if len(self.price_history) > 1 else self.price_history[-1],
                high=max(self.price_history[-4:]),
                low=min(self.price_history[-4:]),
                close=self.price_history[-1],
                volume=self.volume_history[-1] if self.volume_history else 1000,
                timestamp=datetime.now(),
                symbol=self.actual_symbol  # ‡πÉ‡∏ä‡πâ symbol ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
            )
            
            current_price = candle.close
            
            # üéØ Generate SMART signal with Position-Aware Logic
            # Create a smart signal that considers existing positions
            raw_signal_direction = "BUY" if candle.close > candle.open else "SELL"
            
            # üö´ SMART SIGNAL REVERSAL DISABLED - Will use S/R Override instead
            # Using raw signal for new breakout system
            smart_signal_direction = raw_signal_direction
            logger.debug(f"üö´ Smart Reversal: DISABLED (Raw Signal: {raw_signal_direction})")
            
            # üöÄ DYNAMIC ADAPTIVE ANALYSIS - Ultimate Trading Intelligence
            account_info = self.mt5_connection.get_account_info() if self.mt5_connection else {}
            
            # üîç DEBUG: Account Info Analysis
            if account_info:
                margin_level = account_info.get('margin_level', 'UNKNOWN')
                balance = account_info.get('balance', 'UNKNOWN')
                equity = account_info.get('equity', 'UNKNOWN')
                free_margin = account_info.get('margin_free', 'UNKNOWN')
                logger.info(f"üìä ACCOUNT: Balance:{balance} Equity:{equity} Margin:{margin_level}% Free:{free_margin}")
            else:
                logger.warning("‚ö†Ô∏è No account info available")
            
            # üö´ DYNAMIC ADAPTIVE ENTRY DISABLED - Using Simple Breakout + S/R Logic
            # Dynamic Entry Analysis removed for new trading system
            dynamic_lot_size = 0.01  # Default lot size for new system
            logger.debug("üö´ Dynamic Adaptive Entry: DISABLED (Using Simple Breakout Logic)")
            
            # 2. ‚úÖ Dynamic Position Modification (ACTIVE - Works with any entry system)
            if self.dynamic_position_modifier:
                modification_plan = self.dynamic_position_modifier.analyze_portfolio_modifications(
                    positions=self.order_manager.active_positions,
                    account_info=account_info,
                    current_price=current_price
                )
                
                # Apply high-priority modifications
                self._apply_dynamic_modifications(modification_plan)
            
            # üö´ 7D ENTRY SYSTEM DISABLED - Using Simple Breakout + S/R Logic
            # Enhanced 7D Entry Analysis removed for new trading system
            logger.debug("üö´ 7D Entry System: DISABLED (Using Simple Breakout Logic)")
            
            basic_signal = Signal(
                direction=smart_signal_direction,
                symbol=self.actual_symbol,
                strength=abs(candle.close - candle.open) / (candle.high - candle.low) * 100 if candle.high != candle.low else 50,
                confidence=70.0,  # Default confidence
                timestamp=datetime.now(),
                price=current_price
            )
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö signal ‡πÅ‡∏•‡∏∞ FINAL DECISION
            logger.info(f"üìä RAW SIGNAL: {raw_signal_direction} | FINAL SIGNAL: {smart_signal_direction}")
            if raw_signal_direction != smart_signal_direction:
                logger.info(f"üîÑ SIGNAL REVERSAL: {raw_signal_direction} ‚Üí {smart_signal_direction} (Price Hierarchy)")
            
            # ‚úÖ Smart Entry Timing will analyze and approve/reject this signal
            decision = self.portfolio_manager.should_enter_trade(
                signal=basic_signal,
                candle=candle,
                current_state=portfolio_state,
                volume_history=self.volume_history,
                dynamic_lot_size=dynamic_lot_size  # ‡∏™‡πà‡∏á dynamic lot size ‡∏à‡∏≤‡∏Å Dynamic Entry System
            )
            
            if decision['should_enter']:
                # üéØ ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏°‡πâ - ‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏´‡πâ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô‡∏ß‡πà‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏≠‡∏∞‡πÑ‡∏£
                logger.info(f"üöÄ EXECUTING TRADE: {basic_signal.direction} {decision['lot_size']:.2f} lots @ {basic_signal.price:.2f}")
                logger.info(f"üéØ FINAL ENTRY: {basic_signal.direction} (Lot: {decision['lot_size']:.3f})")
                
                # ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î
                result = self.portfolio_manager.execute_trade_decision(decision)
                
                if result.success:
                    logger.info(f"‚úÖ Order #{result.ticket} opened successfully")
                    self.portfolio_manager.update_trade_timing(trade_executed=True)
                else:
                    logger.info(f"‚ùå Order failed: {result.error_message}")
            else:
                # üö´ ‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏°‡πâ (‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç)
                reasons = decision.get('reasons', [])
                if reasons:
                    main_reason = reasons[0] if isinstance(reasons, list) else str(reasons)
                    short_reason = self._simplify_reason(main_reason)
                    if 'Smart Entry' in short_reason or 'Price Hierarchy' in short_reason:
                        logger.info(f"‚è∏Ô∏è {short_reason}")
                    # ‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á reason ‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î noise
                    
            # ‡∏•‡πâ‡∏≤‡∏á signal ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•
            self.last_signal = None
            
        except Exception as e:
            logger.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏ó‡∏£‡∏î: {str(e)}")
    
    def _get_smart_signal_direction(self, raw_direction: str, current_price: float, positions: List) -> str:
        """
        üß† Smart Signal Direction: ‡∏õ‡∏£‡∏±‡∏ö Signal ‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö Price Hierarchy
        
        Logic:
        - ‡∏ñ‡πâ‡∏≤ BUY ‡πÅ‡∏ï‡πà‡∏°‡∏µ SELL ‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô ‚Üí ‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô SELL (‡∏ä‡πà‡∏ß‡∏¢ SELL)
        - ‡∏ñ‡πâ‡∏≤ SELL ‡πÅ‡∏ï‡πà‡∏°‡∏µ BUY ‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô ‚Üí ‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô BUY (‡∏ä‡πà‡∏ß‡∏¢ BUY)
        - ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ ‚Üí ‡πÉ‡∏ä‡πâ signal ‡πÄ‡∏î‡∏¥‡∏°
        """
        try:
            if not positions:
                return raw_direction
            
            # ‡πÅ‡∏¢‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó positions
            buy_positions = [p for p in positions if getattr(p, 'type', 0) == 0]
            sell_positions = [p for p in positions if getattr(p, 'type', 1) == 1]
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö BUY ‡∏™‡∏π‡∏á (losing BUYs)
            losing_buys = [p for p in buy_positions if getattr(p, 'price_open', 0) > current_price + 10]
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö SELL ‡∏ï‡πà‡∏≥ (losing SELLs)  
            losing_sells = [p for p in sell_positions if getattr(p, 'price_open', 0) < current_price - 10]
            
            # üéØ Smart Logic: ‡∏ä‡πà‡∏ß‡∏¢ positions ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô
            if raw_direction == "BUY" and losing_buys and len(losing_buys) > len(losing_sells):
                # ‡∏°‡∏µ BUY ‡∏™‡∏π‡∏á‡πÜ ‡πÄ‡∏¢‡∏≠‡∏∞ ‚Üí BUY ‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠ average down
                if current_price < min(getattr(p, 'price_open', current_price) for p in buy_positions) - 5:
                    return "BUY"  # BUY ‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤ existing BUYs = ‡∏î‡∏µ
                else:
                    return "SELL"  # BUY ‡πÉ‡∏Å‡∏•‡πâ‡πÜ = ‡πÑ‡∏°‡πà‡∏î‡∏µ, ‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô SELL
                    
            elif raw_direction == "SELL" and losing_sells and len(losing_sells) > len(losing_buys):
                # ‡∏°‡∏µ SELL ‡∏ï‡πà‡∏≥‡πÜ ‡πÄ‡∏¢‡∏≠‡∏∞ ‚Üí SELL ‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠ average down
                if current_price > max(getattr(p, 'price_open', current_price) for p in sell_positions) + 5:
                    return "SELL"  # SELL ‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤ existing SELLs = ‡∏î‡∏µ
                else:
                    return "BUY"   # SELL ‡πÉ‡∏Å‡∏•‡πâ‡πÜ = ‡πÑ‡∏°‡πà‡∏î‡∏µ, ‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô BUY
            
            # ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ ‚Üí ‡πÉ‡∏ä‡πâ signal ‡πÄ‡∏î‡∏¥‡∏°
            return raw_direction
            
        except Exception as e:
            logger.error(f"‚ùå Error in smart signal direction: {e}")
            return raw_direction
    
    def _apply_position_modifications(self, modifications):
        """
        üîß Apply Position Modifications (Legacy)
        """
        try:
            if not modifications:
                return
            
            logger.info(f"üîß APPLYING POSITION MODIFICATIONS: {len(modifications)} positions")
            
            for modification in modifications:
                if modification.expected_improvement > 0.4:  # High improvement expected
                    logger.info(f"üîß High Priority Modification: Ticket {modification.position_ticket}")
                    logger.info(f"   Action: {modification.modifier_action.value}")
                    logger.info(f"   Expected Improvement: {modification.expected_improvement:.1%}")
                    
                    # üìù Log suggested entry for manual review
                    suggested_entry = modification.suggested_entry
                    logger.info(f"   Suggested Entry: {suggested_entry}")
                    
                    # Note: Actual implementation would execute the modification
                    # For now, we just log the recommendations
                    
        except Exception as e:
            logger.error(f"‚ùå Error applying position modifications: {e}")
    
    def _apply_dynamic_modifications(self, modification_plan):
        """
        üöÄ Apply Dynamic Position Modifications
        """
        try:
            if not modification_plan or not modification_plan.individual_modifications:
                return
            
            # Apply critical and high priority modifications
            critical_mods = [mod for mod in modification_plan.individual_modifications 
                           if mod.priority.value in ['critical', 'high']]
            
            if critical_mods:
                logger.info(f"üö® {len(critical_mods)} critical mods")
                for mod in critical_mods[:2]:  # ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏Ñ‡πà 2 ‡∏≠‡∏±‡∏ô‡πÅ‡∏£‡∏Å
                    logger.info(f"üö® #{mod.position_ticket}: {mod.recommended_action.value}")
                
                # Log emergency actions ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ
                if modification_plan.emergency_actions:
                    logger.warning(f"üö® {', '.join(modification_plan.emergency_actions[:2])}")
                    
        except Exception as e:
            logger.error(f"‚ùå Error applying dynamic modifications: {e}")
    
    def _execute_dynamic_closing(self, closing_groups, analysis):
        """
        üöÄ Execute Dynamic Closing
        """
        try:
            if not closing_groups:
                logger.info("üîÑ No closing groups to execute")
                return
            
            logger.info(f"üöÄ EXECUTE: {len(closing_groups)} groups")
            
            for group in closing_groups:
                logger.info(f"üí∞ {group.group_id}: {len(group.positions)}pos ${group.total_profit:.0f}")
                
                # Extract position tickets
                tickets = [getattr(pos, 'ticket', 0) for pos in group.positions]
                
                # Execute closing through order manager
                if tickets:
                    close_result = self.order_manager.close_positions_group(tickets)
                    if close_result.success:
                        logger.info(f"‚úÖ {group.group_id}: ${close_result.total_profit:.0f}")
                    else:
                        logger.error(f"‚ùå {group.group_id}: {close_result.error}")
                        
        except Exception as e:
            logger.error(f"‚ùå Error executing dynamic closing: {e}")
    
    def _simplify_reason(self, reason: str) -> str:
        """‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏™‡∏±‡πâ‡∏ô‡∏•‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠ log ‡∏ó‡∏µ‡πà‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢"""
        # ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡πÜ ‡πÉ‡∏´‡πâ‡∏™‡∏±‡πâ‡∏ô
        simplifications = {
            "‡∏°‡∏µ Order ‡πÉ‡∏ô‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß": "Already ordered this candle",
            "‡πÅ‡∏£‡∏á‡∏ï‡∏•‡∏≤‡∏î‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠": "Market strength insufficient", 
            "Volume ‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏Å‡∏ì‡∏ë‡πå": "Volume too low",
            "Entry price invalid": "Price invalid",
            "Too many bad positions": "Too many losing positions",
            "Buy positions ‡πÄ‡∏Å‡∏¥‡∏ô 80%": "Too many BUY positions",
            "Sell positions ‡πÄ‡∏Å‡∏¥‡∏ô 80%": "Too many SELL positions",
            "‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏∏‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô": "Capital exposure exceeded"
        }
        
        # ‡∏´‡∏≤‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô
        for long_phrase, short_phrase in simplifications.items():
            if long_phrase in reason:
                return short_phrase
        
        # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠ ‡∏ï‡∏±‡∏î‡πÉ‡∏´‡πâ‡∏™‡∏±‡πâ‡∏ô
        if len(reason) > 50:
            return reason[:47] + "..."
        
        return reason
    
    
    def _unified_closing_decision(self, positions: List[Any], current_price: float, 
                                 position_scores: List[Any], margin_health: Any, account_info: Dict) -> Dict[str, Any]:
        """
        ü§ù Unified Closing Decision System - Enhanced with Dynamic 7D Smart Closer
        ‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡∏¥‡∏î‡πÑ‡∏°‡πâ‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ Dynamic 7D Analysis
        """
        try:
            logger.info(f"ü§ù UNIFIED ANALYSIS: {len(positions)} positions, Margin: {margin_health.risk_level if margin_health else 'UNKNOWN'}")
            
            # üöÄ Priority 1: Purpose-Aware Dynamic 7D Smart Closer (Primary System)
            if hasattr(self, 'dynamic_7d_smart_closer') and self.dynamic_7d_smart_closer:
                logger.info(f"üß† PURPOSE-AWARE 7D MODE: Using intelligent purpose-based closing system")
                dynamic_result = self.dynamic_7d_smart_closer.find_optimal_closing(positions, account_info)
                
                if dynamic_result and dynamic_result.should_close:
                    # Convert to unified format
                    return {
                        'should_close': True,
                        'positions_to_close': dynamic_result.positions_to_close,
                        'method': f'purpose_aware_{dynamic_result.method}',
                        'expected_pnl': dynamic_result.expected_pnl,
                        'positions_count': dynamic_result.position_count,
                        'reason': dynamic_result.reason,
                        'confidence_score': dynamic_result.confidence_score,
                        'portfolio_improvement': dynamic_result.portfolio_improvement
                    }
            
            # üß† Priority 2: Intelligent Manager (Fallback only if Dynamic 7D fails)
            if hasattr(self, 'intelligent_position_manager') and self.intelligent_position_manager and position_scores:
                logger.info(f"üß† INTELLIGENT BACKUP: Using 7D intelligent manager")
                intelligent_decision = self.intelligent_position_manager.analyze_closing_decision(positions, account_info)
                if intelligent_decision.get('should_close', False):
                    intelligent_decision['method'] = 'intelligent_7d_backup'
                    logger.info(f"‚úÖ INTELLIGENT DECISION: {intelligent_decision.get('positions_count', 0)} positions selected")
                    return intelligent_decision
            
            # üö´ REMOVED Priority 3 & 4: Zone Manager and Portfolio Manager 
            # ‚úÖ REASON: Priority 1 & 2 already cover all functionality:
            #    - Dynamic 7D handles distance-based (zone logic)
            #    - Intelligent Manager handles cross-zone analysis
            #    - Portfolio health covered by both systems
            #    - Redundant fallbacks slow down smart closing
            
            # üìä Only 2 priorities now - cleaner and smarter
            logger.info(f"‚è∏Ô∏è NO CLOSING: Smart systems found no suitable positions to close")
            return {'should_close': False, 'reason': 'Smart analysis found no profitable closing opportunities', 'method': 'none'}
            
        except Exception as e:
            logger.error(f"‚ùå Error in unified closing decision: {e}")
            return {'should_close': False, 'reason': f'Unified system error: {str(e)}', 'method': 'error'}
    
    def _filter_locked_positions(self, positions: List[Any]) -> List[Any]:
        """üîí ‡∏Å‡∏£‡∏≠‡∏á‡πÑ‡∏°‡πâ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ñ‡∏π‡∏Å lock ‡∏≠‡∏≠‡∏Å‡∏°‡∏≤"""
        with self.closing_lock:
            filtered = []
            for pos in positions:
                ticket = getattr(pos, 'ticket', None)
                if ticket and ticket not in self.closing_positions:
                    filtered.append(pos)
                else:
                    logger.info(f"üîí Position {ticket} is already being closed - skipping")
            return filtered
    
    def _lock_positions(self, positions: List[Any]):
        """üîí ‡∏•‡πá‡∏≠‡∏Ñ‡πÑ‡∏°‡πâ‡∏Å‡πà‡∏≠‡∏ô‡∏õ‡∏¥‡∏î"""
        with self.closing_lock:
            for pos in positions:
                ticket = getattr(pos, 'ticket', None)
                if ticket:
                    self.closing_positions.add(ticket)
                    logger.info(f"üîí Locked position {ticket}")
    
    def _unlock_positions(self, positions: List[Any]):
        """üîì ‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Ñ‡πÑ‡∏°‡πâ‡∏´‡∏•‡∏±‡∏á‡∏õ‡∏¥‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à"""
        with self.closing_lock:
            for pos in positions:
                ticket = getattr(pos, 'ticket', None)
                if ticket and ticket in self.closing_positions:
                    self.closing_positions.remove(ticket)
                    logger.info(f"üîì Unlocked position {ticket}")
            
    def check_exit_conditions(self, portfolio_state):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î Position"""
        try:
            # üéØ CRITICAL FIX: Sync positions from MT5 FIRST
            logger.debug(f"üîÑ Syncing positions from MT5 before closing analysis...")
            synced_positions = self.portfolio_manager.order_manager.sync_positions_from_mt5()
            positions = self.portfolio_manager.order_manager.active_positions
            logger.info(f"üîÑ SYNC COMPLETE: {len(positions)} positions active (synced: {len(synced_positions)})")
            
            # 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Breakout Strategy ‡∏Å‡πà‡∏≠‡∏ô
            breakout_info = None
            should_block_recovery = False
            
            if self.current_prices:
                current_price = self.current_prices.get('close', 0)
                
                # Advanced Breakout Recovery DISABLED - ‡πÉ‡∏ä‡πâ Simple Position Manager ‡πÅ‡∏ó‡∏ô
                # breakout_info = self.portfolio_manager.check_advanced_breakout_recovery(current_price)
                # should_block_recovery = breakout_info.get('should_block_recovery', False)
                breakout_info = {'should_block_recovery': False, 'reason': 'Advanced Breakout Recovery disabled'}
                should_block_recovery = False
                
                if breakout_info.get('is_breakout_pending'):
                    # Show only successful recovery results
                    for result in breakout_info.get('recovery_results', []):
                        if result['success']:
                            logger.info(f"‚úÖ RECOVERY SUCCESS: ${result['net_profit']:.2f} profit")
                
                # 2. üóëÔ∏è Smart Recovery REMOVED - functionality moved to Smart Profit Taking System
                
                # üöÄ DYNAMIC ADAPTIVE CLOSING - Ultimate Closing Intelligence
                logger.info(f"üöÄ DYNAMIC CLOSING: Analyzing {len(positions)} positions...")
                
                # 1. üéØ Dynamic Adaptive Closing Analysis
                account_info = self.mt5_connection.get_account_info()
                
                if self.dynamic_adaptive_closer:
                    dynamic_closing_analysis = self.dynamic_adaptive_closer.analyze_dynamic_closing(
                        positions=positions,
                        account_info=account_info,
                        current_price=current_price,
                        market_data={'volatility': 0.5, 'trend_strength': 0.6, 'volume': 0.4}  # Simplified
                    )
                    
                    if dynamic_closing_analysis.should_close:
                        # Create closing groups
                        closing_groups = self.dynamic_adaptive_closer.create_closing_groups(
                            positions=positions,
                            closing_strategy=dynamic_closing_analysis.closing_strategy,
                            current_price=current_price
                        )
                        
                        # Execute dynamic closing
                        self._execute_dynamic_closing(closing_groups, dynamic_closing_analysis)
                        return
                
                # 2. üîÑ Fallback to Enhanced Unified System
                logger.info(f"ü§ù FALLBACK UNIFIED CLOSING: Analyzing {len(positions)} positions...")
                
                # Get 7D Analysis (‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß)
                margin_health = None
                position_scores = None
                
                if hasattr(self, 'intelligent_position_manager') and self.intelligent_position_manager:
                    margin_health = self.intelligent_position_manager._analyze_margin_health(account_info)
                    position_scores = self.intelligent_position_manager._score_all_positions(positions, account_info, margin_health)
                    logger.info(f"üß† 7D Analysis Complete: {len(position_scores)} positions scored")
                    logger.info(f"üíä Margin Health: {margin_health.risk_level} - {margin_health.recommendation}")
                
                # 2. üéØ Unified Decision Making
                closing_result = self._unified_closing_decision(positions, current_price, position_scores, margin_health, account_info)
                
                if closing_result.get('should_close', False):
                    positions_to_close = closing_result.get('positions_to_close', [])
                    if positions_to_close:
                        # üîí Check for position locking conflicts
                        filtered_positions = self._filter_locked_positions(positions_to_close)
                        
                        if not filtered_positions:
                            logger.info("üîí All selected positions are already being closed - skipping")
                            return
                        
                        # üìä ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏õ‡∏¥‡∏î‡πÑ‡∏°‡πâ
                        count = len(filtered_positions)
                        expected_pnl = closing_result.get('expected_pnl', 0.0)
                        method = closing_result.get('method', 'unknown')
                        
                        logger.info(f"üí∞ Closing {count} positions (Expected: ${expected_pnl:.2f})")
                        
                        # üîí Lock positions before closing
                        self._lock_positions(filtered_positions)
                        
                        try:
                            # 3. üéØ Execute closing via Order Manager (Zero Loss Policy enforced)
                            close_result = self.order_manager.close_positions_group(
                                filtered_positions, 
                                reason=f"Unified Decision: {method}"
                            )
                            if close_result.success:
                                closed_count = len(close_result.closed_tickets)
                                total_profit = close_result.total_profit
                                logger.info(f"‚úÖ Closed {closed_count} positions: ${total_profit:.2f} profit")
                            else:
                                logger.info(f"‚ùå Close failed: {close_result.error_message}")
                        finally:
                            # üîì Always unlock positions after attempt
                            self._unlock_positions(filtered_positions)
                        return
                
                # üß† OLD SYSTEMS REMOVED - ‡πÉ‡∏ä‡πâ Unified System ‡πÅ‡∏ó‡∏ô
                
                # üö´ OLD ZONE SYSTEM REMOVED - Using Dynamic 7D Smart Closer only
                # ‚úÖ All zone analysis now handled by Dynamic 7D Smart Closer
            
            # üóëÔ∏è Emergency Exit REMOVED - All exits handled by Smart Profit Taking System
        except Exception as e:
            logger.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î: {str(e)}")
            
    def start_gui(self):
        """üö´ GUI DISABLED - Use Simple Breakout System instead"""
        logger.warning("üö´ GUI is disabled in the new Simple Breakout System")
        logger.info("üöÄ Use main_simple_breakout.py for the new trading system")
            
    def shutdown(self):
        """‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö"""
        try:
            logger.info("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏ó‡∏£‡∏î...")
            
            # ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î
            self.stop_trading()
            
            # ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MT5
            self.mt5_connection.disconnect_mt5()
            
            logger.info("‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏ó‡∏£‡∏î‡πÅ‡∏•‡πâ‡∏ß")
            
        except Exception as e:
            logger.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö: {str(e)}")
            
def main():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å"""
    try:
        logger.info("üöÄ Trading System Starting...")
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏ó‡∏£‡∏î
        trading_system = TradingSystem(
            initial_balance=10000.0,  # ‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏∏‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
            symbol="XAUUSD"           # ‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î (‡∏ó‡∏≠‡∏á‡∏Ñ‡∏≥)
        )
        
        # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
        if not trading_system.initialize_system():
            logger.info("‚ùå System initialization failed")
            return
            
        # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
        logger.info(f"üí∞ Balance: ${trading_system.initial_balance:,.2f}")
        logger.info(f"üìä Symbol: {trading_system.actual_symbol}")
        logger.info("‚úÖ System ready - Press 'Start Trading' to begin")
        logger.info("-" * 50)
        
        # ‡πÄ‡∏£‡∏¥‡πà‡∏° GUI (‡πÑ‡∏°‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥)
        trading_system.start_gui()
        
        # ‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏°‡∏∑‡πà‡∏≠ GUI ‡∏õ‡∏¥‡∏î
        trading_system.shutdown()
        
    except KeyboardInterrupt:
        logger.info("‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏´‡∏¢‡∏∏‡∏î‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ")
    except Exception as e:
        logger.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å: {str(e)}")
    finally:
        logger.info("üèÅ ‡∏à‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô Trading System")

if __name__ == "__main__":
    main()
