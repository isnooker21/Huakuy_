# -*- coding: utf-8 -*-
"""
Group Closing Manager
‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡∏¥‡∏î‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÅ‡∏ö‡∏ö‡∏Å‡∏•‡∏∏‡πà‡∏° (Group Closing) ‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏°‡πâ‡∏à‡∏≤‡∏Å Order Tracking System
‡πÅ‡∏•‡∏∞‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏ß‡∏°‡∏Å‡∏•‡∏∏‡πà‡∏° Protected + HG + Profit Helper ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏¥‡∏î‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô
"""

import logging
import time
from typing import Dict, List, Any, Optional, Tuple
from dataclasses import dataclass
from datetime import datetime

logger = logging.getLogger(__name__)

@dataclass
class ClosingGroup:
    """‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏õ‡∏¥‡∏î"""
    group_id: str
    group_type: str
    positions: List[Any]
    total_profit: float
    min_profit_required: float
    can_close: bool
    reason: str
    protected_positions: List[Any] = None
    hg_positions: List[Any] = None
    helper_positions: List[Any] = None
    created_time: float = None

@dataclass
class ProfitHelperSelection:
    """‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Profit Helper"""
    selected_helpers: List[Any]
    total_helper_profit: float
    distance_from_price: List[float]
    selection_reason: str

class GroupClosingManager:
    """‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÅ‡∏ö‡∏ö‡∏Å‡∏•‡∏∏‡πà‡∏°"""
    
    def __init__(self, order_manager=None, mt5_connection=None):
        """
        Args:
            order_manager: OrderManager instance
            mt5_connection: MT5Connection instance
        """
        self.order_manager = order_manager
        self.mt5_connection = mt5_connection
        
        # üéØ Dynamic Minimum Profit Configuration
        self.min_profit_config = {
            'base_amount': 2.0,      # ‡∏Å‡∏≥‡πÑ‡∏£‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
            'multiplier': 1.5,       # ‡∏Ñ‡∏π‡∏ì‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÑ‡∏°‡πâ
            'max_amount': 20.0,      # ‡∏Å‡∏≥‡πÑ‡∏£‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
            'group_type_multipliers': {
                'PROTECTED_HG': 1.0,
                'PROTECTED_HG_HELPER': 1.2,
                'MULTI_GROUP': 1.5
            }
        }
        
        # üìä Group Formation Settings
        self.group_settings = {
            'max_group_size': 10,        # ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÑ‡∏°‡πâ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°
            'min_profit_margin': 0.1,    # ‡∏Å‡∏≥‡πÑ‡∏£‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥ 10%
            'max_loss_tolerance': -5.0,  # ‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö
            'helper_selection_radius': 50.0  # ‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Helper
        }
        
        # üîÑ Tracking
        self.closing_history = []
        self.last_analysis_time = 0
        self.analysis_interval = 5  # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ó‡∏∏‡∏Å 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
        
    def analyze_closing_opportunities(self, positions: List[Any], position_statuses: Dict, 
                                    current_price: float) -> List[ClosingGroup]:
        """
        ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏õ‡∏¥‡∏î‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÅ‡∏ö‡∏ö‡∏Å‡∏•‡∏∏‡πà‡∏°
        
        Args:
            positions: List[Position] - ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ positions ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
            position_statuses: Dict - ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏°‡πâ‡∏à‡∏≤‡∏Å position_status_manager
            current_price: float - ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
            
        Returns:
            List[ClosingGroup] - ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏õ‡∏¥‡∏î
        """
        try:
            logger.info(f"üîç [GROUP CLOSING] Analyzing closing opportunities for {len(positions)} positions")
            
            closing_groups = []
            
            # 1. ‡∏£‡∏ß‡∏°‡∏Å‡∏•‡∏∏‡πà‡∏° Protected + HG ‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏Å‡∏±‡∏ô‡∏≠‡∏¢‡∏π‡πà
            protected_hg_groups = self.form_protected_hg_groups(positions, position_statuses)
            logger.info(f"üìä Found {len(protected_hg_groups)} Protected+HG groups")
            
            # 2. ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Å‡∏•‡∏∏‡πà‡∏°
            for group in protected_hg_groups:
                group_id = f"GROUP_{int(time.time())}_{len(closing_groups)}"
                
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ Helper ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                if group['needs_helper']:
                    # ‡∏´‡∏≤ Profit Helper
                    available_helpers = self._get_available_profit_helpers(positions, position_statuses)
                    helper_selection = self.select_profit_helpers_from_edge(
                        available_helpers, current_price, group['helper_amount_needed']
                    )
                    
                    if helper_selection.selected_helpers:
                        # ‡∏£‡∏ß‡∏° Helper ‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏•‡∏∏‡πà‡∏°
                        all_positions = group['protected_positions'] + group['hg_positions'] + helper_selection.selected_helpers
                        total_profit = group['total_profit'] + helper_selection.total_helper_profit
                        group_type = 'PROTECTED_HG_HELPER'
                    else:
                        # ‡πÑ‡∏°‡πà‡∏°‡∏µ Helper ‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠
                        all_positions = group['protected_positions'] + group['hg_positions']
                        total_profit = group['total_profit']
                        group_type = 'PROTECTED_HG'
                else:
                    # ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ Helper
                    all_positions = group['protected_positions'] + group['hg_positions']
                    total_profit = group['total_profit']
                    group_type = 'PROTECTED_HG'
                
                # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Å‡∏≥‡πÑ‡∏£‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥
                min_profit_required = self.calculate_dynamic_minimum_profit(
                    len(all_positions), group_type
                )
                
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏¥‡∏î‡πÑ‡∏î‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                can_close = total_profit >= min_profit_required
                
                closing_group = ClosingGroup(
                    group_id=group_id,
                    group_type=group_type,
                    positions=all_positions,
                    total_profit=total_profit,
                    min_profit_required=min_profit_required,
                    can_close=can_close,
                    reason=f"{group_type} group - Profit: ${total_profit:.2f}, Required: ${min_profit_required:.2f}",
                    protected_positions=group['protected_positions'],
                    hg_positions=group['hg_positions'],
                    helper_positions=helper_selection.selected_helpers if group['needs_helper'] else [],
                    created_time=time.time()
                )
                
                closing_groups.append(closing_group)
                
                if can_close:
                    logger.info(f"‚úÖ [GROUP CLOSING] Group {group_id} ready to close: {closing_group.reason}")
                else:
                    logger.info(f"‚ö†Ô∏è [GROUP CLOSING] Group {group_id} needs more profit: {closing_group.reason}")
            
            # 3. ‡πÄ‡∏Å‡πá‡∏ö‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥
            self.closing_history.extend(closing_groups)
            if len(self.closing_history) > 100:  # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥
                self.closing_history = self.closing_history[-100:]
            
            logger.info(f"üéØ [GROUP CLOSING] Analysis complete: {len(closing_groups)} groups found")
            return closing_groups
            
        except Exception as e:
            logger.error(f"‚ùå [GROUP CLOSING] Error analyzing opportunities: {e}")
            return []
    
    def form_protected_hg_groups(self, positions: List[Any], position_statuses: Dict) -> List[Dict]:
        """
        ‡∏£‡∏ß‡∏°‡∏Å‡∏•‡∏∏‡πà‡∏° Protected + HG ‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏Å‡∏±‡∏ô‡∏≠‡∏¢‡∏π‡πà
        
        Args:
            positions: List[Position]
            position_statuses: Dict
            
        Returns:
            List[Dict] - ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Å‡∏•‡∏∏‡πà‡∏° Protected + HG
        """
        try:
            groups = []
            processed_tickets = set()
            
            for ticket, status_obj in position_statuses.items():
                if ticket in processed_tickets:
                    continue
                
                status = status_obj.status
                
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Protected
                if 'Protected' in status:
                    protected_pos = self._get_position_by_ticket(positions, ticket)
                    if not protected_pos:
                        continue
                    
                    # ‡∏´‡∏≤ HG ‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏≥‡πÑ‡∏°‡πâ‡∏ô‡∏µ‡πâ
                    hg_positions = self._find_hedge_guards_for_protected(
                        positions, position_statuses, protected_pos
                    )
                    
                    if hg_positions:
                        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Å‡∏≥‡πÑ‡∏£‡∏£‡∏ß‡∏°
                        total_profit = self._calculate_group_profit([protected_pos] + hg_positions)
                        
                        group = {
                            'protected_positions': [protected_pos],
                            'hg_positions': hg_positions,
                            'total_profit': total_profit,
                            'needs_helper': total_profit < 0,
                            'helper_amount_needed': abs(total_profit) + self.min_profit_config['base_amount']
                        }
                        
                        groups.append(group)
                        
                        # ‡∏ó‡∏≥‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡∏ß‡πà‡∏≤‡πÑ‡∏î‡πâ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÅ‡∏•‡πâ‡∏ß
                        processed_tickets.add(ticket)
                        for hg_pos in hg_positions:
                            processed_tickets.add(getattr(hg_pos, 'ticket', 0))
            
            logger.info(f"üìä [GROUP FORMATION] Formed {len(groups)} Protected+HG groups")
            return groups
            
        except Exception as e:
            logger.error(f"‚ùå [GROUP FORMATION] Error forming groups: {e}")
            return []
    
    def select_profit_helpers_from_edge(self, available_helpers: List[Any], 
                                      current_price: float, amount_needed: float) -> ProfitHelperSelection:
        """
        ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Profit Helper ‡∏à‡∏≤‡∏Å‡∏Ç‡∏≠‡∏ö‡∏ô‡∏≠‡∏Å‡∏™‡∏∏‡∏î
        
        Args:
            available_helpers: List[Position] - ‡πÑ‡∏°‡πâ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Profit Helper
            current_price: float - ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô  
            amount_needed: float - ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°
            
        Returns:
            ProfitHelperSelection - ‡πÑ‡∏°‡πâ Helper ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß
        """
        try:
            if not available_helpers:
                return ProfitHelperSelection([], 0.0, [], "No helpers available")
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
            helper_distances = []
            for helper in available_helpers:
                helper_price = getattr(helper, 'price_open', 0.0)
                distance = abs(helper_price - current_price)
                profit = getattr(helper, 'profit', 0.0)
                
                helper_distances.append({
                    'position': helper,
                    'distance': distance,
                    'profit': profit,
                    'price': helper_price
                })
            
            # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á (‡πÑ‡∏Å‡∏•‡∏™‡∏∏‡∏î‡∏Å‡πà‡∏≠‡∏ô)
            helper_distances.sort(key=lambda x: x['distance'], reverse=True)
            
            # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡∏•‡∏∞‡∏ï‡∏±‡∏ß‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏Å‡∏≥‡πÑ‡∏£‡∏£‡∏ß‡∏°‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏ö‡∏ß‡∏Å
            selected_helpers = []
            total_helper_profit = 0.0
            distances = []
            
            for helper_data in helper_distances:
                if total_helper_profit >= amount_needed:
                    break
                
                selected_helpers.append(helper_data['position'])
                total_helper_profit += helper_data['profit']
                distances.append(helper_data['distance'])
            
            selection_reason = f"Selected {len(selected_helpers)} helpers from edge, total profit: ${total_helper_profit:.2f}"
            
            logger.info(f"üéØ [HELPER SELECTION] {selection_reason}")
            
            return ProfitHelperSelection(
                selected_helpers=selected_helpers,
                total_helper_profit=total_helper_profit,
                distance_from_price=distances,
                selection_reason=selection_reason
            )
            
        except Exception as e:
            logger.error(f"‚ùå [HELPER SELECTION] Error selecting helpers: {e}")
            return ProfitHelperSelection([], 0.0, [], f"Error: {e}")
    
    def calculate_dynamic_minimum_profit(self, position_count: int, group_type: str) -> float:
        """
        ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Å‡∏≥‡πÑ‡∏£‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥‡πÅ‡∏ö‡∏ö Dynamic
        
        Args:
            position_count: int - ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÑ‡∏°‡πâ‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°
            group_type: str - ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏•‡∏∏‡πà‡∏°
            
        Returns:
            float - ‡∏Å‡∏≥‡πÑ‡∏£‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
        """
        try:
            # ‡∏Å‡∏≥‡πÑ‡∏£‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
            base_amount = self.min_profit_config['base_amount']
            
            # ‡∏Ñ‡∏π‡∏ì‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÑ‡∏°‡πâ
            multiplier = self.min_profit_config['multiplier']
            position_multiplier = (position_count - 1) * multiplier
            
            # ‡∏Ñ‡∏π‡∏ì‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏•‡∏∏‡πà‡∏°
            group_multiplier = self.min_profit_config['group_type_multipliers'].get(group_type, 1.0)
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Å‡∏≥‡πÑ‡∏£‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥
            min_profit = (base_amount + position_multiplier) * group_multiplier
            
            # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô‡∏Ñ‡πà‡∏≤‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
            max_amount = self.min_profit_config['max_amount']
            min_profit = min(min_profit, max_amount)
            
            logger.debug(f"üí∞ [MIN PROFIT] Position count: {position_count}, Group type: {group_type}, Min profit: ${min_profit:.2f}")
            
            return min_profit
            
        except Exception as e:
            logger.error(f"‚ùå [MIN PROFIT] Error calculating minimum profit: {e}")
            return self.min_profit_config['base_amount']
    
    def execute_group_closing(self, closing_group: ClosingGroup) -> Dict[str, Any]:
        """
        ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå
        
        Args:
            closing_group: ClosingGroup - ‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î
            
        Returns:
            Dict[str, Any] - ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î
        """
        try:
            if not closing_group.can_close:
                return {
                    'success': False,
                    'message': f'Group {closing_group.group_id} cannot be closed: {closing_group.reason}',
                    'group_id': closing_group.group_id
                }
            
            logger.info(f"üöÄ [GROUP CLOSING] Executing group {closing_group.group_id}")
            logger.info(f"   Type: {closing_group.group_type}")
            logger.info(f"   Positions: {len(closing_group.positions)}")
            logger.info(f"   Total Profit: ${closing_group.total_profit:.2f}")
            logger.info(f"   Min Required: ${closing_group.min_profit_required:.2f}")
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Zero Loss Policy
            if not self._check_zero_loss_policy(closing_group):
                return {
                    'success': False,
                    'message': f'Group {closing_group.group_id} failed Zero Loss Policy check',
                    'group_id': closing_group.group_id
                }
            
            # ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏õ‡∏¥‡∏î‡πÑ‡∏õ‡∏¢‡∏±‡∏á OrderManager
            if self.order_manager:
                result = self.order_manager.close_positions_group_raw(
                    closing_group.positions, 
                    f"Group Closing: {closing_group.group_type}"
                )
                
                if result.success:
                    logger.info(f"‚úÖ [GROUP CLOSING] Successfully closed group {closing_group.group_id}")
                    logger.info(f"   Closed positions: {len(result.closed_tickets)}")
                    logger.info(f"   Total profit: ${result.total_profit:.2f}")
                    
                    return {
                        'success': True,
                        'message': f'Group {closing_group.group_id} closed successfully',
                        'group_id': closing_group.group_id,
                        'closed_tickets': result.closed_tickets,
                        'total_profit': result.total_profit,
                        'closed_count': len(result.closed_tickets)
                    }
                else:
                    logger.error(f"‚ùå [GROUP CLOSING] Failed to close group {closing_group.group_id}: {result.error_message}")
                    return {
                        'success': False,
                        'message': f'Group {closing_group.group_id} failed: {result.error_message}',
                        'group_id': closing_group.group_id
                    }
            else:
                logger.error("‚ùå [GROUP CLOSING] OrderManager not available")
                return {
                    'success': False,
                    'message': 'OrderManager not available',
                    'group_id': closing_group.group_id
                }
                
        except Exception as e:
            logger.error(f"‚ùå [GROUP CLOSING] Error executing group closing: {e}")
            return {
                'success': False,
                'message': f'Error: {e}',
                'group_id': closing_group.group_id
            }
    
    def _get_position_by_ticket(self, positions: List[Any], ticket: int) -> Optional[Any]:
        """‡∏´‡∏≤ Position ‡∏ï‡∏≤‡∏° Ticket"""
        try:
            for pos in positions:
                if hasattr(pos, 'ticket') and pos.ticket == ticket:
                    return pos
            return None
        except Exception as e:
            logger.error(f"‚ùå Error finding position by ticket: {e}")
            return None
    
    def _find_hedge_guards_for_protected(self, positions: List[Any], position_statuses: Dict, 
                                       protected_pos: Any) -> List[Any]:
        """‡∏´‡∏≤ HG ‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏≥‡πÑ‡∏°‡πâ Protected"""
        try:
            hg_positions = []
            protected_ticket = getattr(protected_pos, 'ticket', 0)
            
            for ticket, status_obj in position_statuses.items():
                status = status_obj.status
                if 'HG' in status and ticket != protected_ticket:
                    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô HG ‡∏Ç‡∏≠‡∏á‡πÑ‡∏°‡πâ‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                    relationships = getattr(status_obj, 'relationships', {})
                    if relationships.get('is_hedging'):
                        hedge_target = relationships.get('hedge_target', {})
                        if hedge_target.get('ticket') == protected_ticket:
                            hg_pos = self._get_position_by_ticket(positions, ticket)
                            if hg_pos:
                                hg_positions.append(hg_pos)
            
            return hg_positions
            
        except Exception as e:
            logger.error(f"‚ùå Error finding hedge guards: {e}")
            return []
    
    def _get_available_profit_helpers(self, positions: List[Any], position_statuses: Dict) -> List[Any]:
        """‡∏´‡∏≤‡πÑ‡∏°‡πâ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Profit Helper"""
        try:
            helpers = []
            for ticket, status_obj in position_statuses.items():
                status = status_obj.status
                if 'Profit Helper' in status:
                    helper_pos = self._get_position_by_ticket(positions, ticket)
                    if helper_pos:
                        helpers.append(helper_pos)
            return helpers
        except Exception as e:
            logger.error(f"‚ùå Error getting profit helpers: {e}")
            return []
    
    def _calculate_group_profit(self, positions: List[Any]) -> float:
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Å‡∏≥‡πÑ‡∏£‡∏£‡∏ß‡∏°‡∏Ç‡∏≠‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏°"""
        try:
            total_profit = 0.0
            for pos in positions:
                profit = getattr(pos, 'profit', 0.0)
                swap = getattr(pos, 'swap', 0.0)
                commission = getattr(pos, 'commission', 0.0)
                total_profit += profit + swap + commission
            return total_profit
        except Exception as e:
            logger.error(f"‚ùå Error calculating group profit: {e}")
            return 0.0
    
    def _check_zero_loss_policy(self, closing_group: ClosingGroup) -> bool:
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Zero Loss Policy"""
        try:
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏°‡∏µ‡∏Å‡∏≥‡πÑ‡∏£‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if closing_group.total_profit < closing_group.min_profit_required:
                logger.warning(f"üö´ [ZERO LOSS] Group {closing_group.group_id} profit insufficient")
                return False
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÑ‡∏°‡πâ‡∏ó‡∏±‡πâ‡∏á BUY ‡πÅ‡∏•‡∏∞ SELL ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (Hedge Pair)
            buy_count = 0
            sell_count = 0
            
            for pos in closing_group.positions:
                pos_type = getattr(pos, 'type', 0)
                if pos_type == 0:  # BUY
                    buy_count += 1
                elif pos_type == 1:  # SELL
                    sell_count += 1
            
            # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡πÑ‡∏°‡πâ‡∏ó‡∏±‡πâ‡∏á BUY ‡πÅ‡∏•‡∏∞ SELL ‡πÉ‡∏´‡πâ‡∏ú‡πà‡∏≤‡∏ô
            if buy_count > 0 and sell_count > 0:
                logger.info(f"‚úÖ [ZERO LOSS] Group {closing_group.group_id} is hedge pair - approved")
                return True
            
            # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Å‡∏≥‡πÑ‡∏£‡∏°‡∏≤‡∏Å
            if closing_group.total_profit >= closing_group.min_profit_required * 1.5:
                logger.info(f"‚úÖ [ZERO LOSS] Group {closing_group.group_id} has sufficient profit - approved")
                return True
            
            logger.warning(f"üö´ [ZERO LOSS] Group {closing_group.group_id} failed policy check")
            return False
            
        except Exception as e:
            logger.error(f"‚ùå [ZERO LOSS] Error checking policy: {e}")
            return False
    
    def get_closing_statistics(self) -> Dict[str, Any]:
        """‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°"""
        try:
            total_groups = len(self.closing_history)
            successful_groups = len([g for g in self.closing_history if g.can_close])
            
            return {
                'total_groups_analyzed': total_groups,
                'successful_groups': successful_groups,
                'success_rate': (successful_groups / total_groups * 100) if total_groups > 0 else 0,
                'last_analysis_time': self.last_analysis_time
            }
        except Exception as e:
            logger.error(f"‚ùå Error getting statistics: {e}")
            return {}
    
    def clear_history(self):
        """‡∏•‡πâ‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°"""
        self.closing_history.clear()
        logger.info("üßπ [GROUP CLOSING] History cleared")
