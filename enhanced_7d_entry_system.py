#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üöÄ Enhanced 7D Entry + Position Modifier System
‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏°‡πâ + ‡πÅ‡∏Å‡πâ‡πÑ‡∏°‡πâ ‡πÅ‡∏ö‡∏ö 7 ‡∏°‡∏¥‡∏ï‡∏¥ ‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡∏¥‡∏î‡πÑ‡∏°‡πâ

Features:
- 7D Entry Analysis (‡πÉ‡∏ä‡πâ 7 ‡∏°‡∏¥‡∏ï‡∏¥‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡∏¥‡∏î)
- Smart Position Modifier (‡πÅ‡∏Å‡πâ‡πÑ‡∏°‡πâ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤)
- Portfolio Synergy (‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÑ‡∏°‡πâ‡πÄ‡∏Å‡πà‡∏≤)
- Integration with Dynamic 7D Smart Closer
- Zero Loss Philosophy (‡πÑ‡∏°‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÉ‡∏´‡∏°‡πà)
"""

import logging
import numpy as np
from typing import Dict, List, Optional, Tuple, Any
from dataclasses import dataclass
from datetime import datetime, timedelta
from enum import Enum
import threading

logger = logging.getLogger(__name__)

class EntryStrategy(Enum):
    """‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏°‡πâ"""
    PERFECT_ENTRY = "PERFECT_ENTRY"      # ‡πÄ‡∏Ç‡πâ‡∏≤‡∏à‡∏∏‡∏î‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå
    RECOVERY_ENTRY = "RECOVERY_ENTRY"    # ‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ä‡πà‡∏ß‡∏¢‡πÑ‡∏°‡πâ‡πÄ‡∏Å‡πà‡∏≤
    BALANCE_ENTRY = "BALANCE_ENTRY"      # ‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏°‡∏î‡∏∏‡∏•
    HEDGE_ENTRY = "HEDGE_ENTRY"          # ‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô
    MODIFIER_ENTRY = "MODIFIER_ENTRY"    # ‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏Å‡πâ‡πÑ‡∏°‡πâ

class ModifierAction(Enum):
    """‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Position"""
    PARTIAL_CLOSE = "PARTIAL_CLOSE"      # ‡∏õ‡∏¥‡∏î‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô
    ADD_COUNTER = "ADD_COUNTER"          # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏°‡πâ‡∏ï‡∏£‡∏á‡∏Ç‡πâ‡∏≤‡∏°
    ADD_SUPPORT = "ADD_SUPPORT"          # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏°‡πâ‡∏ä‡πà‡∏ß‡∏¢
    HEDGE_PROTECT = "HEDGE_PROTECT"      # ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏î‡πâ‡∏ß‡∏¢ hedge
    WAIT_IMPROVE = "WAIT_IMPROVE"        # ‡∏£‡∏≠‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏∞‡∏î‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô

@dataclass
class Entry7DAnalysis:
    """‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏°‡πâ 7 ‡∏°‡∏¥‡∏ï‡∏¥"""
    # üéØ 7D Entry Dimensions (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡∏¥‡∏î)
    profit_potential: float      # ‡∏®‡∏±‡∏Å‡∏¢‡∏†‡∏≤‡∏û‡∏Å‡∏≥‡πÑ‡∏£ (0-100)
    balance_contribution: float  # ‡∏Å‡∏≤‡∏£‡∏ä‡πà‡∏ß‡∏¢‡∏™‡∏°‡∏î‡∏∏‡∏• (0-100)
    margin_safety: float         # ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢ margin (0-100)
    recovery_support: float      # ‡∏Å‡∏≤‡∏£‡∏ä‡πà‡∏ß‡∏¢‡∏ü‡∏∑‡πâ‡∏ô portfolio (0-100)
    timing_score: float          # ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏∞ (0-100)
    correlation_benefit: float   # ‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå‡∏à‡∏≤‡∏Å correlation (0-100)
    volatility_advantage: float  # ‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå‡∏à‡∏≤‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô (0-100)
    
    # üìä Summary
    total_7d_score: float        # ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏ß‡∏° 7 ‡∏°‡∏¥‡∏ï‡∏¥
    entry_strategy: EntryStrategy
    confidence: float            # ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à (0-1)
    recommended_lot: float       # lot ‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
    reason: str

@dataclass
class PositionModification:
    """‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Position"""
    position_ticket: int
    current_problem: str         # ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏û‡∏ö
    modifier_action: ModifierAction
    suggested_entry: Dict        # ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏°‡πâ‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
    expected_improvement: float  # ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏î‡∏´‡∏ß‡∏±‡∏á
    risk_assessment: str         # ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô risk

class Enhanced7DEntrySystem:
    """üöÄ ‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏°‡πâ + ‡πÅ‡∏Å‡πâ‡πÑ‡∏°‡πâ ‡πÅ‡∏ö‡∏ö 7 ‡∏°‡∏¥‡∏ï‡∏¥"""
    
    def __init__(self, intelligent_manager=None, purpose_tracker=None, 
                 dynamic_7d_closer=None, mt5_connection=None):
        self.intelligent_manager = intelligent_manager
        self.purpose_tracker = purpose_tracker
        self.dynamic_7d_closer = dynamic_7d_closer
        self.mt5_connection = mt5_connection
        
        # üéØ 7D Entry Weights (‡∏õ‡∏£‡∏±‡∏ö‡πÑ‡∏î‡πâ‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå)
        self.entry_weights = {
            'profit_potential': 0.20,      # 20% - ‡∏Å‡∏≥‡πÑ‡∏£‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏î‡∏´‡∏ß‡∏±‡∏á
            'balance_contribution': 0.15,  # 15% - ‡∏Å‡∏≤‡∏£‡∏ä‡πà‡∏ß‡∏¢‡∏™‡∏°‡∏î‡∏∏‡∏•
            'margin_safety': 0.15,         # 15% - ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
            'recovery_support': 0.20,      # 20% - ‡∏Å‡∏≤‡∏£‡∏ä‡πà‡∏ß‡∏¢‡∏ü‡∏∑‡πâ‡∏ô
            'timing_score': 0.10,          # 10% - ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏∞
            'correlation_benefit': 0.10,   # 10% - correlation
            'volatility_advantage': 0.10   # 10% - volatility
        }
        
        # üîß Position Modifier Settings
        self.modifier_thresholds = {
            'distance_problem': 50.0,      # ‡∏´‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏Ñ‡∏≤ > 50 pips = ‡∏õ‡∏±‡∏ç‡∏´‡∏≤
            'time_problem': 24,            # ‡∏Ñ‡πâ‡∏≤‡∏á‡∏ô‡∏≤‡∏ô > 24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á = ‡∏õ‡∏±‡∏ç‡∏´‡∏≤
            'loss_problem': -50.0,         # ‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô > $50 = ‡∏õ‡∏±‡∏ç‡∏´‡∏≤
            'imbalance_problem': 70.0      # ‡πÄ‡∏≠‡∏µ‡∏¢‡∏á > 70% = ‡∏õ‡∏±‡∏ç‡∏´‡∏≤
        }
        
        logger.info("üöÄ Enhanced 7D Entry + Position Modifier System initialized")
    
    def analyze_entry_opportunity(self, signal_direction: str, current_price: float, 
                                 positions: List[Any], account_info: Dict,
                                 candle_data: Any = None) -> Entry7DAnalysis:
        """
        üéØ ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏°‡πâ‡πÅ‡∏ö‡∏ö 7 ‡∏°‡∏¥‡∏ï‡∏¥
        """
        try:
            logger.info(f"üéØ 7D ENTRY ANALYSIS: {signal_direction} at {current_price:.2f}")
            
            # 1. üìä Portfolio Health Check
            portfolio_health = self._analyze_current_portfolio_health(positions, account_info)
            
            # 2. üéØ Calculate 7D Entry Scores
            entry_scores = self._calculate_7d_entry_scores(
                signal_direction, current_price, positions, account_info, portfolio_health
            )
            
            # 3. üß† Determine Entry Strategy
            entry_strategy = self._determine_entry_strategy(entry_scores, positions)
            
            # 4. üìè Calculate Recommended Lot Size
            recommended_lot = self._calculate_strategic_lot_size(
                entry_scores, portfolio_health, account_info
            )
            
            # 5. üìã Create Analysis Result
            analysis = Entry7DAnalysis(
                profit_potential=entry_scores['profit_potential'],
                balance_contribution=entry_scores['balance_contribution'],
                margin_safety=entry_scores['margin_safety'],
                recovery_support=entry_scores['recovery_support'],
                timing_score=entry_scores['timing_score'],
                correlation_benefit=entry_scores['correlation_benefit'],
                volatility_advantage=entry_scores['volatility_advantage'],
                total_7d_score=entry_scores['total_score'],
                entry_strategy=entry_strategy,
                confidence=entry_scores['confidence'],
                recommended_lot=recommended_lot,
                reason=entry_scores['reason']
            )
            
            self._log_7d_entry_analysis(analysis)
            return analysis
            
        except Exception as e:
            logger.error(f"‚ùå Error in 7D entry analysis: {e}")
            # Return conservative analysis
            return Entry7DAnalysis(
                profit_potential=50.0, balance_contribution=50.0, margin_safety=50.0,
                recovery_support=50.0, timing_score=50.0, correlation_benefit=50.0,
                volatility_advantage=50.0, total_7d_score=50.0,
                entry_strategy=EntryStrategy.PERFECT_ENTRY, confidence=0.5,
                recommended_lot=0.01, reason="Error in analysis - using conservative approach"
            )
    
    def analyze_position_modifications(self, positions: List[Any], 
                                     account_info: Dict) -> List[PositionModification]:
        """
        üîß ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå Position ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
        """
        try:
            modifications = []
            current_price = self._get_current_price()
            
            logger.info(f"üîß POSITION MODIFIER: Analyzing {len(positions)} positions")
            
            for position in positions:
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏´‡∏≤‡∏õ‡∏±‡∏ç‡∏´‡∏≤
                problems = self._detect_position_problems(position, current_price, account_info)
                
                if problems:
                    # ‡∏´‡∏≤‡∏ß‡∏¥‡∏ò‡∏µ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
                    modifier_action = self._suggest_modifier_action(position, problems, positions)
                    
                    # ‡∏™‡∏£‡πâ‡∏≤‡∏á suggested entry
                    suggested_entry = self._create_modifier_entry_suggestion(
                        position, modifier_action, current_price
                    )
                    
                    modification = PositionModification(
                        position_ticket=getattr(position, 'ticket', 0),
                        current_problem=problems[0],  # ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏´‡∏•‡∏±‡∏Å
                        modifier_action=modifier_action,
                        suggested_entry=suggested_entry,
                        expected_improvement=self._calculate_expected_improvement(
                            position, modifier_action
                        ),
                        risk_assessment=self._assess_modifier_risk(position, modifier_action)
                    )
                    
                    modifications.append(modification)
            
            if modifications:
                logger.info(f"üîß Found {len(modifications)} positions needing modification")
                self._log_position_modifications(modifications)
            
            return modifications
            
        except Exception as e:
            logger.error(f"‚ùå Error analyzing position modifications: {e}")
            return []
    
    def integrate_with_closing_system(self, entry_analysis: Entry7DAnalysis,
                                    position_modifications: List[PositionModification]) -> Dict[str, Any]:
        """
        ü§ù Integration ‡∏Å‡∏±‡∏ö Dynamic 7D Smart Closer
        """
        try:
            integration_result = {
                'entry_recommendation': None,
                'modifier_recommendations': [],
                'closing_coordination': {},
                'portfolio_improvement': {}
            }
            
            # 1. üéØ Entry Coordination
            if entry_analysis.total_7d_score > 70.0:
                integration_result['entry_recommendation'] = {
                    'should_enter': True,
                    'strategy': entry_analysis.entry_strategy.value,
                    'lot_size': entry_analysis.recommended_lot,
                    'confidence': entry_analysis.confidence,
                    'coordination_note': 'High 7D score - coordinated with closing system'
                }
            
            # 2. üîß Modifier Coordination
            for modification in position_modifications:
                if modification.expected_improvement > 0.3:  # 30% improvement
                    integration_result['modifier_recommendations'].append({
                        'ticket': modification.position_ticket,
                        'action': modification.modifier_action.value,
                        'entry_suggestion': modification.suggested_entry,
                        'priority': 'HIGH' if modification.expected_improvement > 0.5 else 'MEDIUM'
                    })
            
            # 3. ü§ù Closing System Coordination
            if self.dynamic_7d_closer:
                integration_result['closing_coordination'] = {
                    'compatible_with_closing': True,
                    'entry_supports_closing': entry_analysis.recovery_support > 60.0,
                    'modifier_supports_closing': len(position_modifications) > 0
                }
            
            logger.info(f"ü§ù INTEGRATION: Entry score {entry_analysis.total_7d_score:.1f}, "
                       f"Modifiers: {len(position_modifications)}")
            
            return integration_result
            
        except Exception as e:
            logger.error(f"‚ùå Error in system integration: {e}")
            return {'error': str(e)}
    
    # üîß Helper Methods
    def _calculate_7d_entry_scores(self, direction: str, price: float, positions: List[Any],
                                  account_info: Dict, portfolio_health: Dict) -> Dict[str, float]:
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô 7 ‡∏°‡∏¥‡∏ï‡∏¥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏°‡πâ"""
        try:
            scores = {}
            
            # 1. üí∞ Profit Potential
            scores['profit_potential'] = self._calculate_profit_potential(direction, price, positions)
            
            # 2. ‚öñÔ∏è Balance Contribution  
            scores['balance_contribution'] = self._calculate_balance_contribution(direction, positions)
            
            # 3. üõ°Ô∏è Margin Safety
            scores['margin_safety'] = self._calculate_margin_safety(account_info, price)
            
            # 4. üîÑ Recovery Support
            scores['recovery_support'] = self._calculate_recovery_support(direction, price, positions)
            
            # 5. ‚è∞ Timing Score
            scores['timing_score'] = self._calculate_timing_score(direction, price)
            
            # 6. üîó Correlation Benefit
            scores['correlation_benefit'] = self._calculate_correlation_benefit(direction, positions)
            
            # 7. üìä Volatility Advantage
            scores['volatility_advantage'] = self._calculate_volatility_advantage(direction, price)
            
            # üìä Total Score (weighted)
            total_score = sum(
                scores[dimension] * weight 
                for dimension, weight in self.entry_weights.items()
            )
            
            scores['total_score'] = total_score
            scores['confidence'] = min(total_score / 100.0, 1.0)
            scores['reason'] = f"7D Analysis: {total_score:.1f}/100"
            
            return scores
            
        except Exception as e:
            logger.error(f"‚ùå Error calculating 7D entry scores: {e}")
            return {
                'profit_potential': 50.0, 'balance_contribution': 50.0, 'margin_safety': 50.0,
                'recovery_support': 50.0, 'timing_score': 50.0, 'correlation_benefit': 50.0,
                'volatility_advantage': 50.0, 'total_score': 50.0, 'confidence': 0.5,
                'reason': 'Error in calculation'
            }
    
    def _get_current_price(self) -> float:
        """‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô"""
        try:
            if self.mt5_connection:
                return self.mt5_connection.get_current_price()
            return 2650.0  # Default fallback
        except:
            return 2650.0
    
    def _log_7d_entry_analysis(self, analysis: Entry7DAnalysis):
        """‡πÅ‡∏™‡∏î‡∏á log ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå 7D Entry"""
        logger.info("üéØ 7D ENTRY ANALYSIS RESULT:")
        logger.info("=" * 60)
        logger.info(f"üí∞ Profit Potential: {analysis.profit_potential:.1f}")
        logger.info(f"‚öñÔ∏è Balance Contribution: {analysis.balance_contribution:.1f}")
        logger.info(f"üõ°Ô∏è Margin Safety: {analysis.margin_safety:.1f}")
        logger.info(f"üîÑ Recovery Support: {analysis.recovery_support:.1f}")
        logger.info(f"‚è∞ Timing Score: {analysis.timing_score:.1f}")
        logger.info(f"üîó Correlation Benefit: {analysis.correlation_benefit:.1f}")
        logger.info(f"üìä Volatility Advantage: {analysis.volatility_advantage:.1f}")
        logger.info("-" * 40)
        logger.info(f"üéØ TOTAL 7D SCORE: {analysis.total_7d_score:.1f}/100")
        logger.info(f"üß† Strategy: {analysis.entry_strategy.value}")
        logger.info(f"üìè Recommended Lot: {analysis.recommended_lot:.3f}")
        logger.info(f"üé™ Confidence: {analysis.confidence:.2f}")
        logger.info("=" * 60)
    
    # üìä 7D Calculation Methods
    def _calculate_profit_potential(self, direction: str, price: float, positions: List[Any]) -> float:
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏®‡∏±‡∏Å‡∏¢‡∏†‡∏≤‡∏û‡∏Å‡∏≥‡πÑ‡∏£"""
        try:
            # ‡∏î‡∏π‡∏à‡∏≤‡∏Å S/R levels ‡πÅ‡∏•‡∏∞ trend
            base_score = 60.0
            
            # ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏° existing positions
            if positions:
                avg_profit = sum(getattr(p, 'profit', 0) for p in positions) / len(positions)
                if avg_profit < 0:
                    base_score += 20.0  # ‡∏°‡∏µ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏±‡∏ß
            
            return min(base_score, 100.0)
        except:
            return 60.0
    
    def _calculate_balance_contribution(self, direction: str, positions: List[Any]) -> float:
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Å‡∏≤‡∏£‡∏ä‡πà‡∏ß‡∏¢‡∏™‡∏°‡∏î‡∏∏‡∏•"""
        try:
            if not positions:
                return 70.0
            
            buy_count = sum(1 for p in positions if getattr(p, 'type', 0) == 0)
            sell_count = len(positions) - buy_count
            
            if direction == "BUY":
                if sell_count > buy_count:
                    return 80.0  # ‡∏ä‡πà‡∏ß‡∏¢‡∏™‡∏°‡∏î‡∏∏‡∏•‡∏î‡∏µ
                else:
                    return 40.0  # ‡∏≠‡∏≤‡∏à‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏≠‡∏µ‡∏¢‡∏á
            else:  # SELL
                if buy_count > sell_count:
                    return 80.0  # ‡∏ä‡πà‡∏ß‡∏¢‡∏™‡∏°‡∏î‡∏∏‡∏•‡∏î‡∏µ
                else:
                    return 40.0  # ‡∏≠‡∏≤‡∏à‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏≠‡∏µ‡∏¢‡∏á
        except:
            return 60.0
    
    def _calculate_margin_safety(self, account_info: Dict, price: float) -> float:
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢ margin"""
        try:
            margin_level = account_info.get('margin_level', 1000.0)
            
            if margin_level > 1000:
                return 90.0
            elif margin_level > 500:
                return 70.0
            elif margin_level > 300:
                return 50.0
            else:
                return 20.0
        except:
            return 60.0
    
    def _calculate_recovery_support(self, direction: str, price: float, positions: List[Any]) -> float:
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Å‡∏≤‡∏£‡∏ä‡πà‡∏ß‡∏¢‡∏ü‡∏∑‡πâ‡∏ô portfolio"""
        try:
            if not positions:
                return 50.0
            
            losing_positions = [p for p in positions if getattr(p, 'profit', 0) < 0]
            if not losing_positions:
                return 30.0  # ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡∏ï‡πâ‡∏≠‡∏á‡∏ä‡πà‡∏ß‡∏¢
            
            # ‡∏î‡∏π‡∏ß‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà‡∏à‡∏∞‡∏ä‡πà‡∏ß‡∏¢‡πÑ‡∏î‡πâ‡∏°‡∏≤‡∏Å‡πÅ‡∏Ñ‡πà‡πÑ‡∏´‡∏ô
            recovery_score = 0.0
            for pos in losing_positions:
                pos_type = getattr(pos, 'type', 0)
                pos_price = getattr(pos, 'price_open', price)
                
                if direction == "BUY" and pos_type == 0:  # BUY ‡∏ä‡πà‡∏ß‡∏¢ BUY
                    if price < pos_price:
                        recovery_score += 20.0  # Average down
                elif direction == "SELL" and pos_type == 1:  # SELL ‡∏ä‡πà‡∏ß‡∏¢ SELL
                    if price > pos_price:
                        recovery_score += 20.0  # Average down
                else:
                    recovery_score += 10.0  # Hedge help
            
            return min(recovery_score, 100.0)
        except:
            return 50.0
    
    def _calculate_timing_score(self, direction: str, price: float) -> float:
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏∞"""
        # Simple implementation - can be enhanced with technical analysis
        return 60.0
    
    def _calculate_correlation_benefit(self, direction: str, positions: List[Any]) -> float:
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå‡∏à‡∏≤‡∏Å correlation"""
        # Simple implementation - can be enhanced with correlation analysis
        return 55.0
    
    def _calculate_volatility_advantage(self, direction: str, price: float) -> float:
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå‡∏à‡∏≤‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô"""
        # Simple implementation - can be enhanced with volatility analysis
        return 65.0
    
    def _analyze_current_portfolio_health(self, positions: List[Any], account_info: Dict) -> Dict:
        """‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û portfolio ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô"""
        try:
            return {
                'total_positions': len(positions),
                'margin_level': account_info.get('margin_level', 1000.0),
                'equity': account_info.get('equity', 10000.0),
                'balance': account_info.get('balance', 10000.0)
            }
        except:
            return {'total_positions': 0, 'margin_level': 1000.0, 'equity': 10000.0, 'balance': 10000.0}
    
    def _determine_entry_strategy(self, scores: Dict, positions: List[Any]) -> EntryStrategy:
        """‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏°‡πâ"""
        try:
            if scores['recovery_support'] > 70.0:
                return EntryStrategy.RECOVERY_ENTRY
            elif scores['balance_contribution'] > 75.0:
                return EntryStrategy.BALANCE_ENTRY
            elif scores['total_score'] > 80.0:
                return EntryStrategy.PERFECT_ENTRY
            else:
                return EntryStrategy.HEDGE_ENTRY
        except:
            return EntryStrategy.PERFECT_ENTRY
    
    def _calculate_strategic_lot_size(self, scores: Dict, portfolio_health: Dict, account_info: Dict) -> float:
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ç‡∏ô‡∏≤‡∏î lot ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°"""
        try:
            base_lot = 0.01
            
            # ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏° confidence
            confidence_multiplier = scores.get('confidence', 0.5)
            
            # ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏° margin safety
            margin_level = portfolio_health.get('margin_level', 1000.0)
            if margin_level > 1000:
                safety_multiplier = 1.5
            elif margin_level > 500:
                safety_multiplier = 1.0
            else:
                safety_multiplier = 0.5
            
            final_lot = base_lot * confidence_multiplier * safety_multiplier
            return max(0.01, min(final_lot, 0.1))  # ‡∏à‡∏≥‡∏Å‡∏±‡∏î 0.01-0.1
        except:
            return 0.01
    
    # üîß Position Modifier Methods (Simplified for now)
    def _detect_position_problems(self, position: Any, current_price: float, account_info: Dict) -> List[str]:
        """‡∏ï‡∏£‡∏ß‡∏à‡∏´‡∏≤‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Ç‡∏≠‡∏á position"""
        problems = []
        try:
            profit = getattr(position, 'profit', 0)
            price_open = getattr(position, 'price_open', current_price)
            
            # ‡∏ï‡∏£‡∏ß‡∏à distance
            distance = abs(current_price - price_open)
            if distance > self.modifier_thresholds['distance_problem']:
                problems.append(f"Distance problem: {distance:.1f} pips")
            
            # ‡∏ï‡∏£‡∏ß‡∏à loss
            if profit < self.modifier_thresholds['loss_problem']:
                problems.append(f"Loss problem: ${profit:.2f}")
                
        except Exception as e:
            logger.error(f"Error detecting problems: {e}")
        
        return problems
    
    def _suggest_modifier_action(self, position: Any, problems: List[str], all_positions: List[Any]) -> ModifierAction:
        """‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç"""
        if "Loss problem" in str(problems):
            return ModifierAction.ADD_SUPPORT
        elif "Distance problem" in str(problems):
            return ModifierAction.ADD_COUNTER
        else:
            return ModifierAction.WAIT_IMPROVE
    
    def _create_modifier_entry_suggestion(self, position: Any, action: ModifierAction, current_price: float) -> Dict:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏°‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç"""
        return {
            'action': action.value,
            'suggested_price': current_price,
            'suggested_lot': 0.01,
            'reason': f'Modifier for position {getattr(position, "ticket", 0)}'
        }
    
    def _calculate_expected_improvement(self, position: Any, action: ModifierAction) -> float:
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏î‡∏´‡∏ß‡∏±‡∏á"""
        return 0.3  # 30% improvement expected
    
    def _assess_modifier_risk(self, position: Any, action: ModifierAction) -> str:
        """‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô risk ‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç"""
        return "MEDIUM"
    
    def _log_position_modifications(self, modifications: List[PositionModification]):
        """‡πÅ‡∏™‡∏î‡∏á log ‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç positions"""
        logger.info(f"üîß POSITION MODIFICATIONS: {len(modifications)} positions")
        for mod in modifications:
            logger.info(f"   Ticket {mod.position_ticket}: {mod.modifier_action.value} - {mod.current_problem}")

# üè≠ Factory Functions
def create_enhanced_7d_entry_system(intelligent_manager=None, purpose_tracker=None,
                                   dynamic_7d_closer=None, mt5_connection=None) -> Enhanced7DEntrySystem:
    """üè≠ ‡∏™‡∏£‡πâ‡∏≤‡∏á Enhanced 7D Entry System"""
    return Enhanced7DEntrySystem(
        intelligent_manager=intelligent_manager,
        purpose_tracker=purpose_tracker,
        dynamic_7d_closer=dynamic_7d_closer,
        mt5_connection=mt5_connection
    )

if __name__ == "__main__":
    # üß™ Test code
    system = create_enhanced_7d_entry_system()
    print("üöÄ Enhanced 7D Entry + Position Modifier System created!")
