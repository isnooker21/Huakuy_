# -*- coding: utf-8 -*-
"""
üß† AI Position Intelligence Module
‡πÇ‡∏°‡∏î‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö AI Intelligence ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î‡πÑ‡∏°‡πâ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Position
"""

import json
import logging
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Tuple, Any
from dataclasses import dataclass, asdict
import os

logger = logging.getLogger(__name__)

@dataclass
class PositionScore:
    """‡∏Ñ‡∏•‡∏≤‡∏™‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ç‡∏≠‡∏á Position"""
    ticket: int
    score: float  # 0-100
    pnl_score: float
    time_score: float
    distance_score: float
    balance_score: float
    market_context_score: float
    reasons: List[str]
    recommendation: str  # "CLOSE_NOW", "CLOSE_LATER", "HOLD"

@dataclass
class PairScore:
    """‡∏Ñ‡∏•‡∏≤‡∏™‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡πÑ‡∏°‡πâ"""
    position1_ticket: int
    position2_ticket: int
    combined_score: float  # 0-100
    combined_profit: float
    risk_reduction: float
    lot_balance: float
    time_sync: float
    recommendation: str  # "STRONG_PAIR", "GOOD_PAIR", "WEAK_PAIR", "NO_PAIR"

@dataclass
class AIDecision:
    """‡∏Ñ‡∏•‡∏≤‡∏™‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏Ç‡∏≠‡∏á AI"""
    decision_type: str  # "CLOSE_SINGLE", "CLOSE_PAIR", "CLOSE_GROUP", "HOLD_ALL"
    positions_to_close: List[int]
    expected_profit: float
    confidence: float  # 0-100
    reasoning: str
    timestamp: datetime

class AIPositionIntelligence:
    """üß† AI Position Intelligence ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î‡πÑ‡∏°‡πâ"""
    
    def __init__(self, brain_file: str = "ai_position_brain.json"):
        self.brain_file = brain_file
        self.decision_history = []
        self.performance_stats = {
            'total_decisions': 0,
            'successful_decisions': 0,
            'accuracy_rate': 0.0,
            'total_profit': 0.0,
            'average_profit_per_decision': 0.0
        }
        
        # AI Weights (‡∏õ‡∏£‡∏±‡∏ö‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ) - ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏Å‡∏±‡∏ö XAUUSD
        self.weights = {
            'pnl_weight': 0.35,        # P&L
            'time_weight': 0.20,       # ‡πÄ‡∏ß‡∏•‡∏≤
            'distance_weight': 0.15,   # ‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á
            'balance_weight': 0.10,    # Balance
            'market_context_weight': 0.10,  # Market context
            'risk_management_weight': 0.10  # ‡πÄ‡∏û‡∏¥‡πà‡∏° Risk management
        }
        
        # Load existing AI brain if available
        self.load_ai_brain()
    
    def calculate_position_intelligence_score(self, position, current_price: float, 
                                            market_data: Dict = None) -> PositionScore:
        """
        ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô AI Intelligence ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Position
        
        Args:
            position: Position object
            current_price: ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
            market_data: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏•‡∏≤‡∏î
            
        Returns:
            PositionScore: ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
        """
        try:
            ticket = getattr(position, 'ticket', 0)
            profit = getattr(position, 'profit', 0)
            volume = getattr(position, 'volume', 0)
            price_open = getattr(position, 'price_open', 0)
            time_open = getattr(position, 'time', datetime.now())
            
            # 1. P&L Score (35%)
            pnl_score = self._calculate_pnl_score(profit, volume, market_data)
            
            # 2. Time Score (20%)
            time_score = self._calculate_time_score(time_open, market_data)
            
            # 3. Distance Score (20%)
            distance_score = self._calculate_distance_score(price_open, current_price, market_data)
            
            # 4. Balance Score (15%)
            balance_score = self._calculate_balance_score(profit, volume)
            
            # 5. Market Context Score (10%)
            market_context_score = self._calculate_market_context_score(market_data, position)
            
            # 6. Risk Management Score (10%) - ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà
            risk_management_score = self._calculate_risk_management_score(position, market_data)
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏ß‡∏°
            total_score = (
                pnl_score * self.weights['pnl_weight'] +
                time_score * self.weights['time_weight'] +
                distance_score * self.weights['distance_weight'] +
                balance_score * self.weights['balance_weight'] +
                market_context_score * self.weights['market_context_weight'] +
                risk_management_score * self.weights['risk_management_weight']
            )
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
            recommendation = self._generate_recommendation(total_score, profit, market_data)
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•
            reasons = self._generate_reasons(pnl_score, time_score, distance_score, balance_score, market_context_score, risk_management_score)
            
            return PositionScore(
                ticket=ticket,
                score=total_score,
                pnl_score=pnl_score,
                time_score=time_score,
                distance_score=distance_score,
                balance_score=balance_score,
                market_context_score=market_context_score,
                reasons=reasons,
                recommendation=recommendation
            )
            
        except Exception as e:
            logger.error(f"‚ùå Error calculating position score: {e}")
            return PositionScore(
                ticket=getattr(position, 'ticket', 0),
                score=0.0,
                pnl_score=0.0,
                time_score=0.0,
                distance_score=0.0,
                balance_score=0.0,
                market_context_score=0.0,
                reasons=[f"Error: {str(e)}"],
                recommendation="HOLD"
            )
    
    def _calculate_pnl_score(self, profit: float, volume: float, market_data: Dict = None) -> float:
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô P&L ‡πÅ‡∏ö‡∏ö‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á - ‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤ spread, commission, ‡πÅ‡∏•‡∏∞ market volatility"""
        try:
            if volume == 0:
                return 0.0
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Å‡∏≥‡πÑ‡∏£‡∏ï‡πà‡∏≠ lot
            profit_per_lot = profit / volume
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î (spread + commission)
            spread_cost = 0.3  # XAUUSD spread cost per lot
            commission_cost = 0.1  # Commission cost per lot
            total_cost_per_lot = spread_cost + commission_cost
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Å‡∏≥‡πÑ‡∏£‡∏™‡∏∏‡∏ó‡∏ò‡∏¥‡∏´‡∏•‡∏±‡∏á‡∏´‡∏±‡∏Å‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô
            net_profit_per_lot = profit_per_lot - total_cost_per_lot
            
            # ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏° market volatility
            volatility_multiplier = 1.0
            if market_data:
                volatility = market_data.get('volatility', 'normal')
                if volatility == 'high':
                    volatility_multiplier = 1.2  # High volatility = ‡∏Ñ‡∏ß‡∏£‡∏õ‡∏¥‡∏î‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô
                elif volatility == 'low':
                    volatility_multiplier = 0.8  # Low volatility = ‡πÑ‡∏°‡πà‡∏£‡∏µ‡∏ö‡∏õ‡∏¥‡∏î
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ï‡∏≤‡∏°‡∏Å‡∏≥‡πÑ‡∏£‡∏™‡∏∏‡∏ó‡∏ò‡∏¥
            if net_profit_per_lot >= 0.8:  # ‡∏Å‡∏≥‡πÑ‡∏£‡∏™‡∏∏‡∏ó‡∏ò‡∏¥‡∏°‡∏≤‡∏Å
                base_score = 100.0
            elif net_profit_per_lot >= 0.5:  # ‡∏Å‡∏≥‡πÑ‡∏£‡∏™‡∏∏‡∏ó‡∏ò‡∏¥‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á
                base_score = 75.0 + (net_profit_per_lot - 0.5) * 83.33  # 75-100
            elif net_profit_per_lot >= 0.2:  # ‡∏Å‡∏≥‡πÑ‡∏£‡∏™‡∏∏‡∏ó‡∏ò‡∏¥‡∏ô‡πâ‡∏≠‡∏¢
                base_score = 50.0 + (net_profit_per_lot - 0.2) * 83.33  # 50-75
            elif net_profit_per_lot >= 0:  # ‡∏Å‡∏≥‡πÑ‡∏£‡∏™‡∏∏‡∏ó‡∏ò‡∏¥‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢
                base_score = 25.0 + net_profit_per_lot * 125.0  # 25-50
            else:
                # ‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô - ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ï‡∏≤‡∏°‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô
                if net_profit_per_lot <= -1.0:  # ‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡∏°‡∏≤‡∏Å
                    base_score = 0.0
                elif net_profit_per_lot <= -0.5:  # ‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á
                    base_score = 10.0 + (net_profit_per_lot + 1.0) * 20.0  # 0-10
                else:  # ‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡∏ô‡πâ‡∏≠‡∏¢
                    base_score = 15.0 + (net_profit_per_lot + 0.5) * 20.0  # 10-15
            
            # ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏° volatility
            final_score = base_score * volatility_multiplier
            
            # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á 0-100
            return max(0.0, min(100.0, final_score))
                    
        except Exception as e:
            logger.error(f"‚ùå Error calculating P&L score: {e}")
            return 0.0
    
    def _calculate_time_score(self, time_open: datetime, market_data: Dict = None) -> float:
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏ö‡∏ö‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á - ‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤ market session ‡πÅ‡∏•‡∏∞ volatility"""
        try:
            if not isinstance(time_open, datetime):
                return 50.0  # Default score
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ß‡πâ
            time_diff = datetime.now() - time_open
            hours_open = time_diff.total_seconds() / 3600
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤
            if hours_open >= 48:  # 2 ‡∏ß‡∏±‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô‡πÑ‡∏õ
                base_score = 100.0
            elif hours_open >= 24:  # 1 ‡∏ß‡∏±‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô‡πÑ‡∏õ
                base_score = 85.0
            elif hours_open >= 12:  # 12 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
                base_score = 70.0
            elif hours_open >= 6:   # 6 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
                base_score = 50.0
            elif hours_open >= 3:   # 3 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
                base_score = 30.0
            elif hours_open >= 1:   # 1 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
                base_score = 15.0
            else:  # ‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ 1 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
                base_score = 5.0
            
            # ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏° market session
            session_multiplier = 1.0
            if market_data:
                session = market_data.get('session', 'unknown')
                current_hour = datetime.now().hour
                
                # ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏° session ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà
                if session == 'london' or (8 <= current_hour <= 16):
                    session_multiplier = 1.2  # London/NY session = ‡∏Ñ‡∏ß‡∏£‡∏õ‡∏¥‡∏î‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô
                elif session == 'new_york' or (13 <= current_hour <= 21):
                    session_multiplier = 1.1  # NY session = ‡∏Ñ‡∏ß‡∏£‡∏õ‡∏¥‡∏î‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢
                elif session == 'asia' or (0 <= current_hour <= 8):
                    session_multiplier = 0.9  # Asia session = ‡πÑ‡∏°‡πà‡∏£‡∏µ‡∏ö‡∏õ‡∏¥‡∏î
                
                # ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏° volatility
                volatility = market_data.get('volatility', 'normal')
                if volatility == 'high':
                    session_multiplier *= 1.3  # High volatility = ‡∏Ñ‡∏ß‡∏£‡∏õ‡∏¥‡∏î‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô
                elif volatility == 'low':
                    session_multiplier *= 0.8  # Low volatility = ‡πÑ‡∏°‡πà‡∏£‡∏µ‡∏ö‡∏õ‡∏¥‡∏î
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
            final_score = base_score * session_multiplier
            
            # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á 0-100
            return max(0.0, min(100.0, final_score))
                
        except Exception as e:
            logger.error(f"‚ùå Error calculating time score: {e}")
            return 50.0
    
    def _calculate_distance_score(self, price_open: float, current_price: float, market_data: Dict = None) -> float:
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡πÅ‡∏ö‡∏ö‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á - ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏Å‡∏±‡∏ö XAUUSD ‡πÅ‡∏•‡∏∞ market conditions"""
        try:
            if price_open == 0:
                return 50.0
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡πÄ‡∏õ‡πá‡∏ô pips ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö XAUUSD
            price_diff = abs(current_price - price_open)
            distance_pips = price_diff  # XAUUSD: 1 USD = 1 pip
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
            price_change = price_diff / price_open * 100
            
            # ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏ï‡∏≤‡∏°‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á (pips)
            if distance_pips >= 50:  # 50 pips ‡∏Ç‡∏∂‡πâ‡∏ô‡πÑ‡∏õ
                base_score = 100.0
            elif distance_pips >= 30:  # 30 pips
                base_score = 85.0
            elif distance_pips >= 20:  # 20 pips
                base_score = 70.0
            elif distance_pips >= 10:  # 10 pips
                base_score = 50.0
            elif distance_pips >= 5:   # 5 pips
                base_score = 30.0
            elif distance_pips >= 2:   # 2 pips
                base_score = 15.0
            else:  # ‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ 2 pips
                base_score = 5.0
            
            # ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏° market volatility
            volatility_multiplier = 1.0
            if market_data:
                volatility = market_data.get('volatility', 'normal')
                if volatility == 'high':
                    volatility_multiplier = 1.3  # High volatility = ‡∏Ñ‡∏ß‡∏£‡∏õ‡∏¥‡∏î‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô
                elif volatility == 'low':
                    volatility_multiplier = 0.7  # Low volatility = ‡πÑ‡∏°‡πà‡∏£‡∏µ‡∏ö‡∏õ‡∏¥‡∏î
                
                # ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏° trend direction
                trend_direction = market_data.get('trend_direction', 'sideways')
                if trend_direction == 'trending':
                    volatility_multiplier *= 1.1  # Trending market = ‡∏Ñ‡∏ß‡∏£‡∏õ‡∏¥‡∏î‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô
                elif trend_direction == 'sideways':
                    volatility_multiplier *= 0.9  # Sideways market = ‡πÑ‡∏°‡πà‡∏£‡∏µ‡∏ö‡∏õ‡∏¥‡∏î
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
            final_score = base_score * volatility_multiplier
            
            # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á 0-100
            return max(0.0, min(100.0, final_score))
                
        except Exception as e:
            logger.error(f"‚ùå Error calculating distance score: {e}")
            return 50.0
    
    def _calculate_balance_score(self, profit: float, volume: float) -> float:
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡∏ï‡πà‡∏≠ Balance"""
        try:
            if volume == 0:
                return 50.0
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡∏ï‡πà‡∏≠ Balance
            balance_impact = profit / volume * 100  # % ‡∏ï‡πà‡∏≠ lot
            
            # ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ï‡∏≤‡∏°‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö
            if balance_impact >= 5.0:  # 5% ‡∏Ç‡∏∂‡πâ‡∏ô‡πÑ‡∏õ
                return 100.0
            elif balance_impact >= 2.5:  # 2.5%
                return 75.0
            elif balance_impact >= 1.0:  # 1%
                return 50.0
            elif balance_impact >= 0.5:  # 0.5%
                return 25.0
            else:  # ‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ 0.5%
                return 10.0
                
        except Exception as e:
            logger.error(f"‚ùå Error calculating balance score: {e}")
            return 50.0
    
    def _calculate_market_context_score(self, market_data: Dict, position) -> float:
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô Market Context ‡πÅ‡∏ö‡∏ö‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á - ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢ volatility ‡πÅ‡∏•‡∏∞ risk"""
        try:
            if not market_data:
                return 50.0  # Default score
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Market Context
            trend_direction = market_data.get('trend_direction', 'sideways')
            volatility = market_data.get('volatility', 'normal')
            session = market_data.get('session', 'unknown')
            news_impact = market_data.get('news_impact', 'none')
            
            # ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ï‡∏≤‡∏° Market Context
            score = 50.0  # Base score
            
            # 1. Trend Direction (30%)
            if trend_direction == 'uptrend':
                if getattr(position, 'type', 0) == 0:  # BUY
                    score += 25  # BUY ‡πÉ‡∏ô uptrend = ‡∏î‡∏µ‡∏°‡∏≤‡∏Å
                else:  # SELL
                    score -= 25  # SELL ‡πÉ‡∏ô uptrend = ‡πÑ‡∏°‡πà‡∏î‡∏µ
            elif trend_direction == 'downtrend':
                if getattr(position, 'type', 0) == 0:  # BUY
                    score -= 25  # BUY ‡πÉ‡∏ô downtrend = ‡πÑ‡∏°‡πà‡∏î‡∏µ
                else:  # SELL
                    score += 25  # SELL ‡πÉ‡∏ô downtrend = ‡∏î‡∏µ‡∏°‡∏≤‡∏Å
            elif trend_direction == 'sideways':
                score += 5  # Sideways = ‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á
            
            # 2. Volatility (25%)
            if volatility == 'high':
                score += 20  # High volatility = ‡∏Ñ‡∏ß‡∏£‡∏õ‡∏¥‡∏î‡πÄ‡∏£‡πá‡∏ß
            elif volatility == 'normal':
                score += 5   # Normal volatility = ‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á
            elif volatility == 'low':
                score -= 10  # Low volatility = ‡πÑ‡∏°‡πà‡∏£‡∏µ‡∏ö‡∏õ‡∏¥‡∏î
            
            # 3. Market Session (20%)
            if session == 'london' or session == 'new_york':
                score += 15  # Major sessions = ‡∏Ñ‡∏ß‡∏£‡∏õ‡∏¥‡∏î‡πÄ‡∏£‡πá‡∏ß
            elif session == 'asia':
                score += 5   # Asia session = ‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á
            else:
                score += 0   # Unknown session
            
            # 4. News Impact (15%)
            if news_impact == 'high':
                score += 20  # High news impact = ‡∏Ñ‡∏ß‡∏£‡∏õ‡∏¥‡∏î‡πÄ‡∏£‡πá‡∏ß
            elif news_impact == 'medium':
                score += 10  # Medium news impact = ‡∏Ñ‡∏ß‡∏£‡∏õ‡∏¥‡∏î
            elif news_impact == 'low':
                score += 5   # Low news impact = ‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á
            else:
                score += 0   # No news impact
            
            # 5. Risk Level (10%)
            risk_level = market_data.get('risk_level', 'normal')
            if risk_level == 'high':
                score += 15  # High risk = ‡∏Ñ‡∏ß‡∏£‡∏õ‡∏¥‡∏î‡πÄ‡∏£‡πá‡∏ß
            elif risk_level == 'normal':
                score += 5   # Normal risk = ‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á
            elif risk_level == 'low':
                score -= 5   # Low risk = ‡πÑ‡∏°‡πà‡∏£‡∏µ‡∏ö‡∏õ‡∏¥‡∏î
            
            return max(0.0, min(100.0, score))
            
        except Exception as e:
            logger.error(f"‚ùå Error calculating market context score: {e}")
            return 50.0
    
    def _calculate_risk_management_score(self, position, market_data: Dict = None) -> float:
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô Risk Management - ‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤ drawdown, exposure, ‡πÅ‡∏•‡∏∞ correlation"""
        try:
            score = 50.0  # Base score
            
            # 1. Drawdown Analysis (40%)
            profit = getattr(position, 'profit', 0)
            volume = getattr(position, 'volume', 0)
            
            if volume > 0:
                profit_per_lot = profit / volume
                
                # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì drawdown level
                if profit_per_lot <= -1.0:  # ‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡∏°‡∏≤‡∏Å
                    score += 30  # ‡∏Ñ‡∏ß‡∏£‡∏õ‡∏¥‡∏î‡πÄ‡∏£‡πá‡∏ß
                elif profit_per_lot <= -0.5:  # ‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á
                    score += 20  # ‡∏Ñ‡∏ß‡∏£‡∏õ‡∏¥‡∏î
                elif profit_per_lot <= -0.2:  # ‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡∏ô‡πâ‡∏≠‡∏¢
                    score += 10  # ‡∏Ñ‡∏ß‡∏£‡∏õ‡∏¥‡∏î‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢
                elif profit_per_lot >= 0.5:  # ‡∏Å‡∏≥‡πÑ‡∏£‡∏°‡∏≤‡∏Å
                    score += 25  # ‡∏Ñ‡∏ß‡∏£‡∏õ‡∏¥‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡πá‡∏ö‡∏Å‡∏≥‡πÑ‡∏£
                elif profit_per_lot >= 0.2:  # ‡∏Å‡∏≥‡πÑ‡∏£‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á
                    score += 15  # ‡∏Ñ‡∏ß‡∏£‡∏õ‡∏¥‡∏î
                else:  # ‡∏Å‡∏≥‡πÑ‡∏£/‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡∏ô‡πâ‡∏≠‡∏¢
                    score += 5   # ‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á
            
            # 2. Exposure Analysis (30%)
            if market_data:
                total_exposure = market_data.get('total_exposure', 0)
                max_exposure = market_data.get('max_exposure', 1000)
                
                if max_exposure > 0:
                    exposure_ratio = total_exposure / max_exposure
                    
                    if exposure_ratio >= 0.8:  # Exposure ‡∏™‡∏π‡∏á
                        score += 25  # ‡∏Ñ‡∏ß‡∏£‡∏õ‡∏¥‡∏î‡πÄ‡∏£‡πá‡∏ß
                    elif exposure_ratio >= 0.6:  # Exposure ‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á
                        score += 15  # ‡∏Ñ‡∏ß‡∏£‡∏õ‡∏¥‡∏î
                    elif exposure_ratio >= 0.4:  # Exposure ‡∏õ‡∏Å‡∏ï‡∏¥
                        score += 5   # ‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á
                    else:  # Exposure ‡∏ï‡πà‡∏≥
                        score -= 5   # ‡πÑ‡∏°‡πà‡∏£‡∏µ‡∏ö‡∏õ‡∏¥‡∏î
            
            # 3. Correlation Analysis (20%)
            if market_data:
                correlation = market_data.get('correlation', 0)
                
                if abs(correlation) >= 0.8:  # Correlation ‡∏™‡∏π‡∏á
                    score += 20  # ‡∏Ñ‡∏ß‡∏£‡∏õ‡∏¥‡∏î‡πÄ‡∏£‡πá‡∏ß
                elif abs(correlation) >= 0.6:  # Correlation ‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á
                    score += 10  # ‡∏Ñ‡∏ß‡∏£‡∏õ‡∏¥‡∏î
                elif abs(correlation) >= 0.4:  # Correlation ‡∏õ‡∏Å‡∏ï‡∏¥
                    score += 5   # ‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á
                else:  # Correlation ‡∏ï‡πà‡∏≥
                    score -= 5   # ‡πÑ‡∏°‡πà‡∏£‡∏µ‡∏ö‡∏õ‡∏¥‡∏î
            
            # 4. Volatility Risk (10%)
            if market_data:
                volatility = market_data.get('volatility', 'normal')
                
                if volatility == 'high':
                    score += 15  # High volatility = ‡∏Ñ‡∏ß‡∏£‡∏õ‡∏¥‡∏î‡πÄ‡∏£‡πá‡∏ß
                elif volatility == 'normal':
                    score += 5   # Normal volatility = ‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á
                elif volatility == 'low':
                    score -= 5   # Low volatility = ‡πÑ‡∏°‡πà‡∏£‡∏µ‡∏ö‡∏õ‡∏¥‡∏î
            
            return max(0.0, min(100.0, score))
            
        except Exception as e:
            logger.error(f"‚ùå Error calculating risk management score: {e}")
            return 50.0
    
    def _generate_recommendation(self, total_score: float, profit: float, market_data: Dict = None) -> str:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÅ‡∏ö‡∏ö‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á - ‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤ market conditions"""
        try:
            # ‡∏õ‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏ï‡∏≤‡∏° market volatility
            volatility_threshold_adjustment = 0
            if market_data:
                volatility = market_data.get('volatility', 'normal')
                if volatility == 'high':
                    volatility_threshold_adjustment = -10  # High volatility = ‡∏Ñ‡∏ß‡∏£‡∏õ‡∏¥‡∏î‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô
                elif volatility == 'low':
                    volatility_threshold_adjustment = 10   # Low volatility = ‡πÑ‡∏°‡πà‡∏£‡∏µ‡∏ö‡∏õ‡∏¥‡∏î
            
            # ‡∏õ‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏ï‡∏≤‡∏° profit level
            profit_threshold_adjustment = 0
            if profit > 0:
                profit_threshold_adjustment = -5  # ‡∏Å‡∏≥‡πÑ‡∏£ = ‡∏Ñ‡∏ß‡∏£‡∏õ‡∏¥‡∏î‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô
            elif profit < -10:
                profit_threshold_adjustment = 5   # ‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡∏°‡∏≤‡∏Å = ‡πÑ‡∏°‡πà‡∏£‡∏µ‡∏ö‡∏õ‡∏¥‡∏î
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏•‡πâ‡∏ß
            close_now_threshold = 80 + volatility_threshold_adjustment + profit_threshold_adjustment
            close_later_threshold = 60 + volatility_threshold_adjustment + profit_threshold_adjustment
            hold_threshold = 40 + volatility_threshold_adjustment + profit_threshold_adjustment
            
            # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏°‡πÄ‡∏´‡∏ï‡∏∏‡∏™‡∏°‡∏ú‡∏•
            close_now_threshold = max(70, min(90, close_now_threshold))
            close_later_threshold = max(50, min(80, close_later_threshold))
            hold_threshold = max(30, min(60, hold_threshold))
            
            if total_score >= close_now_threshold:
                return "CLOSE_NOW"
            elif total_score >= close_later_threshold:
                return "CLOSE_LATER"
            elif total_score >= hold_threshold:
                return "HOLD"
            else:
                return "HOLD"
                
        except Exception as e:
            logger.error(f"‚ùå Error generating recommendation: {e}")
            # Fallback to original logic
            if total_score >= 80:
                return "CLOSE_NOW"
            elif total_score >= 60:
                return "CLOSE_LATER"
            elif total_score >= 40:
                return "HOLD"
            else:
                return "HOLD"
    
    def _generate_reasons(self, pnl_score: float, time_score: float, 
                         distance_score: float, balance_score: float, 
                         market_context_score: float, risk_management_score: float) -> List[str]:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡πÅ‡∏ö‡∏ö‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á - ‡∏£‡∏ß‡∏° risk management"""
        reasons = []
        
        if pnl_score >= 70:
            reasons.append("High P&L score")
        elif pnl_score <= 30:
            reasons.append("Low P&L score")
        
        if time_score >= 70:
            reasons.append("Position is old")
        elif time_score <= 30:
            reasons.append("Position is new")
        
        if distance_score >= 70:
            reasons.append("Large price movement")
        elif distance_score <= 30:
            reasons.append("Small price movement")
        
        if balance_score >= 70:
            reasons.append("High balance impact")
        elif balance_score <= 30:
            reasons.append("Low balance impact")
        
        if market_context_score >= 70:
            reasons.append("Favorable market context")
        elif market_context_score <= 30:
            reasons.append("Unfavorable market context")
        
        if risk_management_score >= 70:
            reasons.append("High risk management score")
        elif risk_management_score <= 30:
            reasons.append("Low risk management score")
        
        return reasons
    
    def find_optimal_pairs(self, positions: List, current_price: float, 
                          market_data: Dict = None) -> List[PairScore]:
        """
        ‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡πÑ‡∏°‡πâ‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
        
        Args:
            positions: ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ Position
            current_price: ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
            market_data: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏•‡∏≤‡∏î
            
        Returns:
            List[PairScore]: ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
        """
        try:
            pair_scores = []
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ BUY ‡πÅ‡∏•‡∏∞ SELL positions
            buy_positions = []
            sell_positions = []
            
            for pos in positions:
                pos_type = getattr(pos, 'type', 0)
                if pos_type == 0:  # BUY
                    buy_positions.append(pos)
                else:  # SELL
                    sell_positions.append(pos)
            
            # ‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà BUY ‡∏Å‡∏±‡∏ö BUY (‡∏Å‡∏≥‡πÑ‡∏£‡∏°‡∏≤‡∏Å + ‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô)
            for i, buy1 in enumerate(buy_positions):
                for j, buy2 in enumerate(buy_positions[i+1:], i+1):
                    pair_score = self._calculate_pair_score(buy1, buy2, current_price, market_data)
                    if pair_score:
                        pair_scores.append(pair_score)
            
            # ‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà SELL ‡∏Å‡∏±‡∏ö SELL (‡∏Å‡∏≥‡πÑ‡∏£‡∏°‡∏≤‡∏Å + ‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô)
            for i, sell1 in enumerate(sell_positions):
                for j, sell2 in enumerate(sell_positions[i+1:], i+1):
                    pair_score = self._calculate_pair_score(sell1, sell2, current_price, market_data)
                    if pair_score:
                        pair_scores.append(pair_score)
            
            # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô (‡∏°‡∏≤‡∏Å‡πÑ‡∏õ‡∏ô‡πâ‡∏≠‡∏¢)
            pair_scores.sort(key=lambda x: x.combined_score, reverse=True)
            
            return pair_scores[:10]  # ‡∏Ñ‡∏∑‡∏ô 10 ‡∏Ñ‡∏π‡πà‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
            
        except Exception as e:
            logger.error(f"‚ùå Error finding optimal pairs: {e}")
            return []
    
    def _calculate_pair_score(self, pos1, pos2, current_price: float, 
                            market_data: Dict = None) -> Optional[PairScore]:
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡πÅ‡∏ö‡∏ö‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á - ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢ market context ‡πÅ‡∏•‡∏∞ risk management"""
        try:
            ticket1 = getattr(pos1, 'ticket', 0)
            ticket2 = getattr(pos2, 'ticket', 0)
            profit1 = getattr(pos1, 'profit', 0)
            profit2 = getattr(pos2, 'profit', 0)
            volume1 = getattr(pos1, 'volume', 0)
            volume2 = getattr(pos2, 'volume', 0)
            time1 = getattr(pos1, 'time', datetime.now())
            time2 = getattr(pos2, 'time', datetime.now())
            price1 = getattr(pos1, 'price_open', 0)
            price2 = getattr(pos2, 'price_open', 0)
            
            # 1. Combined Profit (35%) - ‡∏•‡∏î‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏•‡∏á
            combined_profit = profit1 + profit2
            total_volume = volume1 + volume2
            if total_volume > 0:
                profit_per_lot = combined_profit / total_volume
                # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î
                spread_cost = 0.3 * total_volume
                commission_cost = 0.1 * total_volume
                net_profit = combined_profit - spread_cost - commission_cost
                net_profit_per_lot = net_profit / total_volume
                
                # ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ï‡∏≤‡∏°‡∏Å‡∏≥‡πÑ‡∏£‡∏™‡∏∏‡∏ó‡∏ò‡∏¥
                if net_profit_per_lot >= 0.5:
                    profit_score = 100.0
                elif net_profit_per_lot >= 0.2:
                    profit_score = 50.0 + (net_profit_per_lot - 0.2) * 166.67  # 50-100
                elif net_profit_per_lot >= 0:
                    profit_score = net_profit_per_lot * 250.0  # 0-50
                else:
                    profit_score = max(0.0, 25.0 + net_profit_per_lot * 125.0)  # 0-25
            else:
                profit_score = 0.0
            
            # 2. Risk Reduction (25%) - ‡∏•‡∏î‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏•‡∏á
            risk_reduction = self._calculate_risk_reduction(pos1, pos2)
            
            # 3. Lot Balance (15%) - ‡∏•‡∏î‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏•‡∏á
            lot_balance = self._calculate_lot_balance(volume1, volume2)
            
            # 4. Time Sync (10%) - ‡∏•‡∏î‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏•‡∏á
            time_sync = self._calculate_time_sync(time1, time2)
            
            # 5. Market Context (15%) - ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà
            market_context_score = self._calculate_pair_market_context(pos1, pos2, market_data)
            
            # ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏ß‡∏°
            combined_score = (
                profit_score * 0.35 +
                risk_reduction * 0.25 +
                lot_balance * 0.15 +
                time_sync * 0.10 +
                market_context_score * 0.15
            )
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
            if combined_score >= 85:
                recommendation = "STRONG_PAIR"
            elif combined_score >= 70:
                recommendation = "GOOD_PAIR"
            elif combined_score >= 50:
                recommendation = "WEAK_PAIR"
            else:
                recommendation = "NO_PAIR"
            
            return PairScore(
                position1_ticket=ticket1,
                position2_ticket=ticket2,
                combined_score=combined_score,
                combined_profit=combined_profit,
                risk_reduction=risk_reduction,
                lot_balance=lot_balance,
                time_sync=time_sync,
                recommendation=recommendation
            )
            
        except Exception as e:
            logger.error(f"‚ùå Error calculating pair score: {e}")
            return None
    
    def _calculate_risk_reduction(self, pos1, pos2) -> float:
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Å‡∏≤‡∏£‡∏•‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á"""
        try:
            # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏°‡πâ‡∏Ñ‡∏ô‡∏•‡∏∞‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á = ‡∏•‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡πÑ‡∏î‡πâ
            type1 = getattr(pos1, 'type', 0)
            type2 = getattr(pos2, 'type', 0)
            
            if type1 != type2:
                return 100.0  # ‡∏Ñ‡∏ô‡∏•‡∏∞‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á = ‡∏•‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡πÑ‡∏î‡πâ‡∏°‡∏≤‡∏Å
            else:
                return 50.0  # ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô = ‡∏•‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡πÑ‡∏î‡πâ‡∏ô‡πâ‡∏≠‡∏¢
                
        except Exception as e:
            logger.error(f"‚ùå Error calculating risk reduction: {e}")
            return 50.0
    
    def _calculate_lot_balance(self, volume1: float, volume2: float) -> float:
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏°‡∏î‡∏∏‡∏•‡∏Ç‡∏≠‡∏á Lot Size"""
        try:
            if volume1 == 0 and volume2 == 0:
                return 50.0
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏Ç‡∏≠‡∏á Lot Size
            if volume1 > 0 and volume2 > 0:
                ratio = min(volume1, volume2) / max(volume1, volume2)
                return ratio * 100
            else:
                return 50.0
                
        except Exception as e:
            logger.error(f"‚ùå Error calculating lot balance: {e}")
            return 50.0
    
    def _calculate_time_sync(self, time1: datetime, time2: datetime) -> float:
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡∏Ç‡∏≠‡∏á‡πÄ‡∏ß‡∏•‡∏≤"""
        try:
            if not isinstance(time1, datetime) or not isinstance(time2, datetime):
                return 50.0
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡πÄ‡∏ß‡∏•‡∏≤
            time_diff = abs((time1 - time2).total_seconds() / 3600)  # ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
            
            # ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡∏Ç‡∏≠‡∏á‡πÄ‡∏ß‡∏•‡∏≤
            if time_diff <= 1:  # 1 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
                return 100.0
            elif time_diff <= 6:  # 6 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
                return 75.0
            elif time_diff <= 24:  # 1 ‡∏ß‡∏±‡∏ô
                return 50.0
            else:  # ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 1 ‡∏ß‡∏±‡∏ô
                return 25.0
                
        except Exception as e:
            logger.error(f"‚ùå Error calculating time sync: {e}")
            return 50.0
    
    def _calculate_pair_market_context(self, pos1, pos2, market_data: Dict = None) -> float:
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô Market Context ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡πÑ‡∏°‡πâ"""
        try:
            if not market_data:
                return 50.0  # Default score
            
            score = 50.0  # Base score
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÑ‡∏°‡πâ
            type1 = getattr(pos1, 'type', 0)
            type2 = getattr(pos2, 'type', 0)
            
            # 1. Hedge Pair Analysis (40%)
            if type1 != type2:  # ‡πÑ‡∏°‡πâ‡∏Ñ‡∏ô‡∏•‡∏∞‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á (Hedge)
                score += 30  # Hedge pair = ‡∏î‡∏µ‡∏°‡∏≤‡∏Å
            else:  # ‡πÑ‡∏°‡πâ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô
                score += 10  # Same direction = ‡∏î‡∏µ‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á
            
            # 2. Market Volatility (25%)
            volatility = market_data.get('volatility', 'normal')
            if volatility == 'high':
                score += 20  # High volatility = ‡∏Ñ‡∏ß‡∏£‡∏õ‡∏¥‡∏î‡πÄ‡∏£‡πá‡∏ß
            elif volatility == 'normal':
                score += 10  # Normal volatility = ‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á
            elif volatility == 'low':
                score += 5   # Low volatility = ‡πÑ‡∏°‡πà‡∏£‡∏µ‡∏ö‡∏õ‡∏¥‡∏î
            
            # 3. Trend Direction (20%)
            trend_direction = market_data.get('trend_direction', 'sideways')
            if trend_direction == 'trending':
                score += 15  # Trending market = ‡∏Ñ‡∏ß‡∏£‡∏õ‡∏¥‡∏î‡πÄ‡∏£‡πá‡∏ß
            elif trend_direction == 'sideways':
                score += 5   # Sideways market = ‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á
            
            # 4. Market Session (15%)
            session = market_data.get('session', 'unknown')
            if session in ['london', 'new_york']:
                score += 15  # Major sessions = ‡∏Ñ‡∏ß‡∏£‡∏õ‡∏¥‡∏î‡πÄ‡∏£‡πá‡∏ß
            elif session == 'asia':
                score += 8   # Asia session = ‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á
            else:
                score += 5   # Unknown session
            
            return max(0.0, min(100.0, score))
            
        except Exception as e:
            logger.error(f"‚ùå Error calculating pair market context: {e}")
            return 50.0
    
    def log_decision(self, decision: AIDecision, outcome: Dict = None):
        """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡πÅ‡∏•‡∏∞‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå"""
        try:
            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à
            decision_record = {
                'timestamp': decision.timestamp.isoformat(),
                'decision_type': decision.decision_type,
                'positions_to_close': decision.positions_to_close,
                'expected_profit': decision.expected_profit,
                'confidence': decision.confidence,
                'reasoning': decision.reasoning,
                'outcome': outcome
            }
            
            self.decision_history.append(decision_record)
            
            # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
            self.performance_stats['total_decisions'] += 1
            
            if outcome and outcome.get('success', False):
                self.performance_stats['successful_decisions'] += 1
                self.performance_stats['total_profit'] += outcome.get('actual_profit', 0)
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì accuracy rate
            if self.performance_stats['total_decisions'] > 0:
                self.performance_stats['accuracy_rate'] = (
                    self.performance_stats['successful_decisions'] / 
                    self.performance_stats['total_decisions']
                )
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì average profit
            if self.performance_stats['successful_decisions'] > 0:
                self.performance_stats['average_profit_per_decision'] = (
                    self.performance_stats['total_profit'] / 
                    self.performance_stats['successful_decisions']
                )
            
            logger.info(f"üß† AI Decision logged: {decision.decision_type} - Confidence: {decision.confidence:.1f}%")
            
        except Exception as e:
            logger.error(f"‚ùå Error logging decision: {e}")
    
    def save_ai_brain(self):
        """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å AI Brain ‡πÄ‡∏õ‡πá‡∏ô JSON"""
        try:
            brain_data = {
                'version': '1.0',
                'created': datetime.now().isoformat(),
                'weights': self.weights,
                'performance_stats': self.performance_stats,
                'decision_history': self.decision_history[-100:]  # ‡πÄ‡∏Å‡πá‡∏ö 100 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
            }
            
            with open(self.brain_file, 'w', encoding='utf-8') as f:
                json.dump(brain_data, f, indent=2, ensure_ascii=False)
            
            logger.info(f"üß† AI Brain saved to {self.brain_file}")
            
        except Exception as e:
            logger.error(f"‚ùå Error saving AI brain: {e}")
    
    def load_ai_brain(self):
        """‡πÇ‡∏´‡∏•‡∏î AI Brain ‡∏à‡∏≤‡∏Å JSON"""
        try:
            if os.path.exists(self.brain_file):
                with open(self.brain_file, 'r', encoding='utf-8') as f:
                    brain_data = json.load(f)
                
                # ‡πÇ‡∏´‡∏•‡∏î weights
                if 'weights' in brain_data:
                    self.weights.update(brain_data['weights'])
                
                # ‡πÇ‡∏´‡∏•‡∏î performance stats
                if 'performance_stats' in brain_data:
                    self.performance_stats.update(brain_data['performance_stats'])
                
                # ‡πÇ‡∏´‡∏•‡∏î decision history
                if 'decision_history' in brain_data:
                    self.decision_history = brain_data['decision_history']
                
                logger.info(f"üß† AI Brain loaded from {self.brain_file}")
                logger.info(f"   Accuracy Rate: {self.performance_stats.get('accuracy_rate', 0):.2%}")
                logger.info(f"   Total Decisions: {self.performance_stats.get('total_decisions', 0)}")
                
            else:
                logger.info("üß† No existing AI Brain found - Starting fresh")
                
        except Exception as e:
            logger.error(f"‚ùå Error loading AI brain: {e}")
    
    def get_ai_stats(self) -> Dict[str, Any]:
        """‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥ AI"""
        return {
            'accuracy_rate': self.performance_stats.get('accuracy_rate', 0),
            'total_decisions': self.performance_stats.get('total_decisions', 0),
            'successful_decisions': self.performance_stats.get('successful_decisions', 0),
            'total_profit': self.performance_stats.get('total_profit', 0),
            'average_profit_per_decision': self.performance_stats.get('average_profit_per_decision', 0),
            'weights': self.weights,
            'recent_decisions': len(self.decision_history)
        }
    
    def reset_ai_brain(self):
        """‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï AI Brain"""
        try:
            # Reset performance stats
            self.performance_stats = {
                'total_decisions': 0,
                'successful_decisions': 0,
                'accuracy_rate': 0.0,
                'total_profit': 0.0,
                'average_profit_per_decision': 0.0
            }
            
            # Reset weights to default
            self.weights = {
                'pnl_weight': 0.35,
                'time_weight': 0.20,
                'distance_weight': 0.20,
                'balance_weight': 0.15,
                'market_context_weight': 0.10
            }
            
            # Clear decision history
            self.decision_history = []
            
            # Delete brain file if exists
            if os.path.exists(self.brain_file):
                os.remove(self.brain_file)
            
            logger.info("üß† AI Position Intelligence Brain reset successfully")
            
        except Exception as e:
            logger.error(f"‚ùå Error resetting AI brain: {e}")
