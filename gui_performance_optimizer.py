# -*- coding: utf-8 -*-
"""
GUI Performance Optimizer
‡πÇ‡∏°‡∏î‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û GUI ‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Memory
"""

import time
import threading
import logging
from typing import Dict, List, Any, Optional, Set
from collections import deque
import gc

logger = logging.getLogger(__name__)

class GUIPerformanceOptimizer:
    """‡∏Ñ‡∏•‡∏≤‡∏™‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û GUI"""
    
    def __init__(self, max_memory_mb: int = 200):
        self.max_memory_mb = max_memory_mb
        self.max_widgets = 50
        self.max_history_size = 100
        
        # Memory tracking
        self.memory_usage_history = deque(maxlen=50)
        self.last_memory_check = 0
        self.memory_check_interval = 30  # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏∏‡∏Å 30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
        
        # Update throttling
        self.update_intervals = {
            'position_status': 5.0,    # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏°‡πâ‡∏ó‡∏∏‡∏Å 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
            'account_info': 60.0,      # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ó‡∏∏‡∏Å 60 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
            'portfolio_info': 120.0,   # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏≠‡∏£‡πå‡∏ï‡∏ó‡∏∏‡∏Å 120 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
            'hedge_analysis': 30.0,    # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå hedge ‡∏ó‡∏∏‡∏Å 30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
            'market_status': 15.0      # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ï‡∏•‡∏≤‡∏î‡∏ó‡∏∏‡∏Å 15 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
        }
        
        self.last_updates = {}
        
        # Performance monitoring
        self.performance_metrics = {
            'gui_response_time': deque(maxlen=100),
            'update_durations': deque(maxlen=50),
            'memory_usage': deque(maxlen=100),
            'error_count': 0,
            'success_count': 0
        }
        
        # Cleanup management
        self.cleanup_intervals = {
            'widgets': 300,      # ‡∏•‡πâ‡∏≤‡∏á widgets ‡∏ó‡∏∏‡∏Å 5 ‡∏ô‡∏≤‡∏ó‡∏µ
            'memory': 60,        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö memory ‡∏ó‡∏∏‡∏Å 1 ‡∏ô‡∏≤‡∏ó‡∏µ
            'logs': 600          # ‡∏•‡πâ‡∏≤‡∏á logs ‡∏ó‡∏∏‡∏Å 10 ‡∏ô‡∏≤‡∏ó‡∏µ
        }
        
        self.last_cleanup = {}
        
    def should_update(self, update_type: str) -> bool:
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡∏ß‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"""
        try:
            current_time = time.time()
            last_update = self.last_updates.get(update_type, 0)
            interval = self.update_intervals.get(update_type, 5.0)
            
            if current_time - last_update >= interval:
                self.last_updates[update_type] = current_time
                return True
            
            return False
            
        except Exception as e:
            logger.error(f"‚ùå Error checking update throttle: {e}")
            return True  # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏î error ‡πÉ‡∏´‡πâ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó
    
    def start_performance_monitoring(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û"""
        try:
            monitoring_thread = threading.Thread(
                target=self._performance_monitoring_loop,
                daemon=True,
                name="GUIPerformanceMonitor"
            )
            monitoring_thread.start()
            logger.info("üöÄ GUI Performance Monitoring started")
            
        except Exception as e:
            logger.error(f"‚ùå Error starting performance monitoring: {e}")
    
    def _performance_monitoring_loop(self):
        """‡∏•‡∏π‡∏õ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û"""
        while True:
            try:
                current_time = time.time()
                
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö memory
                if self._should_check_memory(current_time):
                    self._check_memory_usage()
                
                # ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î
                self._perform_cleanup(current_time)
                
                # ‡∏£‡∏≠ 30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
                time.sleep(30)
                
            except Exception as e:
                logger.error(f"‚ùå Error in performance monitoring loop: {e}")
                time.sleep(60)
    
    def _should_check_memory(self, current_time: float) -> bool:
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡∏ß‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö memory ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"""
        return current_time - self.last_memory_check >= self.memory_check_interval
    
    def _check_memory_usage(self):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ memory"""
        try:
            import psutil
            import os
            
            # ‡∏î‡∏∂‡∏á memory usage ‡∏Ç‡∏≠‡∏á process
            process = psutil.Process(os.getpid())
            memory_info = process.memory_info()
            memory_mb = memory_info.rss / 1024 / 1024
            
            # ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            self.memory_usage_history.append(memory_mb)
            self.performance_metrics['memory_usage'].append(memory_mb)
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if memory_mb > self.max_memory_mb:
                logger.warning(f"‚ö†Ô∏è High memory usage: {memory_mb:.1f}MB (limit: {self.max_memory_mb}MB)")
                self._force_cleanup()
            
            # Log ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
            avg_memory = sum(self.memory_usage_history) / len(self.memory_usage_history)
            max_memory = max(self.memory_usage_history)
            
            logger.debug(f"üìä Memory: Current: {memory_mb:.1f}MB, Avg: {avg_memory:.1f}MB, Max: {max_memory:.1f}MB")
            
            self.last_memory_check = time.time()
            
        except ImportError:
            logger.warning("‚ö†Ô∏è psutil not available - memory monitoring disabled")
        except Exception as e:
            logger.error(f"‚ùå Error checking memory usage: {e}")
    
    def _perform_cleanup(self, current_time: float):
        """‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏ï‡∏≤‡∏°‡∏Å‡∏≥‡∏´‡∏ô‡∏î"""
        try:
            for cleanup_type, interval in self.cleanup_intervals.items():
                last_cleanup = self.last_cleanup.get(cleanup_type, 0)
                
                if current_time - last_cleanup >= interval:
                    if cleanup_type == 'memory':
                        self._cleanup_memory()
                    elif cleanup_type == 'widgets':
                        self._cleanup_widgets()
                    elif cleanup_type == 'logs':
                        self._cleanup_logs()
                    
                    self.last_cleanup[cleanup_type] = current_time
                    
        except Exception as e:
            logger.error(f"‚ùå Error performing cleanup: {e}")
    
    def _cleanup_memory(self):
        """‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î memory"""
        try:
            # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å garbage collection
            collected = gc.collect()
            
            if collected > 0:
                logger.debug(f"üßπ Garbage collected: {collected} objects")
            
            # ‡∏•‡πâ‡∏≤‡∏á history ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πà‡∏≤‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ
            if len(self.memory_usage_history) > 30:
                self.memory_usage_history.clear()
            
            if len(self.performance_metrics['gui_response_time']) > 50:
                self.performance_metrics['gui_response_time'].clear()
                
        except Exception as e:
            logger.error(f"‚ùå Error cleaning up memory: {e}")
    
    def _cleanup_widgets(self):
        """‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î widgets"""
        try:
            # ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏à‡∏≤‡∏Å GUI ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡πâ‡∏≤‡∏á widgets ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ
            logger.debug("üßπ Widget cleanup scheduled")
            
        except Exception as e:
            logger.error(f"‚ùå Error cleaning up widgets: {e}")
    
    def _cleanup_logs(self):
        """‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î logs"""
        try:
            # ‡∏•‡πâ‡∏≤‡∏á performance metrics ‡πÄ‡∏Å‡πà‡∏≤
            for metric in self.performance_metrics.values():
                if hasattr(metric, 'clear') and len(metric) > 100:
                    metric.clear()
            
            logger.debug("üßπ Log cleanup completed")
            
        except Exception as e:
            logger.error(f"‚ùå Error cleaning up logs: {e}")
    
    def _force_cleanup(self):
        """‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠ memory ‡∏™‡∏π‡∏á"""
        try:
            logger.warning("üßπ Forcing cleanup due to high memory usage")
            
            # Garbage collection
            collected = gc.collect()
            
            # ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤
            self.memory_usage_history.clear()
            self.performance_metrics['gui_response_time'].clear()
            self.performance_metrics['update_durations'].clear()
            
            logger.info(f"üßπ Force cleanup completed: {collected} objects collected")
            
        except Exception as e:
            logger.error(f"‚ùå Error in force cleanup: {e}")
    
    def record_gui_response_time(self, response_time_ms: float):
        """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á GUI"""
        try:
            self.performance_metrics['gui_response_time'].append(response_time_ms)
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏£‡πá‡∏ß‡∏û‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if response_time_ms > 100:  # ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 100ms
                logger.warning(f"‚ö†Ô∏è Slow GUI response: {response_time_ms:.1f}ms")
            
        except Exception as e:
            logger.error(f"‚ùå Error recording GUI response time: {e}")
    
    def record_update_duration(self, update_type: str, duration_seconds: float):
        """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó"""
        try:
            self.performance_metrics['update_durations'].append(duration_seconds)
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏£‡πá‡∏ß‡∏û‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if duration_seconds > 5.0:  # ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
                logger.warning(f"‚ö†Ô∏è Slow {update_type} update: {duration_seconds:.1f}s")
            
        except Exception as e:
            logger.error(f"‚ùå Error recording update duration: {e}")
    
    def record_error(self, error_type: str):
        """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å error"""
        try:
            self.performance_metrics['error_count'] += 1
            logger.debug(f"üìä Error recorded: {error_type} (Total: {self.performance_metrics['error_count']})")
            
        except Exception as e:
            logger.error(f"‚ùå Error recording error: {e}")
    
    def record_success(self, operation_type: str):
        """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"""
        try:
            self.performance_metrics['success_count'] += 1
            logger.debug(f"üìä Success recorded: {operation_type} (Total: {self.performance_metrics['success_count']})")
            
        except Exception as e:
            logger.error(f"‚ùå Error recording success: {e}")
    
    def get_performance_report(self) -> Dict[str, Any]:
        """‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û"""
        try:
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
            response_times = list(self.performance_metrics['gui_response_time'])
            update_durations = list(self.performance_metrics['update_durations'])
            memory_usage = list(self.performance_metrics['memory_usage'])
            
            report = {
                'memory': {
                    'current_mb': memory_usage[-1] if memory_usage else 0,
                    'average_mb': sum(memory_usage) / len(memory_usage) if memory_usage else 0,
                    'max_mb': max(memory_usage) if memory_usage else 0,
                    'limit_mb': self.max_memory_mb
                },
                'performance': {
                    'avg_response_time_ms': sum(response_times) / len(response_times) if response_times else 0,
                    'max_response_time_ms': max(response_times) if response_times else 0,
                    'avg_update_duration_s': sum(update_durations) / len(update_durations) if update_durations else 0,
                    'max_update_duration_s': max(update_durations) if update_durations else 0
                },
                'reliability': {
                    'error_count': self.performance_metrics['error_count'],
                    'success_count': self.performance_metrics['success_count'],
                    'success_rate': (
                        self.performance_metrics['success_count'] / 
                        (self.performance_metrics['success_count'] + self.performance_metrics['error_count']) * 100
                        if (self.performance_metrics['success_count'] + self.performance_metrics['error_count']) > 0 else 0
                    )
                },
                'status': 'healthy' if self._is_performance_healthy() else 'needs_attention'
            }
            
            return report
            
        except Exception as e:
            logger.error(f"‚ùå Error generating performance report: {e}")
            return {}
    
    def _is_performance_healthy(self) -> bool:
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏î‡∏µ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"""
        try:
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö memory
            memory_usage = list(self.performance_metrics['memory_usage'])
            if memory_usage and memory_usage[-1] > self.max_memory_mb * 0.8:
                return False
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö response time
            response_times = list(self.performance_metrics['gui_response_time'])
            if response_times and max(response_times) > 200:  # ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 200ms
                return False
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö success rate
            total_operations = self.performance_metrics['success_count'] + self.performance_metrics['error_count']
            if total_operations > 10:  # ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 10 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á
                success_rate = self.performance_metrics['success_count'] / total_operations * 100
                if success_rate < 90:  # success rate ‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ 90%
                    return False
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Error checking performance health: {e}")
            return False


class LazyPositionLoader:
    """‡πÇ‡∏´‡∏•‡∏î Position ‡∏ó‡∏µ‡∏•‡∏∞‡∏™‡πà‡∏ß‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û"""
    
    def __init__(self, batch_size: int = 20, max_loaded: int = 50):
        self.batch_size = batch_size
        self.max_loaded = max_loaded
        self.loaded_positions = set()
        self.loaded_widgets = {}
        self.load_order = deque(maxlen=max_loaded)
        
    def load_visible_positions(self, all_positions: List[Any], scroll_position: int = 0) -> List[Any]:
        """‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏Ñ‡πà Position ‡∏ó‡∏µ‡πà‡∏°‡∏≠‡∏á‡πÄ‡∏´‡πá‡∏ô"""
        try:
            if not all_positions:
                return []
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£‡πÇ‡∏´‡∏•‡∏î
            start_idx = scroll_position
            end_idx = min(start_idx + self.batch_size, len(all_positions))
            
            # ‡πÇ‡∏´‡∏•‡∏î positions ‡∏ó‡∏µ‡πà‡∏°‡∏≠‡∏á‡πÄ‡∏´‡πá‡∏ô
            visible_positions = []
            for i in range(start_idx, end_idx):
                if i < len(all_positions):
                    pos = all_positions[i]
                    ticket = getattr(pos, 'ticket', 0)
                    
                    if ticket not in self.loaded_positions:
                        self.loaded_positions.add(ticket)
                        self.load_order.append(ticket)
                        
                        # ‡∏•‡∏ö positions ‡πÄ‡∏Å‡πà‡∏≤‡∏ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏ô‡∏Ç‡∏µ‡∏î‡∏à‡∏≥‡∏Å‡∏±‡∏î
                        if len(self.loaded_positions) > self.max_loaded:
                            oldest_ticket = self.load_order.popleft()
                            self.loaded_positions.discard(oldest_ticket)
                            if oldest_ticket in self.loaded_widgets:
                                del self.loaded_widgets[oldest_ticket]
                    
                    visible_positions.append(pos)
            
            return visible_positions
            
        except Exception as e:
            logger.error(f"‚ùå Error loading visible positions: {e}")
            return all_positions[:self.batch_size]
    
    def unload_position(self, ticket: int):
        """‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î position"""
        try:
            self.loaded_positions.discard(ticket)
            if ticket in self.loaded_widgets:
                del self.loaded_widgets[ticket]
            
            # ‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å load order
            if ticket in self.load_order:
                self.load_order.remove(ticket)
                
        except Exception as e:
            logger.error(f"‚ùå Error unloading position: {e}")
    
    def is_loaded(self, ticket: int) -> bool:
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ position ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"""
        return ticket in self.loaded_positions
    
    def get_load_stats(self) -> Dict[str, Any]:
        """‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î"""
        return {
            'loaded_count': len(self.loaded_positions),
            'max_loaded': self.max_loaded,
            'load_order': list(self.load_order),
            'loaded_tickets': list(self.loaded_positions)
        }


class UpdateThrottler:
    """‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û"""
    
    def __init__(self, min_interval: float = 2.0):
        self.min_interval = min_interval
        self.last_updates = {}
        self.update_counts = {}
        
    def should_update(self, key: str) -> bool:
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡∏ß‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"""
        try:
            current_time = time.time()
            last_update = self.last_updates.get(key, 0)
            
            if current_time - last_update >= self.min_interval:
                self.last_updates[key] = current_time
                self.update_counts[key] = self.update_counts.get(key, 0) + 1
                return True
            
            return False
            
        except Exception as e:
            logger.error(f"‚ùå Error checking update throttle: {e}")
            return True
    
    def get_update_stats(self) -> Dict[str, Any]:
        """‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó"""
        return {
            'last_updates': self.last_updates.copy(),
            'update_counts': self.update_counts.copy(),
            'min_interval': self.min_interval
        }
    
    def reset_stats(self):
        """‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥"""
        self.last_updates.clear()
        self.update_counts.clear()
