# -*- coding: utf-8 -*-
"""
Hedge Pairing Closer Module
‡πÇ‡∏°‡∏î‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î‡πÑ‡∏°‡πâ‡πÅ‡∏ö‡∏ö‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà (Hedge Strategy)
"""

import logging
import itertools
import time
from typing import List, Dict, Optional, Any, Tuple
from dataclasses import dataclass
from datetime import datetime

logger = logging.getLogger(__name__)

@dataclass
class HedgeCombination:
    """‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡πÑ‡∏°‡πâ"""
    positions: List[Any]
    total_profit: float
    combination_type: str
    size: int
    confidence_score: float
    reason: str

@dataclass
class ClosingDecision:
    """‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏õ‡∏¥‡∏î‡πÑ‡∏°‡πâ"""
    should_close: bool
    positions_to_close: List[Any]
    method: str
    net_pnl: float
    expected_pnl: float
    position_count: int
    buy_count: int
    sell_count: int
    confidence_score: float
    reason: str

class HedgePairingCloser:
    """üöÄ Hedge Pairing Closer - ‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡∏¥‡∏î‡πÑ‡∏°‡πâ‡πÅ‡∏ö‡∏ö‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà"""
    
    def __init__(self):
        # üéØ Hedge Strategy Parameters
        self.min_combination_size = 2      # ‡∏Ç‡∏ô‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥
        self.max_combination_size = 8       # ‡∏Ç‡∏ô‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
        self.min_net_profit = 0.1          # ‡∏Å‡∏≥‡πÑ‡∏£‡∏™‡∏∏‡∏ó‡∏ò‡∏¥‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥ $0.1
        self.max_acceptable_loss = 5.0     # ‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö‡πÑ‡∏î‡πâ $5.0
        
        # üîß Position Generation Parameters
        self.enable_position_generation = True  # ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡πÑ‡∏°‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
        self.max_additional_positions = 3       # ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÑ‡∏°‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
        self.additional_position_volume = 0.01  # ‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏°‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
        
        logger.info("üöÄ Hedge Pairing Closer initialized")
        logger.info(f"   Min Combination Size: {self.min_combination_size}")
        logger.info(f"   Max Combination Size: {self.max_combination_size}")
        logger.info(f"   Min Net Profit: ${self.min_net_profit}")
        logger.info(f"   Position Generation: {'Enabled' if self.enable_position_generation else 'Disabled'}")
    
    def find_optimal_closing(self, positions: List[Any], account_info: Dict, 
                           market_conditions: Optional[Dict] = None) -> Optional[ClosingDecision]:
        """
        üß† ‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î‡πÑ‡∏°‡πâ‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡πÅ‡∏ö‡∏ö‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà
        """
        try:
            if len(positions) < 1:
                logger.info("‚è∏Ô∏è Need at least 1 position for analysis")
                return None
            
            logger.info(f"üîç HEDGE ANALYSIS: {len(positions)} positions")
            
            # 1. ‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡πÑ‡∏°‡πâ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
            profitable_combinations = self._find_profitable_combinations(positions)
            
            if profitable_combinations:
                # ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏° ‚Üí ‡∏õ‡∏¥‡∏î‡πÑ‡∏°‡πâ
                best_combination = profitable_combinations[0]
                logger.info(f"‚úÖ HEDGE COMBINATION FOUND: {best_combination.combination_type}")
                logger.info(f"   Net P&L: ${best_combination.total_profit:.2f}")
                logger.info(f"   Positions: {best_combination.size}")
                
                return ClosingDecision(
                    should_close=True,
                    positions_to_close=best_combination.positions,
                    method="HEDGE_PAIRING",
                    net_pnl=best_combination.total_profit,
                    expected_pnl=best_combination.total_profit,
                    position_count=best_combination.size,
                    buy_count=sum(1 for p in best_combination.positions if p.type == 0),
                    sell_count=sum(1 for p in best_combination.positions if p.type == 1),
                    confidence_score=best_combination.confidence_score,
                    reason=best_combination.reason
                )
            
            # 2. ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏° ‚Üí ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
            logger.info("üí§ No profitable combinations found - waiting for better conditions")
            logger.info(f"   Current positions: {len(positions)} total")
            logger.info(f"   Buy positions: {len([p for p in positions if getattr(p, 'type', 0) == 0])}")
            logger.info(f"   Sell positions: {len([p for p in positions if getattr(p, 'type', 0) == 1])}")
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
            for pos in positions:
                pos_type = "BUY" if getattr(pos, 'type', 0) == 0 else "SELL"
                profit = getattr(pos, 'profit', 0)
                ticket = getattr(pos, 'ticket', 'N/A')
                has_hedge = self._has_hedge_pair(positions, pos)
                hedge_status = "üîó HEDGED" if has_hedge else "üí§ NO HEDGE"
                logger.info(f"   {ticket}: {pos_type} ${profit:.2f} - {hedge_status}")
            
            return None
            
        except Exception as e:
            logger.error(f"‚ùå Error in hedge pairing analysis: {e}")
            return None
    
    def _find_profitable_combinations(self, positions: List[Any]) -> List[HedgeCombination]:
        """üîç ‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡πÑ‡∏°‡πâ‡∏ó‡∏µ‡πà‡∏ú‡∏•‡∏£‡∏ß‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏ö‡∏ß‡∏Å (‡πÉ‡∏ä‡πâ‡∏´‡∏•‡∏±‡∏Å‡∏Å‡∏≤‡∏£ Hedge ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)"""
        try:
            # ‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡πÅ‡∏ö‡∏ö Hedge ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
            hedge_combinations = self._find_hedge_combinations(positions)
            if hedge_combinations:
                logger.info(f"üîç Found {len(hedge_combinations)} hedge combinations")
                return hedge_combinations
            
            # ‡∏´‡∏≤‡πÑ‡∏°‡πâ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏π‡πà‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πâ‡∏ó‡∏µ‡πà‡∏°‡∏µ Hedge ‡πÅ‡∏•‡πâ‡∏ß
            unpaired_profitable = []  # ‡πÑ‡∏°‡πâ‡∏Å‡∏≥‡πÑ‡∏£‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏π‡πà
            unpaired_losing = []     # ‡πÑ‡∏°‡πâ‡∏ï‡∏¥‡∏î‡∏•‡∏ö‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏π‡πà
            existing_hedge_pairs = [] # Hedge pairs ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
            
            # ‡πÅ‡∏¢‡∏Å‡πÑ‡∏°‡πâ‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
            for pos in positions:
                pos_ticket = getattr(pos, 'ticket', 'N/A')
                pos_profit = getattr(pos, 'profit', 0)
                has_hedge = self._has_hedge_pair(positions, pos)
                
                if not has_hedge:
                    if pos_profit >= self.min_net_profit:
                        unpaired_profitable.append(pos)
                        logger.info(f"üîç Unpaired profitable position: {pos_ticket} (${pos_profit:.2f})")
                    else:
                        unpaired_losing.append(pos)
                        logger.info(f"üîç Unpaired losing position: {pos_ticket} (${pos_profit:.2f}) - waiting for opposite")
                else:
                    logger.info(f"üîç Hedged position: {pos_ticket} (${pos_profit:.2f})")
            
            # ‡∏´‡∏≤ Hedge pairs ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
            existing_hedge_pairs = self._find_existing_hedge_pairs(positions)
            
            logger.info(f"üìä Position Summary:")
            logger.info(f"   Unpaired profitable: {len(unpaired_profitable)}")
            logger.info(f"   Unpaired losing: {len(unpaired_losing)}")
            logger.info(f"   Existing hedge pairs: {len(existing_hedge_pairs)}")
            
            # ‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡∏£‡∏ß‡∏°‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î: ‡πÑ‡∏°‡πâ‡∏Å‡∏≥‡πÑ‡∏£‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏π‡πà + Hedge pairs ‡∏ó‡∏µ‡πà‡∏ï‡∏¥‡∏î‡∏•‡∏ö
            profitable_combinations = self._find_helping_combinations(unpaired_profitable, existing_hedge_pairs)
            
            # ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏£‡∏ß‡∏°‡πÅ‡∏ö‡∏ö‡∏ú‡∏™‡∏°‡∏≠‡∏∑‡πà‡∏ô‡πÜ - ‡πÉ‡∏ä‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏£‡∏∞‡∏ö‡∏ö‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠
            
            # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏ú‡∏•‡∏£‡∏ß‡∏°‡∏Å‡∏≥‡πÑ‡∏£ (‡∏°‡∏≤‡∏Å‡∏™‡∏∏‡∏î‡∏Å‡πà‡∏≠‡∏ô)
            profitable_combinations.sort(key=lambda x: x.total_profit, reverse=True)
            
            logger.info(f"üîç Found {len(profitable_combinations)} profitable combinations")
            return profitable_combinations
            
        except Exception as e:
            logger.error(f"‚ùå Error finding profitable combinations: {e}")
            return []
    
    def _is_same_type_combination(self, combination: List[Any]) -> bool:
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡πÅ‡∏ö‡∏ö‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"""
        try:
            if len(combination) < 2:
                return False
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏°‡πâ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            first_type = getattr(combination[0], 'type', 0)
            for pos in combination[1:]:
                if getattr(pos, 'type', 0) != first_type:
                    return False  # ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡πÅ‡∏ö‡∏ö‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô
            
            return True  # ‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏ö‡∏ö‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô
            
        except Exception as e:
            logger.error(f"‚ùå Error checking same type combination: {e}")
            return False
    
    def _find_hedge_combinations(self, positions: List[Any]) -> List[HedgeCombination]:
        """‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡πÅ‡∏ö‡∏ö Hedge (‡∏ï‡∏£‡∏á‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏™‡∏°‡∏≠)"""
        try:
            hedge_combinations = []
            
            # ‡πÅ‡∏¢‡∏Å‡πÑ‡∏°‡πâ Buy ‡πÅ‡∏•‡∏∞ Sell
            buy_positions = [p for p in positions if getattr(p, 'type', 0) == 0]
            sell_positions = [p for p in positions if getattr(p, 'type', 0) == 1]
            
            logger.info(f"üîç Analyzing hedge combinations: {len(buy_positions)} Buy, {len(sell_positions)} Sell (Total: {len(positions)} positions)")
            logger.info(f"üîç Looking for hedge pairs without duplication...")
            
            # Step 1: ‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏ï‡∏£‡∏á‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏™‡∏°‡∏≠ (‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥‡∏ã‡πâ‡∏≠‡∏ô)
            hedge_pairs = []
            used_positions = set()  # ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡πÑ‡∏°‡πâ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß
            
            # ‡∏´‡∏≤ Buy ‡∏ï‡∏¥‡∏î‡∏•‡∏ö + Sell ‡∏Å‡∏≥‡πÑ‡∏£ (‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥‡∏ã‡πâ‡∏≠‡∏ô)
            for buy_pos in buy_positions:
                if getattr(buy_pos, 'profit', 0) < 0:  # Buy ‡∏ï‡∏¥‡∏î‡∏•‡∏ö
                    buy_ticket = getattr(buy_pos, 'ticket', 'N/A')
                    if buy_ticket in used_positions:
                        continue  # ‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏°‡πâ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß
                    
                    for sell_pos in sell_positions:
                        if getattr(sell_pos, 'profit', 0) > 0:  # Sell ‡∏Å‡∏≥‡πÑ‡∏£
                            sell_ticket = getattr(sell_pos, 'ticket', 'N/A')
                            if sell_ticket in used_positions:
                                continue  # ‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏°‡πâ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß
                            
                            # ‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡πÑ‡∏°‡πâ‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ
                            hedge_pairs.append({
                                'buy': buy_pos,
                                'sell': sell_pos,
                                'type': 'BUY_LOSS_SELL_PROFIT'
                            })
                            used_positions.add(buy_ticket)
                            used_positions.add(sell_ticket)
                            logger.info(f"üîç Found hedge pair: Buy {buy_ticket} (${getattr(buy_pos, 'profit', 0):.2f}) + Sell {sell_ticket} (${getattr(sell_pos, 'profit', 0):.2f})")
                            logger.info(f"   Used positions: {list(used_positions)}")
                            break  # ‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
            
            # ‡∏´‡∏≤ Sell ‡∏ï‡∏¥‡∏î‡∏•‡∏ö + Buy ‡∏Å‡∏≥‡πÑ‡∏£ (‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥‡∏ã‡πâ‡∏≠‡∏ô)
            for sell_pos in sell_positions:
                if getattr(sell_pos, 'profit', 0) < 0:  # Sell ‡∏ï‡∏¥‡∏î‡∏•‡∏ö
                    sell_ticket = getattr(sell_pos, 'ticket', 'N/A')
                    if sell_ticket in used_positions:
                        continue  # ‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏°‡πâ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß
                    
                    for buy_pos in buy_positions:
                        if getattr(buy_pos, 'profit', 0) > 0:  # Buy ‡∏Å‡∏≥‡πÑ‡∏£
                            buy_ticket = getattr(buy_pos, 'ticket', 'N/A')
                            if buy_ticket in used_positions:
                                continue  # ‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏°‡πâ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß
                            
                            # ‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡πÑ‡∏°‡πâ‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ
                            hedge_pairs.append({
                                'buy': buy_pos,
                                'sell': sell_pos,
                                'type': 'SELL_LOSS_BUY_PROFIT'
                            })
                            used_positions.add(sell_ticket)
                            used_positions.add(buy_ticket)
                            logger.info(f"üîç Found hedge pair: Sell {sell_ticket} (${getattr(sell_pos, 'profit', 0):.2f}) + Buy {buy_ticket} (${getattr(buy_pos, 'profit', 0):.2f})")
                            logger.info(f"   Used positions: {list(used_positions)}")
                            break  # ‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà
            logger.info(f"üìä Hedge pairing summary: {len(hedge_pairs)} pairs found")
            logger.info(f"   Used positions: {list(used_positions)}")
            logger.info(f"   Unused positions: {len(positions) - len(used_positions)}")
            
            # ‡πÅ‡∏™‡∏î‡∏á‡πÑ‡∏°‡πâ‡∏ó‡∏µ‡πà‡∏°‡∏µ Hedge
            hedged_positions = []
            for pos in positions:
                if self._has_hedge_pair(positions, pos):
                    hedged_positions.append(getattr(pos, 'ticket', 'N/A'))
            
            if hedged_positions:
                logger.info(f"üîó Hedged positions: {hedged_positions}")
                logger.info(f"   These positions will NOT be closed individually - waiting for additional positions")
            
            # Step 2: ‡∏´‡∏≤‡πÑ‡∏°‡πâ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏°‡∏≤‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
            for hedge_pair in hedge_pairs:
                # ‡∏´‡∏≤‡πÑ‡∏°‡πâ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡πÑ‡∏£‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏°‡∏µ Hedge ‡∏Å‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏≠‡∏∑‡πà‡∏ô
                additional_positions = self._find_additional_profitable_positions(
                    positions, hedge_pair['buy'], hedge_pair['sell']
                )
                
                if additional_positions:
                    # ‡∏£‡∏ß‡∏°‡πÑ‡∏°‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
                    all_positions = [hedge_pair['buy'], hedge_pair['sell']] + additional_positions
                    total_profit = sum(getattr(pos, 'profit', 0) for pos in all_positions)
                    
                    logger.info(f"üîç Testing hedge with additional positions: ${total_profit:.2f}")
                    
                    if total_profit >= self.min_net_profit:
                        hedge_combinations.append(HedgeCombination(
                            positions=all_positions,
                            total_profit=total_profit,
                            combination_type=f"HEDGE_{hedge_pair['type']}_WITH_ADDITIONAL",
                            size=len(all_positions),
                            confidence_score=95.0,  # Hedge ‡∏°‡∏µ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏π‡∏á‡∏°‡∏≤‡∏Å
                            reason=f"Hedge: {hedge_pair['type']} with additional profitable positions"
                        ))
                        logger.info(f"‚úÖ Complete hedge combination found: ${total_profit:.2f}")
                else:
                    # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏°‡πâ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡πÉ‡∏´‡πâ‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà Hedge ‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß (‡πÑ‡∏°‡πà‡∏™‡∏ô‡πÉ‡∏à‡∏ú‡∏•‡∏£‡∏ß‡∏°)
                    total_profit = getattr(hedge_pair['buy'], 'profit', 0) + getattr(hedge_pair['sell'], 'profit', 0)
                    
                    logger.info(f"üîç Testing hedge pair only: ${total_profit:.2f}")
                    
                    # ‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà Hedge ‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß (‡πÑ‡∏°‡πà‡∏™‡∏ô‡πÉ‡∏à‡∏ú‡∏•‡∏£‡∏ß‡∏°)
                    hedge_combinations.append(HedgeCombination(
                        positions=[hedge_pair['buy'], hedge_pair['sell']],
                        total_profit=total_profit,
                        combination_type=f"HEDGE_{hedge_pair['type']}_ONLY",
                        size=2,
                        confidence_score=85.0,  # Hedge ‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß‡∏°‡∏µ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏π‡∏á
                        reason=f"Hedge: {hedge_pair['type']} (waiting for additional positions)"
                    ))
                    logger.info(f"‚úÖ Hedge pair found: ${total_profit:.2f}")
            
            # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏ú‡∏•‡∏£‡∏ß‡∏°‡∏Å‡∏≥‡πÑ‡∏£ (‡∏°‡∏≤‡∏Å‡∏™‡∏∏‡∏î‡∏Å‡πà‡∏≠‡∏ô)
            hedge_combinations.sort(key=lambda x: x.total_profit, reverse=True)
            
            return hedge_combinations
            
        except Exception as e:
            logger.error(f"‚ùå Error finding hedge combinations: {e}")
            return []
    
    def _find_additional_profitable_positions(self, positions: List[Any], hedge_buy: Any, hedge_sell: Any) -> List[Any]:
        """‡∏´‡∏≤‡πÑ‡∏°‡πâ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡πÑ‡∏£‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏°‡∏µ Hedge ‡∏Å‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏≠‡∏∑‡πà‡∏ô"""
        try:
            additional_positions = []
            
            # ‡∏´‡∏≤‡πÑ‡∏°‡πâ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡πÑ‡∏£
            for pos in positions:
                if pos == hedge_buy or pos == hedge_sell:
                    continue  # ‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏°‡πâ‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà Hedge ‡πÅ‡∏•‡πâ‡∏ß
                
                if getattr(pos, 'profit', 0) > 0:  # ‡πÑ‡∏°‡πâ‡∏Å‡∏≥‡πÑ‡∏£
                    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πâ‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏°‡∏µ Hedge ‡∏Å‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏≠‡∏∑‡πà‡∏ô
                    if not self._has_hedge_pair(positions, pos):
                        additional_positions.append(pos)
                        logger.info(f"üîç Found additional profitable position: {getattr(pos, 'ticket', 'N/A')} (${getattr(pos, 'profit', 0):.2f})")
            
            return additional_positions
            
        except Exception as e:
            logger.error(f"‚ùå Error finding additional positions: {e}")
            return []
    
    def _find_existing_hedge_pairs(self, positions: List[Any]) -> List[dict]:
        """‡∏´‡∏≤ Hedge pairs ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß"""
        try:
            hedge_pairs = []
            used_positions = set()
            
            # ‡πÅ‡∏¢‡∏Å‡πÑ‡∏°‡πâ Buy ‡πÅ‡∏•‡∏∞ Sell
            buy_positions = [p for p in positions if getattr(p, 'type', 0) == 0]
            sell_positions = [p for p in positions if getattr(p, 'type', 0) == 1]
            
            # ‡∏´‡∏≤ Buy ‡∏ï‡∏¥‡∏î‡∏•‡∏ö + Sell ‡∏Å‡∏≥‡πÑ‡∏£
            for buy_pos in buy_positions:
                if getattr(buy_pos, 'profit', 0) < 0:  # Buy ‡∏ï‡∏¥‡∏î‡∏•‡∏ö
                    buy_ticket = getattr(buy_pos, 'ticket', 'N/A')
                    if buy_ticket in used_positions:
                        continue
                    
                    for sell_pos in sell_positions:
                        if getattr(sell_pos, 'profit', 0) > 0:  # Sell ‡∏Å‡∏≥‡πÑ‡∏£
                            sell_ticket = getattr(sell_pos, 'ticket', 'N/A')
                            if sell_ticket in used_positions:
                                continue
                            
                            # ‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡πÑ‡∏°‡πâ‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ
                            total_profit = getattr(buy_pos, 'profit', 0) + getattr(sell_pos, 'profit', 0)
                            hedge_pairs.append({
                                'buy': buy_pos,
                                'sell': sell_pos,
                                'total_profit': total_profit,
                                'type': 'BUY_LOSS_SELL_PROFIT',
                                'positions': [buy_pos, sell_pos]
                            })
                            used_positions.add(buy_ticket)
                            used_positions.add(sell_ticket)
                            logger.info(f"üîç Existing hedge pair: Buy {buy_ticket} + Sell {sell_ticket} = ${total_profit:.2f}")
                            break
            
            # ‡∏´‡∏≤ Sell ‡∏ï‡∏¥‡∏î‡∏•‡∏ö + Buy ‡∏Å‡∏≥‡πÑ‡∏£
            for sell_pos in sell_positions:
                if getattr(sell_pos, 'profit', 0) < 0:  # Sell ‡∏ï‡∏¥‡∏î‡∏•‡∏ö
                    sell_ticket = getattr(sell_pos, 'ticket', 'N/A')
                    if sell_ticket in used_positions:
                        continue
                    
                    for buy_pos in buy_positions:
                        if getattr(buy_pos, 'profit', 0) > 0:  # Buy ‡∏Å‡∏≥‡πÑ‡∏£
                            buy_ticket = getattr(buy_pos, 'ticket', 'N/A')
                            if buy_ticket in used_positions:
                                continue
                            
                            # ‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡πÑ‡∏°‡πâ‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ
                            total_profit = getattr(sell_pos, 'profit', 0) + getattr(buy_pos, 'profit', 0)
                            hedge_pairs.append({
                                'buy': buy_pos,
                                'sell': sell_pos,
                                'total_profit': total_profit,
                                'type': 'SELL_LOSS_BUY_PROFIT',
                                'positions': [sell_pos, buy_pos]
                            })
                            used_positions.add(sell_ticket)
                            used_positions.add(buy_ticket)
                            logger.info(f"üîç Existing hedge pair: Sell {sell_ticket} + Buy {buy_ticket} = ${total_profit:.2f}")
                            break
            
            return hedge_pairs
            
        except Exception as e:
            logger.error(f"‚ùå Error finding existing hedge pairs: {e}")
            return []
    
    def _find_helping_combinations(self, unpaired_profitable: List[Any], existing_hedge_pairs: List[dict]) -> List[HedgeCombination]:
        """‡∏´‡∏≤‡πÑ‡∏°‡πâ‡∏Å‡∏≥‡πÑ‡∏£‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏π‡πà‡πÑ‡∏õ‡∏ä‡πà‡∏ß‡∏¢ Hedge pairs ‡∏ó‡∏µ‡πà‡∏ï‡∏¥‡∏î‡∏•‡∏ö"""
        try:
            helping_combinations = []
            
            if not unpaired_profitable or not existing_hedge_pairs:
                logger.info("üí§ No unpaired profitable positions or existing hedge pairs to help")
                return helping_combinations
            
            # ‡∏´‡∏≤ Hedge pairs ‡∏ó‡∏µ‡πà‡∏ï‡∏¥‡∏î‡∏•‡∏ö
            losing_hedge_pairs = [pair for pair in existing_hedge_pairs if pair['total_profit'] < 0]
            
            if not losing_hedge_pairs:
                logger.info("üí§ No losing hedge pairs to help")
                return helping_combinations
            
            logger.info(f"üîç Found {len(losing_hedge_pairs)} losing hedge pairs to help")
            
            # ‡∏•‡∏≠‡∏á‡∏ó‡∏∏‡∏Å‡∏Å‡∏≤‡∏£‡∏£‡∏ß‡∏°‡∏Ç‡∏≠‡∏á‡πÑ‡∏°‡πâ‡∏Å‡∏≥‡πÑ‡∏£‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏π‡πà
            for size in range(1, len(unpaired_profitable) + 1):
                for profitable_combo in itertools.combinations(unpaired_profitable, size):
                    profitable_total = sum(getattr(pos, 'profit', 0) for pos in profitable_combo)
                    
                    # ‡∏•‡∏≠‡∏á‡∏ä‡πà‡∏ß‡∏¢ Hedge pairs ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏π‡πà
                    for hedge_pair in losing_hedge_pairs:
                        combined_profit = profitable_total + hedge_pair['total_profit']
                        
                        logger.info(f"üîç Testing: {len(profitable_combo)} profitable positions (${profitable_total:.2f}) + hedge pair (${hedge_pair['total_profit']:.2f}) = ${combined_profit:.2f}")
                        
                        if combined_profit >= self.min_net_profit:
                            # ‡∏£‡∏ß‡∏°‡πÑ‡∏°‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
                            all_positions = list(profitable_combo) + hedge_pair['positions']
                            
                            helping_combinations.append(HedgeCombination(
                                positions=all_positions,
                                total_profit=combined_profit,
                                combination_type=f"HELPING_{hedge_pair['type']}",
                                size=len(all_positions),
                                confidence_score=95.0,
                                reason=f"Unpaired profitable positions helping hedge pair: {hedge_pair['type']}"
                            ))
                            
                            logger.info(f"‚úÖ Found helping combination: ${combined_profit:.2f}")
            
            # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏ú‡∏•‡∏£‡∏ß‡∏°‡∏Å‡∏≥‡πÑ‡∏£ (‡∏°‡∏≤‡∏Å‡∏™‡∏∏‡∏î‡∏Å‡πà‡∏≠‡∏ô)
            helping_combinations.sort(key=lambda x: x.total_profit, reverse=True)
            
            return helping_combinations
            
        except Exception as e:
            logger.error(f"‚ùå Error finding helping combinations: {e}")
            return []
    
    def _has_hedge_pair(self, positions: List[Any], position: Any) -> bool:
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πâ‡∏ô‡∏µ‡πâ‡∏°‡∏µ Hedge ‡∏Å‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏≠‡∏∑‡πà‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"""
        try:
            pos_type = getattr(position, 'type', 0)
            pos_profit = getattr(position, 'profit', 0)
            
            # ‡∏´‡∏≤‡πÑ‡∏°‡πâ‡∏ï‡∏£‡∏á‡∏Ç‡πâ‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà Hedge ‡πÑ‡∏î‡πâ
            for other_pos in positions:
                if other_pos == position:
                    continue
                
                other_type = getattr(other_pos, 'type', 0)
                other_profit = getattr(other_pos, 'profit', 0)
                
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà Hedge ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡πÑ‡∏î‡πâ
                if pos_type != other_type:  # ‡πÑ‡∏°‡πâ‡∏ï‡∏£‡∏á‡∏Ç‡πâ‡∏≤‡∏°
                    # ‡∏Å‡∏£‡∏ì‡∏µ 1: ‡πÑ‡∏°‡πâ‡∏ô‡∏µ‡πâ‡∏ï‡∏¥‡∏î‡∏•‡∏ö + ‡πÑ‡∏°‡πâ‡∏ï‡∏£‡∏á‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≥‡πÑ‡∏£
                    if pos_profit < 0 and other_profit > 0:
                        return True
                    # ‡∏Å‡∏£‡∏ì‡∏µ 2: ‡πÑ‡∏°‡πâ‡∏ô‡∏µ‡πâ‡∏Å‡∏≥‡πÑ‡∏£ + ‡πÑ‡∏°‡πâ‡∏ï‡∏£‡∏á‡∏Ç‡πâ‡∏≤‡∏°‡∏ï‡∏¥‡∏î‡∏•‡∏ö
                    elif pos_profit > 0 and other_profit < 0:
                        return True
            
            return False
            
        except Exception as e:
            logger.error(f"‚ùå Error checking hedge pair: {e}")
            return False
    
    def _get_combination_type(self, positions: List[Any]) -> str:
        """üìä ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà"""
        try:
            sell_count = sum(1 for pos in positions if getattr(pos, 'type', 0) == 1)
            buy_count = sum(1 for pos in positions if getattr(pos, 'type', 0) == 0)
            
            if sell_count > buy_count:
                return f"SELL_MAJORITY_{sell_count}S+{buy_count}B"
            elif buy_count > sell_count:
                return f"BUY_MAJORITY_{buy_count}B+{sell_count}S"
            else:
                return f"BALANCED_{sell_count}S+{buy_count}B"
                
        except Exception as e:
            logger.error(f"‚ùå Error calculating combination type: {e}")
            return "UNKNOWN"
    
    def _calculate_confidence_score(self, positions: List[Any], total_profit: float) -> float:
        """üìà ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à"""
        try:
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ï‡∏≤‡∏°‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡∏ï‡πà‡∏≤‡∏á‡πÜ
            profit_score = min(100, max(0, total_profit * 2))  # ‡∏Å‡∏≥‡πÑ‡∏£
            size_score = min(100, max(0, len(positions) * 10))  # ‡∏Ç‡∏ô‡∏≤‡∏î
            balance_score = self._calculate_balance_score(positions)  # ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏°‡∏î‡∏∏‡∏•
            
            # ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏ß‡∏°
            total_score = (profit_score + size_score + balance_score) / 3
            
            return min(100, max(0, total_score))
            
        except Exception as e:
            logger.error(f"‚ùå Error calculating confidence score: {e}")
            return 50.0
    
    def _calculate_balance_score(self, positions: List[Any]) -> float:
        """‚öñÔ∏è ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏°‡∏î‡∏∏‡∏•"""
        try:
            sell_count = sum(1 for pos in positions if getattr(pos, 'type', 0) == 1)
            buy_count = sum(1 for pos in positions if getattr(pos, 'type', 0) == 0)
            total_count = len(positions)
            
            if total_count == 0:
                return 0
            
            # ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏°‡∏î‡∏∏‡∏• (‡∏¢‡∏¥‡πà‡∏á‡∏™‡∏°‡∏î‡∏∏‡∏•‡∏¢‡∏¥‡πà‡∏á‡∏î‡∏µ)
            balance_ratio = min(sell_count, buy_count) / max(sell_count, buy_count)
            balance_score = balance_ratio * 100
            
            return balance_score
            
        except Exception as e:
            logger.error(f"‚ùå Error calculating balance score: {e}")
            return 50.0
    
    def _generate_additional_positions(self, positions: List[Any]) -> List[Any]:
        """üìà ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏°‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà"""
        try:
            additional_positions = []
            
            # ‡∏´‡∏≤‡πÑ‡∏°‡πâ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà
            unmatched_positions = self._find_unmatched_positions(positions)
            
            for pos in unmatched_positions[:self.max_additional_positions]:
                if getattr(pos, 'type', 0) == 1:  # Sell ‡∏ï‡∏¥‡∏î‡∏•‡∏ö
                    # ‡∏™‡∏£‡πâ‡∏≤‡∏á Buy ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà
                    new_buy = self._create_opposite_position(pos, "BUY")
                    if new_buy:
                        additional_positions.append(new_buy)
                
                elif getattr(pos, 'type', 0) == 0:  # Buy ‡∏ï‡∏¥‡∏î‡∏•‡∏ö
                    # ‡∏™‡∏£‡πâ‡∏≤‡∏á Sell ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà
                    new_sell = self._create_opposite_position(pos, "SELL")
                    if new_sell:
                        additional_positions.append(new_sell)
            
            logger.info(f"üìà Generated {len(additional_positions)} additional positions")
            return additional_positions
            
        except Exception as e:
            logger.error(f"‚ùå Error generating additional positions: {e}")
            return []
    
    def _find_unmatched_positions(self, positions: List[Any]) -> List[Any]:
        """üîç ‡∏´‡∏≤‡πÑ‡∏°‡πâ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà"""
        try:
            unmatched_positions = []
            
            for pos in positions:
                profit = getattr(pos, 'profit', 0)
                
                # ‡πÑ‡∏°‡πâ‡∏ï‡∏¥‡∏î‡∏•‡∏ö‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà
                if profit < 0:
                    unmatched_positions.append(pos)
            
            # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô (‡∏°‡∏≤‡∏Å‡∏™‡∏∏‡∏î‡∏Å‡πà‡∏≠‡∏ô)
            unmatched_positions.sort(key=lambda x: getattr(x, 'profit', 0))
            
            logger.info(f"üîç Found {len(unmatched_positions)} unmatched positions")
            return unmatched_positions
            
        except Exception as e:
            logger.error(f"‚ùå Error finding unmatched positions: {e}")
            return []
    
    def _create_opposite_position(self, original_pos: Any, opposite_type: str) -> Optional[Any]:
        """üîÑ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏°‡πâ‡∏ï‡∏£‡∏á‡∏Ç‡πâ‡∏≤‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà"""
        try:
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏°‡πâ‡πÉ‡∏´‡∏°‡πà (‡∏à‡∏≥‡∏•‡∏≠‡∏á)
            new_pos = type('Position', (), {
                'ticket': f"NEW_{int(time.time())}",
                'symbol': getattr(original_pos, 'symbol', 'XAUUSD'),
                'type': 0 if opposite_type == "BUY" else 1,
                'volume': self.additional_position_volume,
                'price_open': getattr(original_pos, 'price_current', 0),
                'price_current': getattr(original_pos, 'price_current', 0),
                'profit': 0.0,  # ‡πÑ‡∏°‡πâ‡πÉ‡∏´‡∏°‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≥‡πÑ‡∏£
                'time': int(time.time()),
                'comment': f"Hedge for {getattr(original_pos, 'ticket', 'unknown')}"
            })()
            
            logger.info(f"üîÑ Created {opposite_type} position for ticket {getattr(original_pos, 'ticket', 'unknown')}")
            return new_pos
            
        except Exception as e:
            logger.error(f"‚ùå Error creating opposite position: {e}")
            return None

def create_hedge_pairing_closer() -> HedgePairingCloser:
    """‡∏™‡∏£‡πâ‡∏≤‡∏á Hedge Pairing Closer"""
    return HedgePairingCloser()
