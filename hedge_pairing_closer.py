# -*- coding: utf-8 -*-
"""
Hedge Pairing Closer Module
‡πÇ‡∏°‡∏î‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î‡πÑ‡∏°‡πâ‡πÅ‡∏ö‡∏ö‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà (Hedge Strategy)
"""

import logging
import itertools
import time
from typing import List, Dict, Optional, Any, Tuple
from dataclasses import dataclass
from datetime import datetime
from concurrent.futures import ThreadPoolExecutor, as_completed
import multiprocessing

logger = logging.getLogger(__name__)

@dataclass
class HedgeCombination:
    """‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡πÑ‡∏°‡πâ"""
    positions: List[Any]
    total_profit: float
    combination_type: str
    size: int
    confidence_score: float
    reason: str

@dataclass
class ClosingDecision:
    """‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏õ‡∏¥‡∏î‡πÑ‡∏°‡πâ"""
    should_close: bool
    positions_to_close: List[Any]
    method: str
    net_pnl: float
    expected_pnl: float
    position_count: int
    buy_count: int
    sell_count: int
    confidence_score: float
    reason: str

class HedgePairingCloser:
    """üöÄ Hedge Pairing Closer - ‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡∏¥‡∏î‡πÑ‡∏°‡πâ‡πÅ‡∏ö‡∏ö‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà"""
    
    def __init__(self, symbol: str = "XAUUSD"):
        # üéØ Hedge Strategy Parameters
        self.symbol = symbol                # Symbol ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ó‡∏£‡∏î
        self.min_combination_size = 2      # ‡∏Ç‡∏ô‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥
        self.max_combination_size = 12      # ‡∏Ç‡∏ô‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î (‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å 8)
        self.min_net_profit = 0.05         # ‡∏Å‡∏≥‡πÑ‡∏£‡∏™‡∏∏‡∏ó‡∏ò‡∏¥‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥ $0.05 (‡∏•‡∏î‡∏à‡∏≤‡∏Å 0.1)
        self.max_acceptable_loss = 10.0    # ‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö‡πÑ‡∏î‡πâ $10.0 (‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å 5.0)
        
        # üöÄ Dynamic Performance Optimization - ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÑ‡∏°‡πâ‡πÅ‡∏•‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏û‡∏≠‡∏£‡πå‡∏ï
        self.use_parallel_processing = True   # ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÅ‡∏ö‡∏ö‡∏Ç‡∏ô‡∏≤‡∏ô
        self.max_workers = 2  # ‡πÉ‡∏ä‡πâ 2 threads (‡πÑ‡∏°‡πà‡∏°‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ)
        
        # üß† Smart Caching
        self.combination_cache = {}  # ‡πÄ‡∏Å‡πá‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡πÑ‡∏ß‡πâ
        self.cache_hit_count = 0
        self.cache_miss_count = 0
        
        # üìä Performance Tracking
        self.performance_history = []  # ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û
        
        # ‚ö° Dynamic Early Termination - ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÑ‡∏°‡πâ
        self.base_early_termination = 3  # ‡∏ê‡∏≤‡∏ô 3 combinations
        self.base_best_profit_threshold = 1.5  # ‡∏ê‡∏≤‡∏ô 1.5 ‡πÄ‡∏ó‡πà‡∏≤
        
        # üéØ Dynamic Smart Filtering - ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÑ‡∏°‡πâ
        self.small_portfolio_threshold = 20    # ‡πÑ‡∏°‡πâ‡∏ô‡πâ‡∏≠‡∏¢: 1-20 ‡∏ï‡∏±‡∏ß
        self.medium_portfolio_threshold = 60   # ‡πÑ‡∏°‡πâ‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á: 21-60 ‡∏ï‡∏±‡∏ß
        self.large_portfolio_threshold = 100   # ‡πÑ‡∏°‡πâ‡πÄ‡∏¢‡∏≠‡∏∞: 61+ ‡∏ï‡∏±‡∏ß
        self.priority_filtering = True        # ‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
        
        # üõ°Ô∏è SW Filter (Stop Loss) - ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÑ‡∏°‡πâ‡∏Å‡∏≠‡∏á‡∏Å‡∏£‡∏∞‡∏à‡∏∏‡∏Å
        self.sw_filter_enabled = True
        self.clustering_threshold = 0.1  # 0.1 ‡∏à‡∏∏‡∏î (‡πÄ‡∏Ç‡πâ‡∏°‡∏°‡∏≤‡∏Å - ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÑ‡∏°‡πâ‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏Å‡∏±‡∏ô‡∏°‡∏≤‡∏Å)
        self.max_clustered_positions = 3  # ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 3 ‡πÑ‡∏°‡πâ‡πÉ‡∏Å‡∏•‡πâ‡∏Å‡∏±‡∏ô
        self.density_radius = 1.0  # 1 ‡∏à‡∏∏‡∏î (‡∏•‡∏î‡∏•‡∏á‡∏°‡∏≤‡∏Å)
        self.max_density = 5  # ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 5 ‡πÑ‡∏°‡πâ‡πÉ‡∏ô‡∏£‡∏±‡∏®‡∏°‡∏µ
        self.min_std_deviation = 0.5  # ‡∏™‡πà‡∏ß‡∏ô‡πÄ‡∏ö‡∏µ‡πà‡∏¢‡∏á‡πÄ‡∏ö‡∏ô‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥ 0.5 ‡∏à‡∏∏‡∏î (‡∏•‡∏î‡∏•‡∏á‡∏°‡∏≤‡∏Å)
        
        # ‡∏•‡∏ö Bar Close System ‡∏≠‡∏≠‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î - ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
        # self.wait_for_bar_close = True
        # self.last_bar_time = {}  # {timeframe: bar_time} - ‡πÄ‡∏ß‡∏•‡∏≤‡∏Ç‡∏≠‡∏á‡πÅ‡∏ó‡πà‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÅ‡∏ï‡πà‡∏•‡∏∞ TF
        # self.bar_close_wait_enabled = True
        # self.timeframes = ['M5', 'M15', 'M30', 'H1']  # TF ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ
        
        # üí∞ Close All When Portfolio Profitable - ‡∏õ‡∏¥‡∏î‡πÑ‡∏°‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏û‡∏≠‡∏£‡πå‡∏ï‡πÄ‡∏õ‡πá‡∏ô‡∏ö‡∏ß‡∏Å (‡∏ï‡πâ‡∏≠‡∏á‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà Hedge ‡∏Å‡πà‡∏≠‡∏ô)
        self.close_all_when_profitable = False  # ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î‡πÑ‡∏°‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î - ‡πÉ‡∏ä‡πâ Hedge Pairing ‡πÅ‡∏ó‡∏ô
        self.profitable_threshold_percentage = 2.0  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏õ‡πá‡∏ô 2% ‡∏Ç‡∏≠‡∏á‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏∏‡∏ô (‡∏¢‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô)
        self.min_profit_for_close_all = 20.0  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏õ‡πá‡∏ô $20 (‡∏¢‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô)
        self.urgent_profit_threshold = 100.0  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏õ‡πá‡∏ô $100 (‡∏¢‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô)
        
        # üéØ Force Hedge Pairing - ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà Hedge ‡πÄ‡∏™‡∏°‡∏≠
        self.force_hedge_pairing = True  # ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà Hedge ‡∏Å‡πà‡∏≠‡∏ô‡∏õ‡∏¥‡∏î
        self.allow_single_side_closing = False  # ‡∏´‡πâ‡∏≤‡∏°‡∏õ‡∏¥‡∏î‡πÑ‡∏°‡πâ‡∏ù‡∏±‡πà‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
        
        # üö® Emergency Mode Parameters (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏û‡∏≠‡∏£‡πå‡∏ï‡∏ó‡∏µ‡πà‡πÅ‡∏¢‡πà‡∏°‡∏≤‡∏Å)
        self.emergency_min_net_profit = 0.01  # ‡∏Å‡∏≥‡πÑ‡∏£‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥‡πÉ‡∏ô‡πÇ‡∏´‡∏°‡∏î‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô $0.01
        self.emergency_threshold_percentage = 0.10  # 10% ‡πÉ‡∏ô‡πÇ‡∏´‡∏°‡∏î‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô
        
        
        
        
        
        
        # üîß Position Generation Parameters
        self.enable_position_generation = True  # ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡πÑ‡∏°‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
        self.max_additional_positions = 3
        
        # üß† Advanced Pairing Strategies - ‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á
        self.advanced_pairing_enabled = True
        self.multi_level_pairing = True  # ‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏∞‡∏î‡∏±‡∏ö (2-3-4-5 ‡πÑ‡∏°‡πâ)
        self.cascade_pairing = True  # ‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡πÅ‡∏ö‡∏ö‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á (A+B, A+B+C, A+B+C+D)
        self.reverse_pairing = True  # ‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö (‡∏´‡∏≤‡πÑ‡∏°‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏à‡∏≤‡∏Å‡πÑ‡∏°‡πâ‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏µ‡∏¢‡∏°‡∏≤‡∏Å)
        self.smart_priority_pairing = True  # ‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç (‡πÑ‡∏°‡πâ‡πÄ‡∏™‡∏µ‡∏¢‡∏°‡∏≤‡∏Å‡∏Å‡πà‡∏≠‡∏ô)
        
        # üéØ Enhanced Helping System - ‡∏£‡∏∞‡∏ö‡∏ö‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á
        self.enhanced_helping_enabled = True
        self.multi_helper_system = True  # ‡πÑ‡∏°‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏´‡∏•‡∏≤‡∏¢‡∏ï‡∏±‡∏ß (Helper1+Helper2+Main)
        self.cascade_helping = True  # ‡∏ä‡πà‡∏ß‡∏¢‡πÅ‡∏ö‡∏ö‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á (Helper‚ÜíMain‚ÜíHelper2)
        self.smart_helper_selection = True  # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏°‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏â‡∏•‡∏≤‡∏î
        self.emergency_helper_mode = True  # ‡πÇ‡∏´‡∏°‡∏î‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô (‡πÑ‡∏°‡πâ‡πÄ‡∏™‡∏µ‡∏¢‡∏°‡∏≤‡∏Å)
        
        # üßπ Stale Position Clearing - ‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡πÑ‡∏°‡πâ‡∏Ñ‡πâ‡∏≤‡∏á‡∏û‡∏≠‡∏£‡πå‡∏ï
        self.stale_clearing_enabled = True
        self.stale_age_threshold_hours = 24  # ‡∏≠‡∏≤‡∏¢‡∏∏‡πÑ‡∏°‡πâ‡∏Ñ‡πâ‡∏≤‡∏á ‚â• 24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
        self.stale_loss_threshold = -5.0  # ‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡∏´‡∏ô‡∏±‡∏Å ‚â§ -$5
        self.stale_priority_bonus = 0.3  # ‡πÇ‡∏ö‡∏ô‡∏±‡∏™‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç +30%
        self.stale_anchor_inclusion_enabled = True  # ‡πÉ‡∏ä‡πâ Anchor ‡πÑ‡∏î‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πâ‡∏Ñ‡πâ‡∏≤‡∏á‡πÄ‡∏¢‡∏≠‡∏∞
        self.stale_anchor_threshold_avg = True  # ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡πÑ‡∏°‡πâ‡∏Ñ‡πâ‡∏≤‡∏á
        
        # üìä Advanced Filtering - ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á
        self.advanced_filtering_enabled = True
        self.distance_based_pairing = True  # ‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏ï‡∏≤‡∏°‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤
        self.time_based_pairing = True  # ‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏ï‡∏≤‡∏°‡∏≠‡∏≤‡∏¢‡∏∏‡πÑ‡∏°‡πâ
        self.volume_based_pairing = True  # ‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏ï‡∏≤‡∏°‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏°‡πâ
        self.profit_ratio_pairing = True  # ‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏ï‡∏≤‡∏°‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏≥‡πÑ‡∏£/‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô
        
        # üéØ Dynamic Adjustment Methods
        self._adjust_performance_settings = self._get_dynamic_performance_settings
        self.additional_position_volume = 0.01  # ‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏°‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
        
        # üöÄ Real-time P&L System
        self.pnl_cache = {}  # ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• P&L ‡πÑ‡∏ß‡πâ
        self.cache_timeout = 1.0  # ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÉ‡∏ô 1 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
        self.portfolio_health_score = "‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á"  # ‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏û‡∏≠‡∏£‡πå‡∏ï
    
    def _get_dynamic_performance_settings(self, position_count: int, portfolio_health: str = "‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á") -> dict:
        """üéØ Dynamic Performance Settings - ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÑ‡∏°‡πâ‡πÅ‡∏•‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏û‡∏≠‡∏£‡πå‡∏ï"""
        try:
            # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏û‡∏≠‡∏£‡πå‡∏ï
            if position_count <= self.small_portfolio_threshold:
                portfolio_type = "small"
            elif position_count <= self.medium_portfolio_threshold:
                portfolio_type = "medium"
            else:
                portfolio_type = "large"
            
            # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏û‡∏≠‡∏£‡πå‡∏ï
            if portfolio_type == "small":
                # ‡πÑ‡∏°‡πâ‡∏ô‡πâ‡∏≠‡∏¢: ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î, ‡∏´‡∏≤ pair ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡πÑ‡∏î‡πâ
                settings = {
                    'max_positions_to_analyze': position_count,  # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
                    'early_termination_threshold': 5,  # ‡∏´‡∏≤ pair ‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô
                    'best_profit_threshold': 2.0,  # ‡∏´‡∏≤ pair ‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏Å‡∏ß‡πà‡∏≤
                    'max_searches': 200,  # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô
                    'max_attempts': 5,  # ‡∏•‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô
                    'use_parallel_processing': False,  # ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ parallel
                    'max_workers': 1
                }
            elif portfolio_type == "medium":
                # ‡πÑ‡∏°‡πâ‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á: ‡∏™‡∏°‡∏î‡∏∏‡∏•‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û
                settings = {
                    'max_positions_to_analyze': min(40, position_count),  # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå 40 ‡∏ï‡∏±‡∏ß
                    'early_termination_threshold': 4,  # ‡∏´‡∏≤ pair ‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á
                    'best_profit_threshold': 1.8,  # ‡∏´‡∏≤ pair ‡∏ó‡∏µ‡πà‡∏î‡∏µ
                    'max_searches': 150,  # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á
                    'max_attempts': 4,  # ‡∏•‡∏≠‡∏á‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á
                    'use_parallel_processing': True,  # ‡πÉ‡∏ä‡πâ parallel
                    'max_workers': 2
                }
            else:
                # ‡πÑ‡∏°‡πâ‡πÄ‡∏¢‡∏≠‡∏∞: ‡πÄ‡∏ô‡πâ‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß, ‡∏Å‡∏£‡∏≠‡∏á‡πÑ‡∏°‡πâ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
                settings = {
                    'max_positions_to_analyze': min(50, position_count),  # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå 50 ‡∏ï‡∏±‡∏ß
                    'early_termination_threshold': 3,  # ‡∏´‡∏≤ pair ‡πÄ‡∏£‡πá‡∏ß
                    'best_profit_threshold': 1.5,  # ‡∏´‡∏≤ pair ‡πÄ‡∏£‡πá‡∏ß
                    'max_searches': 100,  # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ô‡πâ‡∏≠‡∏¢
                    'max_attempts': 3,  # ‡∏•‡∏≠‡∏á‡∏ô‡πâ‡∏≠‡∏¢
                    'use_parallel_processing': True,  # ‡πÉ‡∏ä‡πâ parallel
                    'max_workers': 2
                }
            
            # ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏û‡∏≠‡∏£‡πå‡∏ï
            if portfolio_health in ["‡πÅ‡∏¢‡πà", "‡πÅ‡∏¢‡πà‡∏°‡∏≤‡∏Å"]:
                # ‡∏û‡∏≠‡∏£‡πå‡∏ï‡πÅ‡∏¢‡πà: ‡∏´‡∏≤ pair ‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô, ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏≤‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô
                settings['early_termination_threshold'] = min(8, settings['early_termination_threshold'] + 2)
                settings['max_searches'] = min(300, settings['max_searches'] + 50)
                settings['max_attempts'] = min(8, settings['max_attempts'] + 2)
            elif portfolio_health == "‡∏î‡∏µ":
                # ‡∏û‡∏≠‡∏£‡πå‡∏ï‡∏î‡∏µ: ‡∏´‡∏≤ pair ‡πÄ‡∏£‡πá‡∏ß, ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡πâ‡∏≠‡∏¢
                settings['early_termination_threshold'] = max(2, settings['early_termination_threshold'] - 1)
                settings['max_searches'] = max(50, settings['max_searches'] - 25)
                settings['max_attempts'] = max(2, settings['max_attempts'] - 1)
            
            return settings
            
        except Exception as e:
            logger.error(f"‚ùå Error getting dynamic performance settings: {e}")
            # Fallback to default settings
            return {
                'max_positions_to_analyze': 30,
                'early_termination_threshold': 3,
                'best_profit_threshold': 1.5,
                'max_searches': 100,
                'max_attempts': 3,
                'use_parallel_processing': True,
                'max_workers': 2
            }
        # üìä Performance Tracking (‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏õ‡∏Ç‡πâ‡∏≤‡∏á‡∏ö‡∏ô‡πÅ‡∏•‡πâ‡∏ß)
        self.mt5_connection = None  # ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á
        
        # ‚è∞ Advanced Search Timing (1 hour delay)
        self.last_advanced_search_time = 0  # ‡πÄ‡∏ß‡∏•‡∏≤‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏ó‡∏≥ Advanced Search
        
        logger.info("üöÄ Hedge Pairing Closer initialized")
    
    def _parallel_search_combinations(self, positions: List[Any], search_type: str) -> List[HedgeCombination]:
        """üöÄ Parallel search for combinations using multiple threads"""
        if not self.use_parallel_processing or len(positions) < 10:
            return []
        
        combinations = []
        
        # ‡πÅ‡∏ö‡πà‡∏á positions ‡πÄ‡∏õ‡πá‡∏ô chunks ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö parallel processing
        chunk_size = max(1, len(positions) // self.max_workers)
        position_chunks = [positions[i:i + chunk_size] for i in range(0, len(positions), chunk_size)]
        
        def search_chunk(chunk):
            chunk_combinations = []
            # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ combinations ‡πÉ‡∏ô chunk ‡∏ô‡∏µ‡πâ
            for i, pos1 in enumerate(chunk):
                for j, pos2 in enumerate(chunk[i+1:], i+1):
                    if getattr(pos1, 'type', 0) != getattr(pos2, 'type', 0):  # ‡πÑ‡∏°‡πâ‡∏ï‡∏£‡∏á‡∏Ç‡πâ‡∏≤‡∏°
                        total_profit = getattr(pos1, 'profit', 0) + getattr(pos2, 'profit', 0)
                        if total_profit >= self.min_net_profit:
                            chunk_combinations.append(HedgeCombination(
                                positions=[pos1, pos2],
                                total_profit=total_profit,
                                combination_type=f"PARALLEL_{search_type}",
                                size=2,
                                confidence_score=85.0,
                                reason=f"Parallel {search_type}: ${total_profit:.2f}"
                            ))
            return chunk_combinations
        
        # ‡πÉ‡∏ä‡πâ ThreadPoolExecutor ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö parallel processing
        with ThreadPoolExecutor(max_workers=self.max_workers) as executor:
            future_to_chunk = {executor.submit(search_chunk, chunk): chunk for chunk in position_chunks}
            
            for future in as_completed(future_to_chunk):
                try:
                    chunk_combinations = future.result()
                    combinations.extend(chunk_combinations)
                except Exception as e:
                    logger.error(f"Error in parallel search: {e}")
        
        return combinations
    
    def _get_cache_key(self, positions: List[Any], search_type: str) -> str:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á cache key ‡∏à‡∏≤‡∏Å positions"""
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á key ‡∏à‡∏≤‡∏Å ticket numbers ‡πÅ‡∏•‡∏∞ profit
        position_data = []
        for pos in positions:
            position_data.append(f"{getattr(pos, 'ticket', 0)}_{getattr(pos, 'profit', 0):.2f}")
        
        return f"{search_type}_{hash(tuple(sorted(position_data)))}"
    
    def _get_cached_combinations(self, positions: List[Any], search_type: str) -> Optional[List[HedgeCombination]]:
        """‡∏î‡∏∂‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å cache"""
        cache_key = self._get_cache_key(positions, search_type)
        
        if cache_key in self.combination_cache:
            self.cache_hit_count += 1
            logger.debug(f"üéØ Cache HIT for {search_type}")
            return self.combination_cache[cache_key]
        
        self.cache_miss_count += 1
        return None
    
    def _cache_combinations(self, positions: List[Any], search_type: str, combinations: List[HedgeCombination]):
        """‡πÄ‡∏Å‡πá‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÉ‡∏ô cache"""
        cache_key = self._get_cache_key(positions, search_type)
        self.combination_cache[cache_key] = combinations
        
        # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ç‡∏ô‡∏≤‡∏î cache
        if len(self.combination_cache) > 100:
            # ‡∏•‡∏ö cache ‡πÄ‡∏Å‡πà‡∏≤‡∏≠‡∏≠‡∏Å
            oldest_key = next(iter(self.combination_cache))
            del self.combination_cache[oldest_key]
    
    def _should_terminate_early(self, combinations: List[HedgeCombination], current_profit: float) -> bool:
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡∏ß‡∏£‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏£‡πá‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"""
        # ‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏û‡∏ö combinations ‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠
        if len(combinations) >= self.early_termination_threshold:
            return True
        
        # ‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏≥‡πÑ‡∏£‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ threshold
        if current_profit >= self.min_net_profit * self.best_profit_threshold:
            return True
        
        return False
    
    def _smart_position_selection(self, positions: List[Any]) -> List[Any]:
        """üéØ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏°‡πâ‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå"""
        if len(positions) <= self.large_portfolio_threshold:
            return positions  # ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏£‡∏≠‡∏á‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πâ‡πÑ‡∏°‡πà‡πÄ‡∏¢‡∏≠‡∏∞
        
        logger.info(f"üéØ Smart Selection: {len(positions)} ‚Üí {self.max_positions_to_analyze} positions")
        
        # ‡πÅ‡∏¢‡∏Å‡πÑ‡∏°‡πâ‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
        buy_positions = [pos for pos in positions if getattr(pos, 'type', 0) == 0]
        sell_positions = [pos for pos in positions if getattr(pos, 'type', 0) == 1]
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì priority score ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÑ‡∏°‡πâ
        def calculate_priority_score(pos):
            profit = getattr(pos, 'profit', 0)
            volume = getattr(pos, 'volume', 0.01)
            
            # ‡πÑ‡∏°‡πâ‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡∏°‡∏≤‡∏Å = priority ‡∏™‡∏π‡∏á (‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏¥‡∏î‡∏Å‡πà‡∏≠‡∏ô)
            # ‡πÑ‡∏°‡πâ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡πÑ‡∏£‡∏°‡∏≤‡∏Å = priority ‡∏™‡∏π‡∏á (‡πÉ‡∏ä‡πâ‡∏ä‡πà‡∏ß‡∏¢‡πÑ‡∏î‡πâ)
            if profit < 0:
                return abs(profit) * 10  # ‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡∏°‡∏≤‡∏Å = priority ‡∏™‡∏π‡∏á
            else:
                return profit * 5  # ‡∏Å‡∏≥‡πÑ‡∏£‡∏°‡∏≤‡∏Å = priority ‡∏™‡∏π‡∏á
        
        # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏° priority score
        buy_positions.sort(key=calculate_priority_score, reverse=True)
        sell_positions.sort(key=calculate_priority_score, reverse=True)
        
        # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏°‡πâ‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
        selected_buy = buy_positions[:self.max_positions_to_analyze // 2]
        selected_sell = sell_positions[:self.max_positions_to_analyze // 2]
        
        selected_positions = selected_buy + selected_sell
        
        logger.info(f"üìä Selected: {len(selected_buy)} Buy, {len(selected_sell)} Sell")
        
        return selected_positions
    
    def _apply_sw_filter(self, positions: List[Any]) -> List[Any]:
        """üõ°Ô∏è ‡πÉ‡∏ä‡πâ SW Filter ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏£‡∏≠‡∏á‡πÑ‡∏°‡πâ‡∏ó‡∏µ‡πà‡∏Å‡∏≠‡∏á‡∏Å‡∏£‡∏∞‡∏à‡∏∏‡∏Å"""
        try:
            if not self.sw_filter_enabled:
                return positions
            
            filtered_positions = []
            rejected_count = 0
            
            for pos in positions:
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö SW Filter
                sw_ok, sw_msg = self._sw_filter_check(pos, filtered_positions)
                
                if sw_ok:
                    filtered_positions.append(pos)
                else:
                    rejected_count += 1
                    logger.debug(f"üö´ SW Filter rejected: {sw_msg}")
            
            if rejected_count > 0:
                logger.info(f"üõ°Ô∏è SW Filter: Rejected {rejected_count} positions due to clustering")
                logger.info(f"üìä SW Filter: {len(positions)} ‚Üí {len(filtered_positions)} positions")
            
            return filtered_positions
            
        except Exception as e:
            logger.error(f"‚ùå Error applying SW filter: {e}")
            return positions
    
    def set_mt5_connection(self, mt5_connection):
        """‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ MT5 Connection ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Real-time P&L"""
        self.mt5_connection = mt5_connection
        logger.info("üîó MT5 Connection set for Real-time P&L")
    
    def get_performance_stats(self) -> Dict[str, Any]:
        """üìä ‡∏î‡∏π‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö"""
        total_cache_requests = self.cache_hit_count + self.cache_miss_count
        cache_hit_rate = (self.cache_hit_count / total_cache_requests * 100) if total_cache_requests > 0 else 0
        
        return {
            'cache_hit_rate': f"{cache_hit_rate:.1f}%",
            'cache_hits': self.cache_hit_count,
            'cache_misses': self.cache_miss_count,
            'cached_combinations': len(self.combination_cache),
            'parallel_processing': self.use_parallel_processing,
            'max_workers': self.max_workers,
            'early_termination_threshold': self.early_termination_threshold,
            'smart_filtering': self.priority_filtering,
            'large_portfolio_threshold': self.large_portfolio_threshold,
            'max_positions_to_analyze': self.max_positions_to_analyze
        }
    
    def _get_real_time_pnl(self, position: Any) -> float:
        """‡∏î‡∏∂‡∏á P&L ‡∏à‡∏≤‡∏Å position.profit ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á (‡πÑ‡∏°‡πà‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì real-time)"""
        try:
            # ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å position.profit ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á (‡πÑ‡∏°‡πà‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì real-time)
            return getattr(position, 'profit', 0)
            
        except Exception as e:
            logger.error(f"Error getting P&L: {e}")
            return getattr(position, 'profit', 0)
    
    def _get_current_price(self) -> float:
        """üìä ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏à‡∏≤‡∏Å MT5"""
        try:
            if not self.mt5_connection:
                return 0.0
            
            # ‡πÉ‡∏ä‡πâ get_current_tick ‡πÅ‡∏ó‡∏ô get_current_price
            tick_data = self.mt5_connection.get_current_tick(self.symbol)
            if tick_data is None:
                return 0.0
            
            # ‡πÉ‡∏ä‡πâ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á bid ‡πÅ‡∏•‡∏∞ ask
            current_price = (tick_data['bid'] + tick_data['ask']) / 2
            return current_price
            
        except Exception as e:
            logger.error(f"‚ùå Error getting current price: {e}")
            return 0.0
    
    def _check_position_clustering(self, new_position, existing_positions):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πâ‡πÉ‡∏´‡∏°‡πà‡∏à‡∏∞‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≠‡∏á‡∏Å‡∏£‡∏∞‡∏à‡∏∏‡∏Å‡πÉ‡∏Å‡∏•‡πâ‡πÜ ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡πÉ‡∏ä‡πâ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô)"""
        try:
            if not self.sw_filter_enabled:
                return True, "SW filter disabled"
            
            # ‡πÉ‡∏ä‡πâ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Ç‡∏≠‡∏á‡πÑ‡∏°‡πâ‡πÉ‡∏´‡∏°‡πà
            new_price = getattr(new_position, 'price', 0)
            if new_price == 0:
                new_price = getattr(new_position, 'price_open', 0)
            
            # ‡∏ô‡∏±‡∏ö‡πÑ‡∏°‡πâ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏Å‡∏±‡∏ô (‡πÉ‡∏ä‡πâ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏õ‡∏¥‡∏î)
            nearby_positions = 0
            logger.debug(f"üîç SW Filter Debug - New Price: {new_price}")
            for i, pos in enumerate(existing_positions):
                existing_price = getattr(pos, 'price_open', 0)
                if existing_price == 0:
                    existing_price = getattr(pos, 'price', 0)
                if existing_price == 0:
                    existing_price = getattr(pos, 'price_current', 0)
                
                distance = abs(new_price - existing_price)
                logger.debug(f"   Position {i+1}: price_open={getattr(pos, 'price_open', 'N/A')}, price_current={getattr(pos, 'price_current', 'N/A')}, used={existing_price} (distance: {distance:.2f} points)")
                
                if distance <= self.clustering_threshold:
                    nearby_positions += 1
            
            # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡πÑ‡∏°‡πâ‡πÉ‡∏Å‡∏•‡πâ‡∏Å‡∏±‡∏ô‡∏°‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ ‡πÉ‡∏´‡πâ‡∏´‡∏¢‡∏∏‡∏î‡∏≠‡∏≠‡∏Å‡πÑ‡∏°‡πâ
            if nearby_positions >= self.max_clustered_positions:
                logger.warning(f"üö´ SW FILTER: Too many positions clustered near {new_price} ({nearby_positions} positions within {self.clustering_threshold} points)")
                return False, f"Too many positions clustered near {new_price} ({nearby_positions} positions within {self.clustering_threshold} points)"
            
            logger.info(f"‚úÖ SW FILTER: Clustering check passed - {nearby_positions} positions within {self.clustering_threshold} points (max: {self.max_clustered_positions})")
            return True, "OK"
            
        except Exception as e:
            logger.error(f"‚ùå Error checking position clustering: {e}")
            return False, "Error"
    
    def _check_position_density(self, new_position, existing_positions):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏ô‡∏≤‡πÅ‡∏ô‡πà‡∏ô‡∏Ç‡∏≠‡∏á‡πÑ‡∏°‡πâ‡πÉ‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á (‡πÉ‡∏ä‡πâ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô)"""
        try:
            if not self.sw_filter_enabled:
                return True, "SW filter disabled"
            
            # ‡πÉ‡∏ä‡πâ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Ç‡∏≠‡∏á‡πÑ‡∏°‡πâ‡πÉ‡∏´‡∏°‡πà
            new_price = getattr(new_position, 'price', 0)
            if new_price == 0:
                new_price = getattr(new_position, 'price_open', 0)
            
            # ‡∏ô‡∏±‡∏ö‡πÑ‡∏°‡πâ‡πÉ‡∏ô‡∏£‡∏±‡∏®‡∏°‡∏µ (‡πÉ‡∏ä‡πâ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏õ‡∏¥‡∏î)
            positions_in_radius = 0
            for pos in existing_positions:
                existing_price = getattr(pos, 'price_open', 0)
                if existing_price == 0:
                    existing_price = getattr(pos, 'price', 0)
                if existing_price == 0:
                    existing_price = getattr(pos, 'price_current', 0)
                
                distance = abs(new_price - existing_price)
                
                if distance <= self.density_radius:
                    positions_in_radius += 1
            
            # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πâ‡∏´‡∏ô‡∏≤‡πÅ‡∏ô‡πà‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ ‡πÉ‡∏´‡πâ‡∏´‡∏¢‡∏∏‡∏î‡∏≠‡∏≠‡∏Å‡πÑ‡∏°‡πâ
            if positions_in_radius >= self.max_density:
                logger.warning(f"üö´ SW FILTER: Position density too high near {new_price} ({positions_in_radius} positions in {self.density_radius} points)")
                return False, f"Position density too high near {new_price} ({positions_in_radius} positions in {self.density_radius} points)"
            
            logger.info(f"‚úÖ SW FILTER: Density check passed - {positions_in_radius} positions in {self.density_radius} points (max: {self.max_density})")
            return True, "OK"
            
        except Exception as e:
            logger.error(f"‚ùå Error checking position density: {e}")
            return False, "Error"
    
    def _check_position_distribution(self, new_position, existing_positions):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡πÑ‡∏°‡πâ‡πÉ‡∏ô‡∏û‡∏≠‡∏£‡πå‡∏ï (‡πÉ‡∏ä‡πâ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô)"""
        try:
            if not self.sw_filter_enabled:
                return True, "SW filter disabled"
            
            if len(existing_positions) < 5:
                return True, "Not enough positions to check distribution"
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡πÑ‡∏°‡πâ (‡πÉ‡∏ä‡πâ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏õ‡∏¥‡∏î)
            prices = []
            for pos in existing_positions:
                price = getattr(pos, 'price_open', 0)
                if price == 0:
                    price = getattr(pos, 'price', 0)
                if price == 0:
                    price = getattr(pos, 'price_current', 0)
                prices.append(price)
            
            new_price = getattr(new_position, 'price', 0)
            if new_price == 0:
                new_price = getattr(new_position, 'price_open', 0)
            prices.append(new_price)
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏ß‡∏ô‡πÄ‡∏ö‡∏µ‡πà‡∏¢‡∏á‡πÄ‡∏ö‡∏ô‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô
            mean_price = sum(prices) / len(prices)
            variance = sum((p - mean_price) ** 2 for p in prices) / len(prices)
            std_deviation = variance ** 0.5
            
            # ‡∏ñ‡πâ‡∏≤‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏ô‡πâ‡∏≠‡∏¢‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ (‡πÑ‡∏°‡πâ‡∏Å‡∏≠‡∏á‡∏Å‡∏±‡∏ô) ‡πÉ‡∏´‡πâ‡∏´‡∏¢‡∏∏‡∏î‡∏≠‡∏≠‡∏Å‡πÑ‡∏°‡πâ
            if std_deviation < self.min_std_deviation:
                logger.warning(f"üö´ SW FILTER: Positions too clustered (std_dev: {std_deviation:.2f} < {self.min_std_deviation})")
                return False, f"Positions too clustered (std_dev: {std_deviation:.2f} < {self.min_std_deviation})"
            
            logger.info(f"‚úÖ SW FILTER: Distribution check passed - std: {std_deviation:.2f} (min: {self.min_std_deviation})")
            return True, "OK"
            
        except Exception as e:
            logger.error(f"‚ùå Error checking position distribution: {e}")
            return False, "Error"
    
    def _sw_filter_check(self, new_position, existing_positions):
        """‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏£‡∏≠‡∏á SW ‡πÅ‡∏ö‡∏ö‡∏£‡∏ß‡∏°"""
        try:
            if not self.sw_filter_enabled:
                return True, "SW filter disabled"
            
            logger.debug(f"üîç SW FILTER: Checking new position against {len(existing_positions)} existing positions")
            logger.debug(f"üîç SW FILTER: New position price: {getattr(new_position, 'price', 'N/A')} | price_open: {getattr(new_position, 'price_open', 'N/A')} | price_current: {getattr(new_position, 'price_current', 'N/A')}")
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏Å‡∏≠‡∏á‡∏Å‡∏£‡∏∞‡∏à‡∏∏‡∏Å
            clustering_ok, clustering_msg = self._check_position_clustering(new_position, existing_positions)
            if not clustering_ok:
                logger.warning(f"üö´ SW FILTER: {clustering_msg}")
                return False, clustering_msg
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏ô‡∏≤‡πÅ‡∏ô‡πà‡∏ô
            density_ok, density_msg = self._check_position_density(new_position, existing_positions)
            if not density_ok:
                logger.warning(f"üö´ SW FILTER: {density_msg}")
                return False, density_msg
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢
            distribution_ok, distribution_msg = self._check_position_distribution(new_position, existing_positions)
            if not distribution_ok:
                logger.warning(f"üö´ SW FILTER: {distribution_msg}")
                return False, distribution_msg
            
            logger.info("‚úÖ SW FILTER: Position passed all checks - ALLOWING TRADE")
            return True, "All checks passed"
            
        except Exception as e:
            logger.error(f"‚ùå Error in SW filter check: {e}")
            return False, "Error"
    
    def _check_bar_close(self, timeframe: str = 'M5') -> bool:
        """‚è∞ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÅ‡∏ó‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á - ‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏° TF"""
        try:
            if not self.bar_close_wait_enabled:
                return True  # ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏≠‡∏õ‡∏¥‡∏î‡πÅ‡∏ó‡πà‡∏á
            
            if not self.mt5_connection:
                return True  # ‡πÑ‡∏°‡πà‡∏°‡∏µ MT5 connection
            
            # ‡πÉ‡∏ä‡πâ default symbol ‡∏´‡∏£‡∏∑‡∏≠ symbol ‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÑ‡∏ß‡πâ
            symbol = getattr(self, 'symbol', 'XAUUSD')
            
            # ‡πÅ‡∏õ‡∏•‡∏á TF string ‡πÄ‡∏õ‡πá‡∏ô MT5 constant
            tf_mapping = {
                'M5': 5,    # 5 minutes
                'M15': 15,  # 15 minutes
                'M30': 30,  # 30 minutes
                'H1': 60    # 1 hour
            }
            
            tf_minutes = tf_mapping.get(timeframe, 5)  # default M5
            
            # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ó‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏ï‡∏≤‡∏° TF
            try:
                import MetaTrader5 as mt5
                rates = mt5.copy_rates_from_pos(symbol, tf_minutes, 0, 1)
                if rates is None or len(rates) == 0:
                    return True  # ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ
                
                current_bar_time = rates[0]['time']
                
                # ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏Å‡πà‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö TF ‡∏ô‡∏µ‡πâ
                if timeframe not in self.last_bar_time:
                    self.last_bar_time[timeframe] = current_bar_time
                    logger.info(f"‚è∞ First run - waiting for {timeframe} bar close")
                    return False  # ‡∏£‡∏≠‡∏õ‡∏¥‡∏î‡πÅ‡∏ó‡πà‡∏á
                
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÅ‡∏ó‡πà‡∏á‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
                if current_bar_time > self.last_bar_time[timeframe]:
                    self.last_bar_time[timeframe] = current_bar_time
                    logger.info(f"‚úÖ {timeframe} Bar closed - ready to trade")
                    return True  # ‡πÅ‡∏ó‡πà‡∏á‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏ó‡∏£‡∏î
                
                # ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏õ‡∏¥‡∏î‡πÅ‡∏ó‡πà‡∏á (‡πÑ‡∏°‡πà log ‡∏ñ‡∏µ‡πà‡πÜ)
                return False
                
            except Exception as e:
                logger.error(f"‚ùå Error checking {timeframe} bar close: {e}")
                return True  # ‡∏ñ‡πâ‡∏≤ error ‡πÉ‡∏´‡πâ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÄ‡∏ó‡∏£‡∏î
            
        except Exception as e:
            logger.error(f"‚ùå Error checking bar close: {e}")
            return True  # ‡∏ñ‡πâ‡∏≤ error ‡πÉ‡∏´‡πâ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÄ‡∏ó‡∏£‡∏î
    
    def _should_wait_for_bar_close(self, timeframe: str = 'M5') -> bool:
        """‚è∞ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡∏ß‡∏£‡∏£‡∏≠‡∏õ‡∏¥‡∏î‡πÅ‡∏ó‡πà‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà - ‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏° TF"""
        try:
            if not self.wait_for_bar_close:
                return False  # ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏≠‡∏õ‡∏¥‡∏î‡πÅ‡∏ó‡πà‡∏á
            
            return not self._check_bar_close(timeframe)
            
        except Exception as e:
            logger.error(f"‚ùå Error checking if should wait: {e}")
            return False  # ‡∏ñ‡πâ‡∏≤ error ‡πÉ‡∏´‡πâ‡πÑ‡∏°‡πà‡∏£‡∏≠
    
    def _check_close_all_profitable(self, positions: List[Any], account_balance: float) -> bool:
        """üí∞ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡∏ß‡∏£‡∏õ‡∏¥‡∏î‡πÑ‡∏°‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏û‡∏≠‡∏£‡πå‡∏ï‡πÄ‡∏õ‡πá‡∏ô‡∏ö‡∏ß‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡∏ï‡πâ‡∏≠‡∏á‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà Hedge ‡∏Å‡πà‡∏≠‡∏ô)"""
        try:
            # üö´ DISABLED: ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î‡πÑ‡∏°‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î - ‡πÉ‡∏ä‡πâ Hedge Pairing ‡πÅ‡∏ó‡∏ô
            if not self.close_all_when_profitable:
                logger.info("üö´ Close All When Profitable DISABLED - Using Hedge Pairing instead")
                return False
            
            if len(positions) < 1:
                return False  # ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏°‡πâ‡πÉ‡∏´‡πâ‡∏õ‡∏¥‡∏î
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÑ‡∏°‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏ù‡∏±‡πà‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            buy_positions = [pos for pos in positions if getattr(pos, 'type', 0) == 0]
            sell_positions = [pos for pos in positions if getattr(pos, 'type', 0) == 1]
            
            # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡πÑ‡∏°‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏ù‡∏±‡πà‡∏á ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ Hedge Pairing ‡πÅ‡∏ó‡∏ô
            if len(buy_positions) > 0 and len(sell_positions) > 0:
                logger.info("üéØ Both BUY and SELL positions exist - Using Hedge Pairing instead of Close All")
                return False
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Å‡∏≥‡πÑ‡∏£‡∏£‡∏ß‡∏°‡∏Ç‡∏≠‡∏á‡∏û‡∏≠‡∏£‡πå‡∏ï (‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô)
            total_profit = sum(getattr(pos, 'profit', 0) for pos in positions)
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î‡πÑ‡∏°‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏¢‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô‡∏°‡∏≤‡∏Å)
            
            # ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç 1: ‡∏Å‡∏≥‡πÑ‡∏£‡∏£‡∏ß‡∏°‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î (‡∏¢‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô)
            if account_balance > 0:
                profit_percentage = (total_profit / account_balance) * 100
                if profit_percentage >= self.profitable_threshold_percentage:
                    logger.info(f"üí∞ Portfolio profitable: {profit_percentage:.2f}% >= {self.profitable_threshold_percentage}%")
                    return True
            
            # ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç 2: ‡∏Å‡∏≥‡πÑ‡∏£‡∏£‡∏ß‡∏°‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥ (‡∏¢‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô)
            if total_profit >= self.min_profit_for_close_all:
                logger.info(f"üí∞ Portfolio profitable: ${total_profit:.2f} >= ${self.min_profit_for_close_all}")
                return True
            
            return False
            
        except Exception as e:
            logger.error(f"‚ùå Error checking close all profitable: {e}")
            return False
    
    def _create_close_all_decision(self, positions: List[Any], total_profit: float) -> ClosingDecision:
        """üí∞ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏õ‡∏¥‡∏î‡πÑ‡∏°‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
        try:
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÑ‡∏°‡πâ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏õ‡∏¥‡∏î
            positions_to_close = []
            buy_count = 0
            sell_count = 0
            
            for pos in positions:
                pos_type = getattr(pos, 'type', 0)
                if pos_type == 0:  # BUY
                    buy_count += 1
                else:  # SELL
                    sell_count += 1
                
                positions_to_close.append({
                    'ticket': getattr(pos, 'ticket', 'N/A'),
                    'symbol': getattr(pos, 'symbol', 'XAUUSD'),
                    'type': 'BUY' if pos_type == 0 else 'SELL',
                    'volume': getattr(pos, 'volume', 0),
                    'profit': getattr(pos, 'profit', 0)
                })
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á ClosingDecision
            decision = ClosingDecision(
                should_close=True,
                positions_to_close=positions_to_close,
                method="CLOSE_ALL_PROFITABLE",
                net_pnl=total_profit,
                expected_pnl=total_profit,
                position_count=len(positions),
                buy_count=buy_count,
                sell_count=sell_count,
                confidence_score=95.0,
                reason=f"Close all positions - Portfolio profitable: ${total_profit:.2f}"
            )
            
            return decision
            
        except Exception as e:
            logger.error(f"‚ùå Error creating close all decision: {e}")
            return None
    
    def _analyze_portfolio_health(self, positions: List[Any], account_balance: float = 1000.0) -> dict:
        """‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏û‡∏≠‡∏£‡πå‡∏ï"""
        try:
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì P&L ‡∏à‡∏≤‡∏Å position.profit ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ real-time calculation)
            total_pnl = sum(getattr(pos, 'profit', 0) for pos in positions)
            position_count = len(positions)
            
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏û‡∏≠‡∏£‡πå‡∏ï
            if total_pnl > 100:
                health_score = "‡∏î‡∏µ‡∏°‡∏≤‡∏Å"
            elif total_pnl > 0:
                health_score = "‡∏î‡∏µ"
            elif total_pnl > -50:
                health_score = "‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á"
            elif total_pnl > -100:
                health_score = "‡πÅ‡∏¢‡πà"
            else:
                health_score = "‡πÅ‡∏¢‡πà‡∏°‡∏≤‡∏Å"
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏Ç‡∏≠‡∏á‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏∏‡∏ô‡∏ï‡πà‡∏≠‡πÑ‡∏°‡πâ
            avg_balance_per_position = account_balance / position_count if position_count > 0 else account_balance
            
            self.portfolio_health_score = health_score
            
            return {
                'total_pnl': total_pnl,
                'position_count': position_count,
                'health_score': health_score,
                'avg_balance_per_position': avg_balance_per_position,
                'avg_pnl_per_position': total_pnl / position_count if position_count > 0 else 0
            }
        except Exception as e:
            logger.error(f"Error analyzing portfolio health: {e}")
            return {'health_score': '‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á', 'total_pnl': 0}
    
    def find_optimal_closing(self, positions: List[Any], account_info: Dict, 
                           market_conditions: Optional[Dict] = None) -> Optional[ClosingDecision]:
        """
        üß† ‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î‡πÑ‡∏°‡πâ‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡πÅ‡∏ö‡∏ö‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà
        """
        start_time = time.time()
        try:
            # üö´ Exclude Portfolio Anchor positions (magic 789012) from closing candidates
            original_count = len(positions) if positions else 0
            anchor_positions = [pos for pos in (positions or []) if getattr(pos, 'magic', None) == 789012]
            positions = [pos for pos in (positions or []) if getattr(pos, 'magic', None) != 789012]
            excluded = original_count - len(positions)
            if excluded > 0:
                logger.info(f"üõ°Ô∏è Excluding {excluded} anchor positions from closing candidates")
            
            # üßπ Analyze stale positions for potential inclusion of anchors
            stale_positions = self._identify_stale_positions(positions) if self.stale_clearing_enabled else []
            allow_anchor_inclusion = self._should_include_anchors_for_stale_clearing(stale_positions, positions)
            
            if allow_anchor_inclusion and anchor_positions:
                logger.info(f"üßπ STALE CLEARING: Including {len(anchor_positions)} anchors for stale position clearing")
                positions.extend(anchor_positions)  # Add anchors back to candidates

            if len(positions) < 1:
                logger.info("‚è∏Ô∏è Need at least 1 position for analysis")
                return None
            
            # ‡∏•‡∏ö Bar Close System ‡∏≠‡∏≠‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î - ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
            # if self._should_wait_for_bar_close():
            #     return None
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÑ‡∏°‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Å‡πà‡∏≠‡∏ô‡∏Å‡∏£‡∏≠‡∏á (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡πÑ‡∏°‡πâ)
            self.original_position_count = len(positions)
            if len(positions) > 0:
                logger.info(f"üìä TOTAL POSITIONS (ex-anchors): {len(positions)} positions")
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î‡πÑ‡∏°‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏û‡∏≠‡∏£‡πå‡∏ï‡πÄ‡∏õ‡πá‡∏ô‡∏ö‡∏ß‡∏Å (‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô)
            account_balance = account_info.get('balance', 1000.0)
            total_profit = sum(getattr(pos, 'profit', 0) for pos in positions)
            
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≥‡πÑ‡∏£‡πÄ‡∏£‡πà‡∏á‡∏î‡πà‡∏ß‡∏ô‡∏Å‡πà‡∏≠‡∏ô (‡∏õ‡∏¥‡∏î‡∏ó‡∏±‡∏ô‡∏ó‡∏µ) - ‡πÄ‡∏≠‡∏≤‡∏≠‡∏≠‡∏Å‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏ã‡πâ‡∏≥‡∏ã‡πâ‡∏≠‡∏ô‡∏Å‡∏±‡∏ö Close All
            # if total_profit >= self.urgent_profit_threshold:
            #     logger.info("üö® URGENT CLOSE ALL - VERY PROFITABLE")
            #     logger.info(f"üéØ Total Profit: ${total_profit:.2f} | Positions: {len(positions)}")
            #     return self._create_close_all_decision(positions, total_profit)
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î‡πÑ‡∏°‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏û‡∏≠‡∏£‡πå‡∏ï‡πÄ‡∏õ‡πá‡∏ô‡∏ö‡∏ß‡∏Å (‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô)
            if self._check_close_all_profitable(positions, account_balance):
                logger.info("üí∞ CLOSE ALL POSITIONS - PORTFOLIO PROFITABLE")
                logger.info(f"üéØ Total Profit: ${total_profit:.2f} | Positions: {len(positions)}")
                return self._create_close_all_decision(positions, total_profit)
            
            # Step 1: ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏û‡∏≠‡∏£‡πå‡∏ï‡∏Å‡πà‡∏≠‡∏ô
            account_balance = account_info.get('balance', 1000.0)
            portfolio_health = self._analyze_portfolio_health(positions, account_balance)
            
            # üéØ Dynamic Performance Settings - ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÑ‡∏°‡πâ‡πÅ‡∏•‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏û‡∏≠‡∏£‡πå‡∏ï
            dynamic_settings = self._get_dynamic_performance_settings(len(positions), portfolio_health['health_score'])
            
            # ‡πÉ‡∏ä‡πâ dynamic settings
            max_positions_to_analyze = dynamic_settings['max_positions_to_analyze']
            early_termination_threshold = dynamic_settings['early_termination_threshold']
            best_profit_threshold = dynamic_settings['best_profit_threshold']
            
            logger.info(f"üéØ Dynamic Settings: {len(positions)} positions ‚Üí {max_positions_to_analyze} to analyze")
            logger.info(f"   Early Termination: {early_termination_threshold}, Best Profit: {best_profit_threshold}x")
            
            # üéØ Smart Position Selection ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏û‡∏≠‡∏£‡πå‡∏ï‡πÉ‡∏´‡∏ç‡πà
            if self.priority_filtering and len(positions) > max_positions_to_analyze:
                original_count = len(positions)
                positions = self._smart_position_selection(positions)
                logger.info(f"üéØ Smart Selection: {original_count} ‚Üí {len(positions)} positions")
            else:
                logger.info(f"üéØ Using All Positions: {len(positions)} positions")
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡πÑ‡∏°‡πâ
            if len(positions) > 0:
                logger.info(f"üîç HEDGE ANALYSIS: {len(positions)} positions")
            
            # Step 1: ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏û‡∏≠‡∏£‡πå‡∏ï (‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏õ‡∏Ç‡πâ‡∏≤‡∏á‡∏ö‡∏ô‡πÅ‡∏•‡πâ‡∏ß)
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏û‡∏≠‡∏£‡πå‡∏ï‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
            if not hasattr(self, '_last_portfolio_status'):
                self._last_portfolio_status = None
            
            current_status = portfolio_health['health_score']
            if current_status != self._last_portfolio_status:
                logger.info(f"üìä Portfolio Health: {current_status} (P&L: ${portfolio_health['total_pnl']:.2f})")
                self._last_portfolio_status = current_status
            
            # Step 2: Smart Filtering - ‡∏Ñ‡∏±‡∏î‡∏Å‡∏£‡∏≠‡∏á‡πÑ‡∏°‡πâ‡∏ï‡∏≤‡∏°‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏Ç‡∏≠‡∏á‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏∏‡∏ô
            filtered_positions = self._smart_filter_positions(positions, account_balance)
            if len(positions) > 0:
                logger.info(f"üîç Smart Filtering: {len(positions)} ‚Üí {len(filtered_positions)} positions")
            
            # Step 2.5: SW Filter - ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÉ‡∏ô find_optimal_closing
            # SW Filter ‡∏Ñ‡∏ß‡∏£‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏≠‡∏Å‡πÑ‡∏°‡πâ‡πÉ‡∏´‡∏°‡πà ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏õ‡∏¥‡∏î‡πÑ‡∏°‡πâ
            # if self.sw_filter_enabled:
            #     filtered_positions = self._apply_sw_filter(filtered_positions)
            #     logger.info(f"üõ°Ô∏è SW Filter: Applied clustering protection")
            
            
            # 0.4. Stale Position Clearing - ‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡πÑ‡∏°‡πâ‡∏Ñ‡πâ‡∏≤‡∏á‡∏û‡∏≠‡∏£‡πå‡∏ï
            if self.stale_clearing_enabled and stale_positions:
                stale_combinations = self._find_stale_clearing_combinations(filtered_positions, stale_positions)
                if stale_combinations:
                    logger.info(f"üßπ STALE CLEARING FOUND: {len(stale_combinations)} combinations")
                    best_stale = stale_combinations[0]
                    logger.info(f"   Best: {best_stale.combination_type}: ${best_stale.total_profit:.2f} ({best_stale.size} positions)")
                    logger.info(f"   Clearing {len([p for p in best_stale.positions if self._is_stale_position(p)])} stale positions")
                    
                    processing_time = time.time() - start_time
                    self._record_performance(True, best_stale.total_profit, processing_time)
                    
                    return ClosingDecision(
                        should_close=True,
                        positions_to_close=best_stale.positions,
                        method="STALE_CLEARING",
                        net_pnl=best_stale.total_profit,
                        expected_pnl=best_stale.total_profit,
                        position_count=best_stale.size,
                        buy_count=sum(1 for p in best_stale.positions if getattr(p, 'type', 0) == 0),
                        sell_count=sum(1 for p in best_stale.positions if getattr(p, 'type', 0) == 1),
                        confidence_score=best_stale.confidence_score,
                        reason=best_stale.reason
                    )
            
            # 0.5. Advanced Pairing - ‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á
            if self.advanced_pairing_enabled:
                advanced_combinations = self._find_advanced_pairing_combinations(filtered_positions)
                if advanced_combinations:
                    logger.info(f"üß† ADVANCED PAIRING FOUND: {len(advanced_combinations)} combinations")
                    best_advanced = advanced_combinations[0]
                    logger.info(f"   Best: {best_advanced.combination_type}: ${best_advanced.total_profit:.2f} ({best_advanced.size} positions)")
                    
                    processing_time = time.time() - start_time
                    self._record_performance(True, best_advanced.total_profit, processing_time)
                    
                    return ClosingDecision(
                        should_close=True,
                        positions_to_close=best_advanced.positions,
                        method="ADVANCED_PAIRING",
                        net_pnl=best_advanced.total_profit,
                        expected_pnl=best_advanced.total_profit,
                        position_count=best_advanced.size,
                        buy_count=sum(1 for p in best_advanced.positions if getattr(p, 'type', 0) == 0),
                        sell_count=sum(1 for p in best_advanced.positions if getattr(p, 'type', 0) == 1),
                        confidence_score=best_advanced.confidence_score,
                        reason=best_advanced.reason
                    )
            
            # 0.6. Enhanced Helping - ‡∏£‡∏∞‡∏ö‡∏ö‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á
            if self.enhanced_helping_enabled:
                enhanced_helping = self._find_enhanced_helping_combinations(filtered_positions)
                if enhanced_helping:
                    logger.info(f"üéØ ENHANCED HELPING FOUND: {len(enhanced_helping)} combinations")
                    best_helping = enhanced_helping[0]
                    logger.info(f"   Best: {best_helping.combination_type}: ${best_helping.total_profit:.2f} ({best_helping.size} positions)")
                    
                    processing_time = time.time() - start_time
                    self._record_performance(True, best_helping.total_profit, processing_time)
                    
                    return ClosingDecision(
                        should_close=True,
                        positions_to_close=best_helping.positions,
                        method="ENHANCED_HELPING",
                        net_pnl=best_helping.total_profit,
                        expected_pnl=best_helping.total_profit,
                        position_count=best_helping.size,
                        buy_count=sum(1 for p in best_helping.positions if p.type == 0),
                        sell_count=sum(1 for p in best_helping.positions if p.type == 1),
                        confidence_score=best_helping.confidence_score,
                        reason=best_helping.reason
                    )
            
            # 1. ‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡πÑ‡∏°‡πâ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
            logger.info(f"üîç Starting profitable combinations search with {len(filtered_positions)} positions")
            profitable_combinations = self._find_profitable_combinations(filtered_positions)
            
            if profitable_combinations:
                # ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏° ‚Üí ‡∏õ‡∏¥‡∏î‡πÑ‡∏°‡πâ
                best_combination = profitable_combinations[0]
                logger.info(f"‚úÖ HEDGE COMBINATION FOUND: {best_combination.combination_type}")
                logger.info(f"   Net P&L: ${best_combination.total_profit:.2f}")
                logger.info(f"   Positions: {best_combination.size}")
                
                # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û
                processing_time = time.time() - start_time
                self._record_performance(True, best_combination.total_profit, processing_time)
                
                return ClosingDecision(
                    should_close=True,
                    positions_to_close=best_combination.positions,
                    method="HEDGE_PAIRING",
                    net_pnl=best_combination.total_profit,
                    expected_pnl=best_combination.total_profit,
                    position_count=best_combination.size,
                    buy_count=sum(1 for p in best_combination.positions if p.type == 0),
                    sell_count=sum(1 for p in best_combination.positions if p.type == 1),
                    confidence_score=best_combination.confidence_score,
                    reason=best_combination.reason
                )
            
            # 2. ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏° ‚Üí ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
            logger.info("=" * 60)
            logger.info("üí§ NO PROFITABLE COMBINATIONS FOUND")
            logger.info("=" * 60)
            logger.info(f"üìä Analyzed positions: {len(positions)} total")
            logger.info(f"üìä Buy positions: {len([p for p in positions if getattr(p, 'type', 0) == 0])}")
            logger.info(f"üìä Sell positions: {len([p for p in positions if getattr(p, 'type', 0) == 1])}")
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πâ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏Å‡∏£‡∏≠‡∏á‡∏≠‡∏≠‡∏Å (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡πÑ‡∏°‡πâ)
            if hasattr(self, 'original_position_count') and self.original_position_count > len(positions) and len(positions) > 0:
                filtered_count = self.original_position_count - len(positions)
                logger.info(f"üìä Filtered out: {filtered_count} positions (too many for analysis)")
                logger.info(f"üìä Total positions in system: {self.original_position_count}")
            
            # ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏∏‡∏ó‡∏ò‡∏¥ (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡πÑ‡∏°‡πâ)
            if len(positions) > 0:
                logger.info(f"üìä Summary: {len(positions)} positions analyzed")
                logger.info("=" * 60)
            
            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û
            processing_time = time.time() - start_time
            self._record_performance(False, 0.0, processing_time)
            
            return None
            
        except Exception as e:
            logger.error(f"‚ùå Error in hedge pairing analysis: {e}")
            processing_time = time.time() - start_time
            self._record_performance(False, 0.0, processing_time)
            return None
    
    def _smart_filter_positions(self, positions: List[Any], account_balance: float = 1000.0) -> List[Any]:
        """üîç Smart Filtering - ‡∏Ñ‡∏±‡∏î‡∏Å‡∏£‡∏≠‡∏á‡πÑ‡∏°‡πâ‡∏ï‡∏≤‡∏°‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏Ç‡∏≠‡∏á‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏∏‡∏ô"""
        try:
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì threshold ‡∏ï‡∏≤‡∏°‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏Ç‡∏≠‡∏á‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏∏‡∏ô
            threshold = self._calculate_portfolio_threshold(account_balance, len(positions))
            
            filtered_positions = []
            for pos in positions:
                # ‡πÉ‡∏ä‡πâ P&L ‡πÅ‡∏ö‡∏ö Real-time
                real_pnl = self._get_real_time_pnl(pos)
                volume = getattr(pos, 'volume', 0)
                
                # ‡∏Ñ‡∏±‡∏î‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç (‡πÉ‡∏ä‡πâ threshold ‡∏ó‡∏µ‡πà‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≤‡∏Å‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏Ç‡∏≠‡∏á‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏∏‡∏ô)
                # ‡∏£‡∏±‡∏ö‡πÑ‡∏°‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏ó‡∏±‡πâ‡∏á‡∏Å‡∏≥‡πÑ‡∏£‡πÅ‡∏•‡∏∞‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô)
                if True:  # ‡∏£‡∏±‡∏ö‡πÑ‡∏°‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
                    if volume >= 0.01:  # ‡πÑ‡∏°‡πà‡πÄ‡∏≠‡∏≤‡πÑ‡∏°‡πâ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡πá‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ
                        if abs(real_pnl) >= 0.1:  # ‡πÑ‡∏°‡πà‡πÄ‡∏≠‡∏≤‡πÑ‡∏°‡πâ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡πÑ‡∏£/‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡∏ô‡πâ‡∏≠‡∏¢‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ
                            filtered_positions.append(pos)
                        else:
                            logger.debug(f"üîç Filtered out: {getattr(pos, 'ticket', 'N/A')} (profit too small: ${real_pnl:.2f})")
                    else:
                        logger.debug(f"üîç Filtered out: {getattr(pos, 'ticket', 'N/A')} (volume too small: {volume:.2f})")
                else:
                    logger.debug(f"üîç Filtered out: {getattr(pos, 'ticket', 'N/A')} (loss too large: ${real_pnl:.2f})")
            
            logger.info(f"üîç Smart Filtering: {len(positions)} ‚Üí {len(filtered_positions)} positions (threshold: ${threshold:.2f})")
            return filtered_positions
            
        except Exception as e:
            logger.error(f"‚ùå Error in smart filtering: {e}")
            return positions  # Return original positions if error
    
    def _calculate_portfolio_threshold(self, account_balance: float, position_count: int) -> float:
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì threshold ‡∏ï‡∏≤‡∏°‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏Ç‡∏≠‡∏á‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏∏‡∏ô"""
        try:
            if position_count == 0:
                return 0.0
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏Ç‡∏≠‡∏á‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏∏‡∏ô‡∏ï‡πà‡∏≠‡πÑ‡∏°‡πâ
            avg_balance_per_position = account_balance / position_count
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì threshold ‡∏ï‡∏≤‡∏°‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå‡∏Ç‡∏≠‡∏á‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏∏‡∏ô
            threshold_percentage = self._get_threshold_percentage()
            threshold = avg_balance_per_position * threshold_percentage
            
            # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î Min/Max threshold
            min_threshold = 1.0   # ‡πÑ‡∏°‡πà‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤ $1.00
            max_threshold = 100.0 # ‡πÑ‡∏°‡πà‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤ $100.00
            
            threshold = max(min_threshold, min(threshold, max_threshold))
            
            return threshold
        except Exception as e:
            logger.error(f"Error calculating portfolio threshold: {e}")
            return 10.0
    
    def _get_threshold_percentage(self) -> float:
        """‡πÑ‡∏î‡πâ threshold percentage ‡∏ï‡∏≤‡∏°‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏û‡∏≠‡∏£‡πå‡∏ï"""
        try:
            if self.portfolio_health_score == "‡∏î‡∏µ‡∏°‡∏≤‡∏Å":
                return 0.05  # 5%
            elif self.portfolio_health_score == "‡∏î‡∏µ":
                return 0.08  # 8%
            elif self.portfolio_health_score == "‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á":
                return 0.10  # 10%
            elif self.portfolio_health_score == "‡πÅ‡∏¢‡πà":
                return 0.15  # 15%
            else:  # ‡πÅ‡∏¢‡πà‡∏°‡∏≤‡∏Å
                return 0.20  # 20%
        except Exception as e:
            logger.error(f"Error getting threshold percentage: {e}")
            return 0.10  # Default 10%
    
    def _get_effective_min_net_profit(self) -> float:
        """‡πÑ‡∏î‡πâ min_net_profit ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏ï‡∏≤‡∏°‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏û‡∏≠‡∏£‡πå‡∏ï"""
        try:
            if self.portfolio_health_score in ["‡πÅ‡∏¢‡πà", "‡πÅ‡∏¢‡πà‡∏°‡∏≤‡∏Å"]:
                return self.emergency_min_net_profit  # $0.05 ‡πÉ‡∏ô‡πÇ‡∏´‡∏°‡∏î‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô
            else:
                return self.min_net_profit  # $0.1 ‡∏õ‡∏Å‡∏ï‡∏¥
        except Exception as e:
            logger.error(f"Error getting effective min net profit: {e}")
            return self.min_net_profit
    
    def _priority_based_selection(self, positions: List[Any]) -> List[Any]:
        """üéØ Priority-based Selection - ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏°‡πâ‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç"""
        try:
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Priority Score ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÑ‡∏°‡πâ
            priority_scores = []
            for pos in positions:
                priority_score = self._calculate_priority_score(pos)
                priority_scores.append((priority_score, pos))
            
            # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏° Priority Score (‡∏°‡∏≤‡∏Å‡∏™‡∏∏‡∏î‡∏Å‡πà‡∏≠‡∏ô)
            priority_scores.sort(key=lambda x: x[0], reverse=True)
            
            # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÑ‡∏°‡πâ‡∏ó‡∏µ‡πà‡∏°‡∏µ Priority ‡∏™‡∏π‡∏á (‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÑ‡∏°‡πâ)
            if len(positions) <= 20:
                max_positions = len(positions)  # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
            elif len(positions) <= 50:
                max_positions = min(30, len(positions))  # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå 30 ‡πÑ‡∏°‡πâ
            else:
                max_positions = min(40, len(positions))  # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå 40 ‡πÑ‡∏°‡πâ
            priority_positions = [pos for _, pos in priority_scores[:max_positions]]
            
            logger.info(f"üéØ Priority Selection: {len(positions)} ‚Üí {len(priority_positions)} positions")
            return priority_positions
            
        except Exception as e:
            logger.error(f"‚ùå Error in priority selection: {e}")
            return positions  # Return original positions if error
    
    def _calculate_priority_score(self, position: Any) -> float:
        """üìä ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Priority Score ‡∏à‡∏≤‡∏Å Real-time P&L ‡πÅ‡∏•‡∏∞‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô"""
        try:
            # ‡πÉ‡∏ä‡πâ P&L ‡πÅ‡∏ö‡∏ö Real-time
            real_pnl = self._get_real_time_pnl(position)
            volume = getattr(position, 'volume', 0)
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
            current_price = self._get_current_price()
            open_price = getattr(position, 'price_open', 0)
            distance = abs(current_price - open_price)
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Priority Score
            priority_score = 0
            
            # ‡πÑ‡∏°‡πâ‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏µ‡∏¢‡πÑ‡∏Å‡∏•‡πÜ = Priority ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î (‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏¥‡∏î‡∏Å‡πà‡∏≠‡∏ô)
            if real_pnl < -5.0 and distance > 5.0:  # ‡πÄ‡∏™‡∏µ‡∏¢‡∏°‡∏≤‡∏Å + ‡πÑ‡∏Å‡∏•‡∏°‡∏≤‡∏Å
                priority_score += abs(real_pnl) * 25  # ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
                priority_score += distance * 10  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ï‡∏≤‡∏°‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á
            elif real_pnl < -2.0 and distance > 3.0:  # ‡πÄ‡∏™‡∏µ‡∏¢‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á + ‡πÑ‡∏Å‡∏•‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á
                priority_score += abs(real_pnl) * 20  # ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏π‡∏á
                priority_score += distance * 8  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ï‡∏≤‡∏°‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á
            elif real_pnl < 0:  # ‡πÄ‡∏™‡∏µ‡∏¢‡∏ô‡πâ‡∏≠‡∏¢
                priority_score += abs(real_pnl) * 15  # ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á
                priority_score += distance * 5  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ï‡∏≤‡∏°‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á
            else:  # ‡∏Å‡∏≥‡πÑ‡∏£
                priority_score += real_pnl * 10  # ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ï‡πà‡∏≥
                priority_score += distance * 2  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ï‡∏≤‡∏°‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á (‡∏ô‡πâ‡∏≠‡∏¢)
            
            # ‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏°‡∏≤‡∏Å = Priority ‡∏™‡∏π‡∏á
            priority_score += volume * 100
            
            # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ï‡∏≤‡∏°‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏û‡∏≠‡∏£‡πå‡∏ï
            if self.portfolio_health_score == "‡∏î‡∏µ‡∏°‡∏≤‡∏Å":
                priority_score *= 1.2  # ‡πÄ‡∏û‡∏¥‡πà‡∏° 20%
            elif self.portfolio_health_score == "‡∏î‡∏µ":
                priority_score *= 1.1  # ‡πÄ‡∏û‡∏¥‡πà‡∏° 10%
            elif self.portfolio_health_score == "‡πÅ‡∏¢‡πà":
                priority_score *= 0.9   # ‡∏•‡∏î 10%
            elif self.portfolio_health_score == "‡πÅ‡∏¢‡πà‡∏°‡∏≤‡∏Å":
                priority_score *= 0.8  # ‡∏•‡∏î 20%
            
            return priority_score
            
        except Exception as e:
            logger.error(f"‚ùå Error calculating priority score: {e}")
            return 0.0
    
    def _validate_system_performance(self) -> dict:
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏ö‡∏ö Real-time"""
        try:
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà
            accuracy_score = self._calculate_accuracy_score()
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î‡πÑ‡∏°‡πâ
            efficiency_score = self._calculate_efficiency_score()
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
            speed_score = self._calculate_speed_score()
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Overall Performance Score
            overall_score = (accuracy_score + efficiency_score + speed_score) / 3
            
            return {
                'accuracy_score': accuracy_score,
                'efficiency_score': efficiency_score,
                'speed_score': speed_score,
                'overall_score': overall_score,
                'status': '‡∏î‡∏µ‡∏°‡∏≤‡∏Å' if overall_score > 0.8 else '‡∏î‡∏µ' if overall_score > 0.6 else '‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á'
            }
        except Exception as e:
            logger.error(f"Error validating system performance: {e}")
            return {}
    
    def _calculate_accuracy_score(self) -> float:
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Accuracy Score"""
        try:
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≤‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û
            if len(self.performance_history) < 5:
                return 0.75  # Default score
            
            recent_performance = self.performance_history[-10:]  # 10 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
            successful_closes = sum(1 for p in recent_performance if p.get('success', False))
            accuracy = successful_closes / len(recent_performance)
            
            return accuracy
        except Exception as e:
            logger.error(f"Error calculating accuracy score: {e}")
            return 0.75
    
    def _calculate_efficiency_score(self) -> float:
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Efficiency Score"""
        try:
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≤‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û
            if len(self.performance_history) < 5:
                return 0.70  # Default score
            
            recent_performance = self.performance_history[-10:]  # 10 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
            avg_profit = sum(p.get('profit', 0) for p in recent_performance) / len(recent_performance)
            
            # Normalize efficiency score (0-1)
            efficiency = min(1.0, max(0.0, (avg_profit + 10) / 20))  # -10 to +10 range
            
            return efficiency
        except Exception as e:
            logger.error(f"Error calculating efficiency score: {e}")
            return 0.70
    
    def _calculate_speed_score(self) -> float:
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Speed Score"""
        try:
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≤‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û
            if len(self.performance_history) < 5:
                return 0.80  # Default score
            
            recent_performance = self.performance_history[-10:]  # 10 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
            avg_time = sum(p.get('processing_time', 1.0) for p in recent_performance) / len(recent_performance)
            
            # Normalize speed score (0-1) - ‡∏¢‡∏¥‡πà‡∏á‡πÄ‡∏£‡πá‡∏ß‡∏¢‡∏¥‡πà‡∏á‡∏î‡∏µ
            speed = max(0.0, min(1.0, 2.0 - avg_time))  # 0-2 seconds range
            
            return speed
        except Exception as e:
            logger.error(f"Error calculating speed score: {e}")
            return 0.80
    
    def _record_performance(self, success: bool, profit: float, processing_time: float):
        """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û"""
        try:
            performance_record = {
                'timestamp': time.time(),
                'success': success,
                'profit': profit,
                'processing_time': processing_time,
                'portfolio_health': self.portfolio_health_score
            }
            
            self.performance_history.append(performance_record)
            
            # ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞ 100 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
            if len(self.performance_history) > 100:
                self.performance_history = self.performance_history[-100:]
                
        except Exception as e:
            logger.error(f"Error recording performance: {e}")
    
    def _find_helping_positions_for_hedged(self, positions: List[Any]) -> List[HedgeCombination]:
        """üîç ‡∏´‡∏≤‡∏ï‡∏±‡∏ß‡∏ä‡πà‡∏ß‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÑ‡∏°‡πâ‡∏ó‡∏µ‡πà HEDGED ‡πÅ‡∏•‡πâ‡∏ß"""
        try:
            combinations = []
            
            # ‡∏´‡∏≤‡πÑ‡∏°‡πâ‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ (NO HEDGE)
            unpaired_positions = []
            for pos in positions:
                if not self._has_hedge_pair(positions, pos):
                    unpaired_positions.append(pos)
            
            logger.debug(f"üîç Helping Positions: Found {len(unpaired_positions)} unpaired positions")
            
            if len(unpaired_positions) == 0:
                logger.debug("üí§ No unpaired positions to help with")
                return combinations
            
            # ‡∏´‡∏≤‡πÑ‡∏°‡πâ‡∏Å‡∏≥‡πÑ‡∏£‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ
            profitable_unpaired = [pos for pos in unpaired_positions if getattr(pos, 'profit', 0) > 0]
            
            if len(profitable_unpaired) == 0:
                logger.debug("üí§ No profitable unpaired positions to help with")
                return combinations
            
            logger.debug(f"üí∞ Found {len(profitable_unpaired)} profitable unpaired positions")
            
            # ‡∏´‡∏≤‡πÑ‡∏°‡πâ‡∏ó‡∏µ‡πà HEDGED ‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏•‡∏∞‡∏ï‡∏¥‡∏î‡∏•‡∏ö
            hedged_losing_pairs = []
            for pos in positions:
                if self._has_hedge_pair(positions, pos) and getattr(pos, 'profit', 0) < 0:
                    # ‡∏´‡∏≤‡∏Ñ‡∏π‡πà‡∏Ç‡∏≠‡∏á‡πÑ‡∏°‡πâ‡∏ô‡∏µ‡πâ
                    pair_pos = self._find_pair_position(positions, pos)
                    if pair_pos:
                        pair_profit = getattr(pos, 'profit', 0) + getattr(pair_pos, 'profit', 0)
                        if pair_profit < 0:  # ‡∏Ñ‡∏π‡πà‡∏ï‡∏¥‡∏î‡∏•‡∏ö
                            hedged_losing_pairs.append({
                                'buy': pos if getattr(pos, 'type', 0) == 0 else pair_pos,
                                'sell': pos if getattr(pos, 'type', 0) == 1 else pair_pos,
                                'profit': pair_profit
                            })
            
            logger.debug(f"üìâ Found {len(hedged_losing_pairs)} losing hedge pairs")
            
            # ‡∏•‡∏≠‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏°‡πâ‡∏Å‡∏≥‡πÑ‡∏£‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ‡∏°‡∏≤‡∏ä‡πà‡∏ß‡∏¢‡∏Ñ‡∏π‡πà‡∏ó‡∏µ‡πà‡∏ï‡∏¥‡∏î‡∏•‡∏ö (‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤)
            max_searches = min(50, len(hedged_losing_pairs) * len(profitable_unpaired))  # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 50 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á
            search_count = 0
            
            for losing_pair in hedged_losing_pairs:
                if search_count >= max_searches:
                    break
                    
                for helper_pos in profitable_unpaired:
                    if search_count >= max_searches:
                        break
                        
                    search_count += 1
                    total_profit = losing_pair['profit'] + getattr(helper_pos, 'profit', 0)
                    
                    if total_profit >= self.min_net_profit:
                        combinations.append(HedgeCombination(
                            positions=[losing_pair['buy'], losing_pair['sell'], helper_pos],
                            total_profit=total_profit,
                            combination_type="HELPING_HEDGED",
                            size=3,
                            confidence_score=90.0,
                            reason=f"Helping hedged pair: ${losing_pair['profit']:.2f} + Helper ${getattr(helper_pos, 'profit', 0):.2f}"
                        ))
                        
                        # ‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏û‡∏ö combination ‡∏ó‡∏µ‡πà‡∏î‡∏µ‡πÅ‡∏•‡πâ‡∏ß
                        if len(combinations) >= 3:
                            break
                
                if len(combinations) >= 3:
                    break
            
            # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏Å‡∏≥‡πÑ‡∏£ (‡∏°‡∏≤‡∏Å‡∏™‡∏∏‡∏î‡∏Å‡πà‡∏≠‡∏ô)
            combinations.sort(key=lambda x: x.total_profit, reverse=True)
            
            logger.info(f"üîç Helping Positions: Found {len(combinations)} helping combinations")
            return combinations
            
        except Exception as e:
            logger.error(f"‚ùå Error in find helping positions for hedged: {e}")
            return []
    
    def _find_pair_position(self, positions: List[Any], position: Any) -> Optional[Any]:
        """üîç ‡∏´‡∏≤‡∏Ñ‡∏π‡πà‡∏Ç‡∏≠‡∏á‡πÑ‡∏°‡πâ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î"""
        try:
            pos_ticket = getattr(position, 'ticket', 'N/A')
            pos_type = getattr(position, 'type', 0)
            
            # ‡∏´‡∏≤‡πÑ‡∏°‡πâ‡∏ï‡∏£‡∏á‡∏Ç‡πâ‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ
            for other_pos in positions:
                other_ticket = getattr(other_pos, 'ticket', 'N/A')
                other_type = getattr(other_pos, 'type', 0)
                
                if other_ticket != pos_ticket and other_type != pos_type:
                    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πâ‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏π‡πà‡∏Å‡∏±‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                    if self._is_hedge_pair(position, other_pos):
                        return other_pos
            
            return None
            
        except Exception as e:
            logger.error(f"‚ùå Error finding pair position: {e}")
            return None
    
    def _is_hedge_pair(self, pos1: Any, pos2: Any) -> bool:
        """üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πâ 2 ‡∏ï‡∏±‡∏ß‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏π‡πà‡∏Å‡∏±‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"""
        try:
            type1 = getattr(pos1, 'type', 0)
            type2 = getattr(pos2, 'type', 0)
            
            # ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏°‡πâ‡∏ï‡∏£‡∏á‡∏Ç‡πâ‡∏≤‡∏°
            if type1 == type2:
                return False
            
            # ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡πÑ‡∏°‡πâ‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏Å‡∏≥‡πÑ‡∏£‡πÅ‡∏•‡∏∞‡∏≠‡∏µ‡∏Å‡πÑ‡∏°‡πâ‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô
            profit1 = getattr(pos1, 'profit', 0)
            profit2 = getattr(pos2, 'profit', 0)
            
            return (profit1 > 0 and profit2 < 0) or (profit1 < 0 and profit2 > 0)
            
        except Exception as e:
            logger.error(f"‚ùå Error checking hedge pair: {e}")
            return False
    
    def _try_alternative_pairing(self, positions: List[Any]) -> List[HedgeCombination]:
        """üîÑ ‡∏•‡∏≠‡∏á‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å‡πÑ‡∏°‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏™‡∏ô‡πÉ‡∏à‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ HEDGED"""
        try:
            combinations = []
            
            # ‡πÅ‡∏¢‡∏Å‡πÑ‡∏°‡πâ‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
            buy_positions = [pos for pos in positions if getattr(pos, 'type', 0) == 0]
            sell_positions = [pos for pos in positions if getattr(pos, 'type', 0) == 1]
            
            logger.info(f"üîç Alternative Pairing: {len(buy_positions)} Buy, {len(sell_positions)} Sell")
            
            # ‡∏•‡∏≠‡∏á‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà Buy + Sell ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏π‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡πÑ‡∏î‡πâ (‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤)
            max_searches = min(100, len(buy_positions) * len(sell_positions))  # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 100 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á
            search_count = 0
            
            for buy_pos in buy_positions:
                if search_count >= max_searches:
                    break
                    
                for sell_pos in sell_positions:
                    if search_count >= max_searches:
                        break
                        
                    search_count += 1
                    total_profit = getattr(buy_pos, 'profit', 0) + getattr(sell_pos, 'profit', 0)
                    
                    # ‡πÉ‡∏ä‡πâ effective_min_profit ‡πÅ‡∏ó‡∏ô self.min_net_profit
                    effective_min_profit = self._get_effective_min_net_profit()
                    if total_profit >= effective_min_profit:
                        combinations.append(HedgeCombination(
                            positions=[buy_pos, sell_pos],
                            total_profit=total_profit,
                            combination_type="ALTERNATIVE_PAIR",
                            size=2,
                            confidence_score=90.0,
                            reason=f"Alternative pair: Buy ${getattr(buy_pos, 'profit', 0):.2f} + Sell ${getattr(sell_pos, 'profit', 0):.2f}"
                        ))
                        
                        # ‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏û‡∏ö combination ‡∏ó‡∏µ‡πà‡∏î‡∏µ‡πÅ‡∏•‡πâ‡∏ß
                        if len(combinations) >= 5:
                            break
                
                if len(combinations) >= 5:
                    break
            
            # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏Å‡∏≥‡πÑ‡∏£ (‡∏°‡∏≤‡∏Å‡∏™‡∏∏‡∏î‡∏Å‡πà‡∏≠‡∏ô)
            combinations.sort(key=lambda x: x.total_profit, reverse=True)
            
            logger.info(f"üîÑ Alternative Pairing: Found {len(combinations)} possible pairs")
            return combinations
            
        except Exception as e:
            logger.error(f"‚ùå Error in try alternative pairing: {e}")
            return []
    
    def _try_dynamic_re_pairing(self, positions: List[Any]) -> List[HedgeCombination]:
        """üîÑ ‡∏•‡∏≠‡∏á‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å‡πÑ‡∏°‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ Hedge Combinations"""
        try:
            combinations = []
            
            # ‡πÅ‡∏¢‡∏Å‡πÑ‡∏°‡πâ‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
            buy_positions = [pos for pos in positions if getattr(pos, 'type', 0) == 0]
            sell_positions = [pos for pos in positions if getattr(pos, 'type', 0) == 1]
            
            logger.info(f"üîç Dynamic Re-pairing: {len(buy_positions)} Buy, {len(sell_positions)} Sell")
            
            # ‡∏•‡∏≠‡∏á‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà Buy + Sell ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏π‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡πÑ‡∏î‡πâ (‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤)
            max_searches = min(50, len(buy_positions) * len(sell_positions))  # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 50 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á
            search_count = 0
            
            for buy_pos in buy_positions:
                if search_count >= max_searches:
                    break
                    
                for sell_pos in sell_positions:
                    if search_count >= max_searches:
                        break
                        
                    search_count += 1
                    total_profit = getattr(buy_pos, 'profit', 0) + getattr(sell_pos, 'profit', 0)
                    
                    # ‡πÉ‡∏ä‡πâ effective_min_profit ‡πÅ‡∏ó‡∏ô self.min_net_profit
                    effective_min_profit = self._get_effective_min_net_profit()
                    if total_profit >= effective_min_profit:
                        combinations.append(HedgeCombination(
                            positions=[buy_pos, sell_pos],
                            total_profit=total_profit,
                            combination_type="DYNAMIC_PAIR",
                            size=2,
                            confidence_score=85.0,
                            reason=f"Dynamic pair: Buy ${getattr(buy_pos, 'profit', 0):.2f} + Sell ${getattr(sell_pos, 'profit', 0):.2f}"
                        ))
                        
                        # ‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏û‡∏ö combination ‡∏ó‡∏µ‡πà‡∏î‡∏µ‡πÅ‡∏•‡πâ‡∏ß
                        if len(combinations) >= 3:
                            break
                
                if len(combinations) >= 3:
                    break
            
            # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏Å‡∏≥‡πÑ‡∏£ (‡∏°‡∏≤‡∏Å‡∏™‡∏∏‡∏î‡∏Å‡πà‡∏≠‡∏ô)
            combinations.sort(key=lambda x: x.total_profit, reverse=True)
            
            logger.info(f"üîÑ Dynamic Re-pairing: Found {len(combinations)} possible pairs")
            return combinations
            
        except Exception as e:
            logger.error(f"‚ùå Error in try dynamic re-pairing: {e}")
            return []
    
    def _dynamic_re_pairing(self, hedge_pair: dict, positions: List[Any]) -> Optional[HedgeCombination]:
        """üîÑ Dynamic Re-pairing - ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏ö‡∏ö Dynamic"""
        try:
            # ‡∏´‡∏≤‡πÑ‡∏°‡πâ‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ
            used_tickets = set()
            for pair in self._find_existing_hedge_pairs(positions):
                used_tickets.add(getattr(pair['buy'], 'ticket', 'N/A'))
                used_tickets.add(getattr(pair['sell'], 'ticket', 'N/A'))
            
            available_positions = [pos for pos in positions 
                                 if getattr(pos, 'ticket', 'N/A') not in used_tickets]
            
            if len(available_positions) < 2:
                return None
            
            # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡πÉ‡∏´‡∏°‡πà
            best_alternative = None
            best_profit = -float('inf')
            
            for i, pos1 in enumerate(available_positions):
                for j, pos2 in enumerate(available_positions[i+1:], i+1):
                    if getattr(pos1, 'type', 0) != getattr(pos2, 'type', 0):  # ‡πÑ‡∏°‡πâ‡∏ï‡∏£‡∏á‡∏Ç‡πâ‡∏≤‡∏°
                        test_profit = getattr(pos1, 'profit', 0) + getattr(pos2, 'profit', 0)
                        
                        if test_profit > best_profit and test_profit >= self.min_net_profit:
                            best_alternative = [pos1, pos2]
                            best_profit = test_profit
            
            if best_alternative:
                return HedgeCombination(
                    positions=best_alternative,
                    total_profit=best_profit,
                    combination_type="DYNAMIC_RE_PAIRING",
                    size=2,
                    confidence_score=80.0,
                    reason="Dynamic re-pairing: Alternative pair found"
                )
            
            return None
            
        except Exception as e:
            logger.error(f"‚ùå Error in dynamic re-pairing: {e}")
            return None
    
    def _find_profitable_combinations(self, positions: List[Any]) -> List[HedgeCombination]:
        """üîç ‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡πÑ‡∏°‡πâ‡∏ó‡∏µ‡πà‡∏ú‡∏•‡∏£‡∏ß‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏ö‡∏ß‡∏Å (‡πÉ‡∏ä‡πâ‡∏´‡∏•‡∏±‡∏Å‡∏Å‡∏≤‡∏£ Hedge ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)"""
        try:
            # Step 2: Priority-based Selection - ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏°‡πâ‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
            priority_positions = self._priority_based_selection(positions)
            logger.info(f"üîç Priority Selection: {len(positions)} ‚Üí {len(priority_positions)} positions")
            
            # ‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡πÅ‡∏ö‡∏ö Hedge ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
            hedge_combinations = self._find_hedge_combinations(priority_positions)
            if hedge_combinations:
                logger.info("-" * 40)
                logger.info("‚úÖ HEDGE COMBINATIONS FOUND")
                logger.info("-" * 40)
                logger.info(f"üéØ Total combinations: {len(hedge_combinations)}")
                for i, combo in enumerate(hedge_combinations[:3]):  # ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏Ñ‡πà 3 ‡∏≠‡∏±‡∏ô‡πÅ‡∏£‡∏Å
                    logger.info(f"   {i+1}. {combo.combination_type}: ${combo.total_profit:.2f} ({combo.size} positions)")
                if len(hedge_combinations) > 3:
                    logger.info(f"   ... and {len(hedge_combinations) - 3} more combinations")
                logger.info("=" * 60)
                return hedge_combinations
            
            # Step 2: ‡∏´‡∏≤‡πÑ‡∏°‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏ó‡∏µ‡πà HEDGED ‡πÅ‡∏•‡πâ‡∏ß
            logger.info("üîç STEP 2: HELPING POSITIONS")
            helping_combinations = self._find_helping_positions_for_hedged(priority_positions)
            
            if helping_combinations:
                logger.info("-" * 40)
                logger.info("‚úÖ HELPING POSITIONS FOUND")
                logger.info("-" * 40)
                logger.info(f"üéØ Total combinations: {len(helping_combinations)}")
                for i, combo in enumerate(helping_combinations[:3]):  # ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏Ñ‡πà 3 ‡∏≠‡∏±‡∏ô‡πÅ‡∏£‡∏Å
                    logger.info(f"   {i+1}. {combo.combination_type}: ${combo.total_profit:.2f} ({combo.size} positions)")
                if len(helping_combinations) > 3:
                    logger.info(f"   ... and {len(helping_combinations) - 3} more combinations")
                logger.info("=" * 60)
                return helping_combinations
            
            # Step 2.5: ‡∏´‡∏≤‡πÑ‡∏°‡πâ‡∏ù‡∏±‡πà‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏ó‡∏µ‡πà P&L ‡∏£‡∏ß‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏ö‡∏ß‡∏Å (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏°‡πâ‡∏ù‡∏±‡πà‡∏á‡∏ï‡∏£‡∏á‡∏Ç‡πâ‡∏≤‡∏°)
            logger.info("üîç STEP 2.5: SINGLE SIDE PROFITABLE CLOSING")
            single_side_combinations = self._find_single_side_profitable(priority_positions)
            
            if single_side_combinations:
                logger.info("-" * 40)
                logger.info("‚úÖ SINGLE SIDE PROFITABLE FOUND")
                logger.info("-" * 40)
                logger.info(f"üéØ Total combinations: {len(single_side_combinations)}")
                for i, combo in enumerate(single_side_combinations[:3]):  # ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏Ñ‡πà 3 ‡∏≠‡∏±‡∏ô‡πÅ‡∏£‡∏Å
                    logger.info(f"   {i+1}. {combo.combination_type}: ${combo.total_profit:.2f} ({combo.size} positions)")
                if len(single_side_combinations) > 3:
                    logger.info(f"   ... and {len(single_side_combinations) - 3} more combinations")
                logger.info("=" * 60)
                return single_side_combinations
            
            # Step 3-4: Advanced Search (‡∏ó‡∏∏‡∏Å 5 ‡∏ô‡∏≤‡∏ó‡∏µ)
            current_time = time.time()
            if not hasattr(self, 'last_advanced_search_time'):
                self.last_advanced_search_time = 0
            should_run_advanced = (current_time - self.last_advanced_search_time) >= 300  # 5 ‡∏ô‡∏≤‡∏ó‡∏µ = 300 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ (‡∏•‡∏î‡∏à‡∏≤‡∏Å 1 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á)
            
            if should_run_advanced:
                logger.info("‚è∞ Running advanced search (5+ minutes since last run)")
                
                # Step 3: Dynamic Re-pairing
                logger.info("üîç STEP 3: DYNAMIC RE-PAIRING")
                dynamic_combinations = self._try_dynamic_re_pairing(priority_positions)
                
                if dynamic_combinations:
                    logger.info("-" * 40)
                    logger.info("‚úÖ DYNAMIC RE-PAIRING FOUND")
                    logger.info("-" * 40)
                    logger.info(f"üéØ Total combinations: {len(dynamic_combinations)}")
                    for i, combo in enumerate(dynamic_combinations[:3]):  # ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏Ñ‡πà 3 ‡∏≠‡∏±‡∏ô‡πÅ‡∏£‡∏Å
                        logger.info(f"   {i+1}. {combo.combination_type}: ${combo.total_profit:.2f} ({combo.size} positions)")
                    if len(dynamic_combinations) > 3:
                        logger.info(f"   ... and {len(dynamic_combinations) - 3} more combinations")
                    logger.info("=" * 60)
                    self.last_advanced_search_time = current_time  # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏ß‡∏•‡∏≤
                    return dynamic_combinations
                
                # Step 4: Alternative Pairing
                logger.info("üîç STEP 4: ALTERNATIVE PAIRING")
                alternative_combinations = self._try_alternative_pairing(priority_positions)
                
                if alternative_combinations:
                    logger.info("-" * 40)
                    logger.info("‚úÖ ALTERNATIVE PAIRING FOUND")
                    logger.info("-" * 40)
                    logger.info(f"üéØ Total combinations: {len(alternative_combinations)}")
                    for i, combo in enumerate(alternative_combinations[:3]):  # ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏Ñ‡πà 3 ‡∏≠‡∏±‡∏ô‡πÅ‡∏£‡∏Å
                        logger.info(f"   {i+1}. {combo.combination_type}: ${combo.total_profit:.2f} ({combo.size} positions)")
                    if len(alternative_combinations) > 3:
                        logger.info(f"   ... and {len(alternative_combinations) - 3} more combinations")
                    logger.info("=" * 60)
                    self.last_advanced_search_time = current_time  # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏ß‡∏•‡∏≤
                    return alternative_combinations
                
                # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏°‡πâ‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠ combination
                self.last_advanced_search_time = current_time
                logger.info("‚è∞ Advanced search completed, next run in 1 hour")
            else:
                time_remaining = 3600 - (current_time - self.last_advanced_search_time)
                minutes_remaining = int(time_remaining / 60)
                logger.info(f"‚è∞ Advanced search skipped ({minutes_remaining} min until next run)")
            
            # ‡∏´‡∏≤‡πÑ‡∏°‡πâ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏π‡πà‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πâ‡∏ó‡∏µ‡πà‡∏°‡∏µ Hedge ‡πÅ‡∏•‡πâ‡∏ß
            unpaired_profitable = []  # ‡πÑ‡∏°‡πâ‡∏Å‡∏≥‡πÑ‡∏£‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏π‡πà
            unpaired_losing = []     # ‡πÑ‡∏°‡πâ‡∏ï‡∏¥‡∏î‡∏•‡∏ö‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏π‡πà
            existing_hedge_pairs = [] # Hedge pairs ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
            
            # ‡πÅ‡∏¢‡∏Å‡πÑ‡∏°‡πâ‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
            for pos in positions:
                pos_ticket = getattr(pos, 'ticket', 'N/A')
                pos_profit = getattr(pos, 'profit', 0)
                has_hedge = self._has_hedge_pair(positions, pos)
                
                if not has_hedge:
                    if pos_profit >= self.min_net_profit:
                        unpaired_profitable.append(pos)
                        # ‡πÑ‡∏°‡πâ‡∏Å‡∏≥‡πÑ‡∏£‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏π‡πà
                    else:
                        unpaired_losing.append(pos)
                        # ‡πÑ‡∏°‡πâ‡∏ï‡∏¥‡∏î‡∏•‡∏ö‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏π‡πà
                else:
                    # ‡πÑ‡∏°‡πâ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
                    pass
            
            # ‡∏´‡∏≤ Hedge pairs ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
            existing_hedge_pairs = self._find_existing_hedge_pairs(positions)
            
            logger.info("=" * 50)
            logger.info("üìä POSITION STATUS SUMMARY")
            logger.info("=" * 50)
            logger.info(f"üí∞ Unpaired profitable: {len(unpaired_profitable)}")
            logger.info(f"üìâ Unpaired losing: {len(unpaired_losing)}")
            logger.info(f"üîó Existing hedge pairs: {len(existing_hedge_pairs)}")
            logger.info("=" * 50)
            
            # ‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡∏£‡∏ß‡∏°‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î: ‡πÑ‡∏°‡πâ‡∏Å‡∏≥‡πÑ‡∏£‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏π‡πà + Hedge pairs ‡∏ó‡∏µ‡πà‡∏ï‡∏¥‡∏î‡∏•‡∏ö
            profitable_combinations = self._find_helping_combinations(unpaired_profitable, existing_hedge_pairs)
            
            # ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏£‡∏ß‡∏°‡πÅ‡∏ö‡∏ö‡∏ú‡∏™‡∏°‡∏≠‡∏∑‡πà‡∏ô‡πÜ - ‡πÉ‡∏ä‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏£‡∏∞‡∏ö‡∏ö‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠
            
            # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏ú‡∏•‡∏£‡∏ß‡∏°‡∏Å‡∏≥‡πÑ‡∏£ (‡∏°‡∏≤‡∏Å‡∏™‡∏∏‡∏î‡∏Å‡πà‡∏≠‡∏ô)
            profitable_combinations.sort(key=lambda x: x.total_profit, reverse=True)
            
            logger.info(f"üîç Found {len(profitable_combinations)} profitable combinations")
            return profitable_combinations
            
        except Exception as e:
            logger.error(f"‚ùå Error finding profitable combinations: {e}")
            return []
    
    def _is_same_type_combination(self, combination: List[Any]) -> bool:
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡πÅ‡∏ö‡∏ö‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"""
        try:
            if len(combination) < 2:
                return False
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏°‡πâ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            first_type = getattr(combination[0], 'type', 0)
            for pos in combination[1:]:
                if getattr(pos, 'type', 0) != first_type:
                    return False  # ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡πÅ‡∏ö‡∏ö‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô
            
            return True  # ‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏ö‡∏ö‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô
            
        except Exception as e:
            logger.error(f"‚ùå Error checking same type combination: {e}")
            return False
    
    def _find_hedge_combinations(self, positions: List[Any], dynamic_settings: dict = None) -> List[HedgeCombination]:
        """‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡πÅ‡∏ö‡∏ö Hedge (‡∏ï‡∏£‡∏á‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏™‡∏°‡∏≠) - ‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô"""
        try:
            hedge_combinations = []
            
            # ‡πÅ‡∏¢‡∏Å‡πÑ‡∏°‡πâ Buy ‡πÅ‡∏•‡∏∞ Sell (‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô)
            buy_positions = [p for p in positions if getattr(p, 'type', 0) == 0]
            sell_positions = [p for p in positions if getattr(p, 'type', 0) == 1]
            
            logger.info("=" * 60)
            logger.info("üîç HEDGE ANALYSIS START")
            logger.info("=" * 60)
            logger.info(f"üìä Positions: {len(buy_positions)} Buy, {len(sell_positions)} Sell (Total: {len(positions)})")
            
            # Step 1: ‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏ï‡∏£‡∏á‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏™‡∏°‡∏≠ (‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô - O(n log n))
            hedge_pairs = []
            used_positions = set()  # ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡πÑ‡∏°‡πâ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß
            
            # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡πÑ‡∏°‡πâ‡∏ï‡∏≤‡∏°‡∏Å‡∏≥‡πÑ‡∏£ (‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô)
            buy_loss = [p for p in buy_positions if getattr(p, 'profit', 0) < 0]
            buy_profit = [p for p in buy_positions if getattr(p, 'profit', 0) > 0]
            sell_loss = [p for p in sell_positions if getattr(p, 'profit', 0) < 0]
            sell_profit = [p for p in sell_positions if getattr(p, 'profit', 0) > 0]
            
            # ‡∏´‡∏≤ Buy ‡∏ï‡∏¥‡∏î‡∏•‡∏ö + Sell ‡∏Å‡∏≥‡πÑ‡∏£ (‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô)
            for buy_pos in buy_loss:
                buy_ticket = getattr(buy_pos, 'ticket', 'N/A')
                if buy_ticket in used_positions:
                    continue
                
                for sell_pos in sell_profit:
                    sell_ticket = getattr(sell_pos, 'ticket', 'N/A')
                    if sell_ticket in used_positions:
                        continue
                    
                    # ‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡πÑ‡∏°‡πâ‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ
                    hedge_pairs.append({
                        'buy': buy_pos,
                        'sell': sell_pos,
                        'type': 'BUY_LOSS_SELL_PROFIT'
                    })
                    used_positions.add(buy_ticket)
                    used_positions.add(sell_ticket)
                    break  # ‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
            
            # ‡∏´‡∏≤ Sell ‡∏ï‡∏¥‡∏î‡∏•‡∏ö + Buy ‡∏Å‡∏≥‡πÑ‡∏£ (‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô)
            for sell_pos in sell_loss:
                sell_ticket = getattr(sell_pos, 'ticket', 'N/A')
                if sell_ticket in used_positions:
                    continue
                
                for buy_pos in buy_profit:
                    buy_ticket = getattr(buy_pos, 'ticket', 'N/A')
                    if buy_ticket in used_positions:
                        continue
                    
                    # ‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡πÑ‡∏°‡πâ‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ
                    hedge_pairs.append({
                        'buy': buy_pos,
                        'sell': sell_pos,
                        'type': 'SELL_LOSS_BUY_PROFIT'
                    })
                    used_positions.add(sell_ticket)
                    used_positions.add(buy_ticket)
                    break  # ‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà (‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô)
            logger.info("-" * 40)
            logger.info("üìä HEDGE PAIRING SUMMARY")
            logger.info("-" * 40)
            logger.info(f"‚úÖ Hedge pairs found: {len(hedge_pairs)}")
            logger.info(f"üìã Used positions: {len(used_positions)}")
            logger.info(f"üìã Unused positions: {len(positions) - len(used_positions)}")
            
            # Step 2: ‡∏´‡∏≤‡πÑ‡∏°‡πâ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏°‡∏≤‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° (‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô)
            for hedge_pair in hedge_pairs:
                hedge_profit = getattr(hedge_pair['buy'], 'profit', 0) + getattr(hedge_pair['sell'], 'profit', 0)
                
                # ‡∏ñ‡πâ‡∏≤ hedge pair ‡∏ï‡∏¥‡∏î‡∏•‡∏ö ‡πÉ‡∏´‡πâ‡∏´‡∏≤‡πÑ‡∏°‡πâ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏°‡∏≤‡∏ä‡πà‡∏ß‡∏¢
                if hedge_profit < 0:
                    # ‡∏´‡∏≤‡πÑ‡∏°‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏ó‡∏µ‡πà‡∏ï‡∏¥‡∏î‡∏•‡∏ö (‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô)
                    additional_positions = [pos for pos in positions 
                                          if getattr(pos, 'ticket', 'N/A') not in used_positions 
                                          and getattr(pos, 'profit', 0) > 0]
                    
                    # ‡∏•‡∏≠‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏°‡πâ‡∏ó‡∏µ‡∏•‡∏∞‡∏ï‡∏±‡∏ß‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏Å‡∏≥‡πÑ‡∏£ (‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô)
                    best_combination = None
                    best_profit = hedge_profit
                    
                    # Early termination - ‡∏•‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
                    max_attempts = min(len(additional_positions), 2)  # ‡∏•‡∏î‡∏à‡∏≤‡∏Å 3 ‡πÄ‡∏õ‡πá‡∏ô 2
                    
                    for i in range(1, min(len(additional_positions) + 1, max_attempts + 1)):
                        for combo in itertools.combinations(additional_positions, i):
                            test_positions = [hedge_pair['buy'], hedge_pair['sell']] + list(combo)
                            test_profit = sum(getattr(pos, 'profit', 0) for pos in test_positions)
                            
                            effective_min_profit = self._get_effective_min_net_profit()
                            if test_profit > best_profit and test_profit >= effective_min_profit:
                                best_combination = test_positions
                                best_profit = test_profit
                                
                                # Early break - ‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏û‡∏ö combination ‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏û‡∏≠
                                if test_profit >= effective_min_profit * 1.5:  # ‡∏Å‡∏≥‡πÑ‡∏£‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 1.5 ‡πÄ‡∏ó‡πà‡∏≤‡∏Ç‡∏≠‡∏á threshold
                                    break
                        
                        # Early break - ‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏û‡∏ö combination ‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏û‡∏≠
                        if best_combination and best_profit >= effective_min_profit * 1.5:
                            break
                    
                    if best_combination:
                        hedge_combinations.append(HedgeCombination(
                            positions=best_combination,
                            total_profit=best_profit,
                            combination_type=f"HEDGE_{hedge_pair['type']}_WITH_ADDITIONAL",
                            size=len(best_combination),
                            confidence_score=95.0,
                            reason=f"Hedge: {hedge_pair['type']} with additional profitable positions"
                        ))
                        logger.info(f"‚úÖ Complete hedge combination found: ${best_profit:.2f}")
                    else:
                        # ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡∏£‡∏ß‡∏°‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡πÑ‡∏£ - ‡∏Ç‡πâ‡∏≤‡∏° Dynamic Re-pairing ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß
                        pass
                else:
                    # ‡∏ñ‡πâ‡∏≤ hedge pair ‡∏Å‡∏≥‡πÑ‡∏£‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß
                    hedge_combinations.append(HedgeCombination(
                        positions=[hedge_pair['buy'], hedge_pair['sell']],
                        total_profit=hedge_profit,
                        combination_type=f"HEDGE_{hedge_pair['type']}_ONLY",
                        size=2,
                        confidence_score=90.0,
                        reason=f"Hedge: {hedge_pair['type']} (profitable pair)"
                    ))
            
            # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏ú‡∏•‡∏£‡∏ß‡∏°‡∏Å‡∏≥‡πÑ‡∏£ (‡∏°‡∏≤‡∏Å‡∏™‡∏∏‡∏î‡∏Å‡πà‡∏≠‡∏ô)
            hedge_combinations.sort(key=lambda x: x.total_profit, reverse=True)
            
            return hedge_combinations
            
        except Exception as e:
            logger.error(f"‚ùå Error finding hedge combinations: {e}")
            return []
    
    def _find_additional_profitable_positions(self, positions: List[Any], hedge_buy: Any, hedge_sell: Any) -> List[Any]:
        """‡∏´‡∏≤‡πÑ‡∏°‡πâ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡πÑ‡∏£‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏°‡∏µ Hedge ‡∏Å‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏≠‡∏∑‡πà‡∏ô (‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô)"""
        try:
            # ‡∏´‡∏≤‡πÑ‡∏°‡πâ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡πÑ‡∏£ (‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô - ‡πÉ‡∏ä‡πâ list comprehension)
            additional_positions = [pos for pos in positions 
                                  if pos != hedge_buy and pos != hedge_sell 
                                  and getattr(pos, 'profit', 0) > 0]
            
            return additional_positions
            
        except Exception as e:
            logger.error(f"‚ùå Error finding additional positions: {e}")
            return []
    
    def _find_existing_hedge_pairs(self, positions: List[Any]) -> List[dict]:
        """‡∏´‡∏≤ Hedge pairs ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß"""
        try:
            hedge_pairs = []
            used_positions = set()
            
            # ‡πÅ‡∏¢‡∏Å‡πÑ‡∏°‡πâ Buy ‡πÅ‡∏•‡∏∞ Sell
            buy_positions = [p for p in positions if getattr(p, 'type', 0) == 0]
            sell_positions = [p for p in positions if getattr(p, 'type', 0) == 1]
            
            # ‡∏´‡∏≤ Buy ‡∏ï‡∏¥‡∏î‡∏•‡∏ö + Sell ‡∏Å‡∏≥‡πÑ‡∏£
            for buy_pos in buy_positions:
                if getattr(buy_pos, 'profit', 0) < 0:  # Buy ‡∏ï‡∏¥‡∏î‡∏•‡∏ö
                    buy_ticket = getattr(buy_pos, 'ticket', 'N/A')
                    if buy_ticket in used_positions:
                        continue
                    
                    for sell_pos in sell_positions:
                        if getattr(sell_pos, 'profit', 0) > 0:  # Sell ‡∏Å‡∏≥‡πÑ‡∏£
                            sell_ticket = getattr(sell_pos, 'ticket', 'N/A')
                            if sell_ticket in used_positions:
                                continue
                            
                            # ‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡πÑ‡∏°‡πâ‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ
                            total_profit = getattr(buy_pos, 'profit', 0) + getattr(sell_pos, 'profit', 0)
                            hedge_pairs.append({
                                'buy': buy_pos,
                                'sell': sell_pos,
                                'total_profit': total_profit,
                                'type': 'BUY_LOSS_SELL_PROFIT',
                                'positions': [buy_pos, sell_pos]
                            })
                            used_positions.add(buy_ticket)
                            used_positions.add(sell_ticket)
                            # ‡∏û‡∏ö hedge pair
                            break
            
            # ‡∏´‡∏≤ Sell ‡∏ï‡∏¥‡∏î‡∏•‡∏ö + Buy ‡∏Å‡∏≥‡πÑ‡∏£
            for sell_pos in sell_positions:
                if getattr(sell_pos, 'profit', 0) < 0:  # Sell ‡∏ï‡∏¥‡∏î‡∏•‡∏ö
                    sell_ticket = getattr(sell_pos, 'ticket', 'N/A')
                    if sell_ticket in used_positions:
                        continue
                    
                    for buy_pos in buy_positions:
                        if getattr(buy_pos, 'profit', 0) > 0:  # Buy ‡∏Å‡∏≥‡πÑ‡∏£
                            buy_ticket = getattr(buy_pos, 'ticket', 'N/A')
                            if buy_ticket in used_positions:
                                continue
                            
                            # ‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡πÑ‡∏°‡πâ‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ
                            total_profit = getattr(sell_pos, 'profit', 0) + getattr(buy_pos, 'profit', 0)
                            hedge_pairs.append({
                                'buy': buy_pos,
                                'sell': sell_pos,
                                'total_profit': total_profit,
                                'type': 'SELL_LOSS_BUY_PROFIT',
                                'positions': [sell_pos, buy_pos]
                            })
                            used_positions.add(sell_ticket)
                            used_positions.add(buy_ticket)
                            # ‡∏û‡∏ö hedge pair
                            break
            
            return hedge_pairs
            
        except Exception as e:
            logger.error(f"‚ùå Error finding existing hedge pairs: {e}")
            return []
    
    def _find_single_side_profitable(self, positions: List[Any]) -> List[HedgeCombination]:
        """üîç ‡∏´‡∏≤‡πÑ‡∏°‡πâ‡∏ù‡∏±‡πà‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏ó‡∏µ‡πà P&L ‡∏£‡∏ß‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏ö‡∏ß‡∏Å (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏°‡πâ‡∏ù‡∏±‡πà‡∏á‡∏ï‡∏£‡∏á‡∏Ç‡πâ‡∏≤‡∏°) - DISABLED"""
        try:
            # üö´ DISABLED: ‡∏´‡πâ‡∏≤‡∏°‡∏õ‡∏¥‡∏î‡πÑ‡∏°‡πâ‡∏ù‡∏±‡πà‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß - ‡∏ï‡πâ‡∏≠‡∏á‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà Hedge ‡πÄ‡∏™‡∏°‡∏≠
            if not self.allow_single_side_closing:
                logger.info("üö´ Single side closing DISABLED - Force Hedge Pairing only")
                return []
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÑ‡∏°‡πâ‡∏ù‡∏±‡πà‡∏á‡∏ï‡∏£‡∏á‡∏Ç‡πâ‡∏≤‡∏°‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            buy_positions = [pos for pos in positions if getattr(pos, 'type', 0) == 0]
            sell_positions = [pos for pos in positions if getattr(pos, 'type', 0) == 1]
            
            # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡πÑ‡∏°‡πâ‡∏ù‡∏±‡πà‡∏á‡∏ï‡∏£‡∏á‡∏Ç‡πâ‡∏≤‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏ù‡∏±‡πà‡∏á ‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≤‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ
            if len(buy_positions) > 0 and len(sell_positions) > 0:
                logger.info("‚ö†Ô∏è Both BUY and SELL positions exist - skipping single side closing")
                return []
            
            # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡πÑ‡∏°‡πâ‡∏ù‡∏±‡πà‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô ‡πÉ‡∏´‡πâ‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡∏£‡∏ß‡∏°‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡πÑ‡∏£
            if len(buy_positions) >= 2:
                logger.info("üîç Only BUY positions found - looking for profitable BUY combinations")
                return self._find_single_side_combinations(buy_positions, "BUY_ONLY")
            elif len(sell_positions) >= 2:
                logger.info("üîç Only SELL positions found - looking for profitable SELL combinations")
                return self._find_single_side_combinations(sell_positions, "SELL_ONLY")
            else:
                logger.info("‚ö†Ô∏è Not enough positions for single side closing (need at least 2)")
                return []
                
        except Exception as e:
            logger.error(f"‚ùå Error in find single side profitable: {e}")
            return []
    
    def _find_single_side_combinations(self, positions: List[Any], side_type: str) -> List[HedgeCombination]:
        """üîç ‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡∏£‡∏ß‡∏°‡πÑ‡∏°‡πâ‡∏ù‡∏±‡πà‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡πÑ‡∏£"""
        try:
            combinations = []
            used_positions = set()
            
            # ‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡∏£‡∏ß‡∏° 2-4 ‡πÑ‡∏°‡πâ
            for combo_size in range(2, min(5, len(positions) + 1)):
                for combo in self._generate_combinations(positions, combo_size):
                    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πâ‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥
                    combo_tickets = [getattr(pos, 'ticket', 'N/A') for pos in combo]
                    if any(ticket in used_positions for ticket in combo_tickets):
                        continue
                    
                    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Å‡∏≥‡πÑ‡∏£‡∏£‡∏ß‡∏°
                    total_profit = sum(getattr(pos, 'profit', 0) for pos in combo)
                    
                    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Å‡∏≥‡πÑ‡∏£‡∏£‡∏ß‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏ö‡∏ß‡∏Å
                    if total_profit >= self.min_net_profit:
                        # ‡∏™‡∏£‡πâ‡∏≤‡∏á HedgeCombination
                        combination = HedgeCombination(
                            positions=combo,
                            total_profit=total_profit,
                            combination_type=f"{side_type}_{combo_size}",
                            size=len(combo),
                            confidence_score=min(95.0, 70.0 + (total_profit * 2)),
                            reason=f"Single side profitable: {side_type} {combo_size} positions"
                        )
                        combinations.append(combination)
                        
                        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏°‡πâ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß
                        used_positions.update(combo_tickets)
            
            return combinations
            
        except Exception as e:
            logger.error(f"‚ùå Error in find single side combinations: {e}")
            return []
    
    def _generate_combinations(self, positions: List[Any], combo_size: int) -> List[List[Any]]:
        """üîç ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏£‡∏ß‡∏°‡πÑ‡∏°‡πâ‡∏ï‡∏≤‡∏°‡∏Ç‡∏ô‡∏≤‡∏î‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î"""
        try:
            from itertools import combinations
            return list(combinations(positions, combo_size))
        except Exception as e:
            logger.error(f"‚ùå Error generating combinations: {e}")
            return []
    
    def _find_helping_combinations(self, unpaired_profitable: List[Any], existing_hedge_pairs: List[dict]) -> List[HedgeCombination]:
        """‡∏´‡∏≤‡πÑ‡∏°‡πâ‡∏Å‡∏≥‡πÑ‡∏£‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏π‡πà‡πÑ‡∏õ‡∏ä‡πà‡∏ß‡∏¢ Hedge pairs ‡∏ó‡∏µ‡πà‡∏ï‡∏¥‡∏î‡∏•‡∏ö"""
        try:
            helping_combinations = []
            
            if not unpaired_profitable or not existing_hedge_pairs:
                logger.info("üí§ No unpaired profitable positions or existing hedge pairs to help")
                return helping_combinations
            
            # ‡∏´‡∏≤ Hedge pairs ‡∏ó‡∏µ‡πà‡∏ï‡∏¥‡∏î‡∏•‡∏ö
            losing_hedge_pairs = [pair for pair in existing_hedge_pairs if pair['total_profit'] < 0]
            
            if not losing_hedge_pairs:
                logger.info("üí§ No losing hedge pairs to help")
                return helping_combinations
            
            logger.info("-" * 40)
            logger.info("üîç HELPING COMBINATIONS ANALYSIS")
            logger.info("-" * 40)
            logger.info(f"üí∞ Unpaired profitable positions: {len(unpaired_profitable)}")
            logger.info(f"üìâ Losing hedge pairs to help: {len(losing_hedge_pairs)}")
            
            # ‡∏•‡∏≠‡∏á‡∏ó‡∏∏‡∏Å‡∏Å‡∏≤‡∏£‡∏£‡∏ß‡∏°‡∏Ç‡∏≠‡∏á‡πÑ‡∏°‡πâ‡∏Å‡∏≥‡πÑ‡∏£‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏π‡πà
            for size in range(1, len(unpaired_profitable) + 1):
                for profitable_combo in itertools.combinations(unpaired_profitable, size):
                    profitable_total = sum(getattr(pos, 'profit', 0) for pos in profitable_combo)
                    
                    # ‡∏•‡∏≠‡∏á‡∏ä‡πà‡∏ß‡∏¢ Hedge pairs ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏π‡πà
                    for hedge_pair in losing_hedge_pairs:
                        combined_profit = profitable_total + hedge_pair['total_profit']
                        
                        logger.info(f"üîç Testing: {len(profitable_combo)} profitable positions (${profitable_total:.2f}) + hedge pair (${hedge_pair['total_profit']:.2f}) = ${combined_profit:.2f}")
                        
                        if combined_profit >= self.min_net_profit:
                            # ‡∏£‡∏ß‡∏°‡πÑ‡∏°‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
                            all_positions = list(profitable_combo) + hedge_pair['positions']
                            
                            helping_combinations.append(HedgeCombination(
                                positions=all_positions,
                                total_profit=combined_profit,
                                combination_type=f"HELPING_{hedge_pair['type']}",
                                size=len(all_positions),
                                confidence_score=95.0,
                                reason=f"Unpaired profitable positions helping hedge pair: {hedge_pair['type']}"
                            ))
                            
                            logger.info(f"‚úÖ Found helping combination: ${combined_profit:.2f}")
            
            # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏ú‡∏•‡∏£‡∏ß‡∏°‡∏Å‡∏≥‡πÑ‡∏£ (‡∏°‡∏≤‡∏Å‡∏™‡∏∏‡∏î‡∏Å‡πà‡∏≠‡∏ô)
            helping_combinations.sort(key=lambda x: x.total_profit, reverse=True)
            
            return helping_combinations
            
        except Exception as e:
            logger.error(f"‚ùå Error finding helping combinations: {e}")
            return []
    
    def _has_hedge_pair(self, positions: List[Any], position: Any) -> bool:
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πâ‡∏ô‡∏µ‡πâ‡∏°‡∏µ Hedge ‡∏Å‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏≠‡∏∑‡πà‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≤‡∏Å used_positions)"""
        try:
            # ‡∏´‡∏≤ used_positions ‡∏à‡∏≤‡∏Å hedge pairs ‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡πâ‡∏ß
            used_positions = set()
            
            # ‡∏´‡∏≤ hedge pairs ‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡πâ‡∏ß
            buy_positions = [p for p in positions if getattr(p, 'type', 0) == 0]
            sell_positions = [p for p in positions if getattr(p, 'type', 0) == 1]
            
            # ‡∏´‡∏≤ Buy ‡∏ï‡∏¥‡∏î‡∏•‡∏ö + Sell ‡∏Å‡∏≥‡πÑ‡∏£
            for buy_pos in buy_positions:
                if getattr(buy_pos, 'profit', 0) < 0:
                    buy_ticket = getattr(buy_pos, 'ticket', 'N/A')
                    if buy_ticket in used_positions:
                        continue
                    
                    for sell_pos in sell_positions:
                        if getattr(sell_pos, 'profit', 0) > 0:
                            sell_ticket = getattr(sell_pos, 'ticket', 'N/A')
                            if sell_ticket in used_positions:
                                continue
                            
                            used_positions.add(buy_ticket)
                            used_positions.add(sell_ticket)
                            break
            
            # ‡∏´‡∏≤ Sell ‡∏ï‡∏¥‡∏î‡∏•‡∏ö + Buy ‡∏Å‡∏≥‡πÑ‡∏£
            for sell_pos in sell_positions:
                if getattr(sell_pos, 'profit', 0) < 0:
                    sell_ticket = getattr(sell_pos, 'ticket', 'N/A')
                    if sell_ticket in used_positions:
                        continue
                    
                    for buy_pos in buy_positions:
                        if getattr(buy_pos, 'profit', 0) > 0:
                            buy_ticket = getattr(buy_pos, 'ticket', 'N/A')
                            if buy_ticket in used_positions:
                                continue
                            
                            used_positions.add(sell_ticket)
                            used_positions.add(buy_ticket)
                            break
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πâ‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô used_positions ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            pos_ticket = getattr(position, 'ticket', 'N/A')
            return pos_ticket in used_positions
            
        except Exception as e:
            logger.error(f"‚ùå Error checking hedge pair: {e}")
            return False
    
    def _get_combination_type(self, positions: List[Any]) -> str:
        """üìä ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà"""
        try:
            sell_count = sum(1 for pos in positions if getattr(pos, 'type', 0) == 1)
            buy_count = sum(1 for pos in positions if getattr(pos, 'type', 0) == 0)
            
            if sell_count > buy_count:
                return f"SELL_MAJORITY_{sell_count}S+{buy_count}B"
            elif buy_count > sell_count:
                return f"BUY_MAJORITY_{buy_count}B+{sell_count}S"
            else:
                return f"BALANCED_{sell_count}S+{buy_count}B"
                
        except Exception as e:
            logger.error(f"‚ùå Error calculating combination type: {e}")
            return "UNKNOWN"
    
    
    def _find_advanced_pairing_combinations(self, positions: List[Any]) -> List[HedgeCombination]:
        """üß† ‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á - ‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏´‡∏•‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢"""
        try:
            if len(positions) < 2:
                return []
            
            advanced_combinations = []
            
            # 1. Multi-Level Pairing - ‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏∞‡∏î‡∏±‡∏ö (2-3-4-5 ‡πÑ‡∏°‡πâ)
            if self.multi_level_pairing:
                multi_level = self._find_multi_level_pairing(positions)
                advanced_combinations.extend(multi_level)
            
            # 2. Cascade Pairing - ‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡πÅ‡∏ö‡∏ö‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á (A+B, A+B+C, A+B+C+D)
            if self.cascade_pairing:
                cascade = self._find_cascade_pairing(positions)
                advanced_combinations.extend(cascade)
            
            # 3. Reverse Pairing - ‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö (‡∏´‡∏≤‡πÑ‡∏°‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏à‡∏≤‡∏Å‡πÑ‡∏°‡πâ‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏µ‡∏¢‡∏°‡∏≤‡∏Å)
            if self.reverse_pairing:
                reverse = self._find_reverse_pairing(positions)
                advanced_combinations.extend(reverse)
            
            # 4. Smart Priority Pairing - ‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç (‡πÑ‡∏°‡πâ‡πÄ‡∏™‡∏µ‡∏¢‡∏°‡∏≤‡∏Å‡∏Å‡πà‡∏≠‡∏ô)
            if self.smart_priority_pairing:
                smart_priority = self._find_smart_priority_pairing(positions)
                advanced_combinations.extend(smart_priority)
            
            # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏Å‡∏≥‡πÑ‡∏£ (‡∏°‡∏≤‡∏Å‡πÑ‡∏õ‡∏ô‡πâ‡∏≠‡∏¢)
            advanced_combinations.sort(key=lambda x: x.total_profit, reverse=True)
            
            return advanced_combinations[:10]  # ‡∏™‡πà‡∏á‡∏Ñ‡∏∑‡∏ô‡πÅ‡∏Ñ‡πà 10 ‡∏≠‡∏±‡∏ô‡πÅ‡∏£‡∏Å
            
        except Exception as e:
            logger.error(f"‚ùå Error in advanced pairing: {e}")
            return []
    
    def _find_multi_level_pairing(self, positions: List[Any]) -> List[HedgeCombination]:
        """üî¢ ‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏∞‡∏î‡∏±‡∏ö (2-3-4-5 ‡πÑ‡∏°‡πâ)"""
        try:
            combinations = []
            
            # ‡πÅ‡∏¢‡∏Å‡πÑ‡∏°‡πâ Buy ‡πÅ‡∏•‡∏∞ Sell
            buy_positions = [p for p in positions if getattr(p, 'type', 0) == 0]
            sell_positions = [p for p in positions if getattr(p, 'type', 0) == 1]
            
            # ‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà 2 ‡πÑ‡∏°‡πâ (Buy + Sell)
            for buy_pos in buy_positions:
                for sell_pos in sell_positions:
                    total_profit = getattr(buy_pos, 'profit', 0) + getattr(sell_pos, 'profit', 0)
                    if total_profit >= self.min_net_profit:
                        combinations.append(HedgeCombination(
                            positions=[buy_pos, sell_pos],
                            total_profit=total_profit,
                            combination_type="MULTI_LEVEL_2",
                            size=2,
                            confidence_score=min(90.0, 60.0 + (total_profit * 10)),
                            reason=f"Multi-level 2: ${total_profit:.2f}"
                        ))
            
            # ‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà 3 ‡πÑ‡∏°‡πâ (Buy + Sell + Helper)
            for buy_pos in buy_positions:
                for sell_pos in sell_positions:
                    for helper_pos in positions:
                        if helper_pos not in [buy_pos, sell_pos]:
                            total_profit = (getattr(buy_pos, 'profit', 0) + 
                                          getattr(sell_pos, 'profit', 0) + 
                                          getattr(helper_pos, 'profit', 0))
                            if total_profit >= self.min_net_profit:
                                combinations.append(HedgeCombination(
                                    positions=[buy_pos, sell_pos, helper_pos],
                                    total_profit=total_profit,
                                    combination_type="MULTI_LEVEL_3",
                                    size=3,
                                    confidence_score=min(95.0, 70.0 + (total_profit * 8)),
                                    reason=f"Multi-level 3: ${total_profit:.2f}"
                                ))
            
            return combinations[:5]  # ‡∏™‡πà‡∏á‡∏Ñ‡∏∑‡∏ô‡πÅ‡∏Ñ‡πà 5 ‡∏≠‡∏±‡∏ô‡πÅ‡∏£‡∏Å
            
        except Exception as e:
            logger.error(f"‚ùå Error in multi-level pairing: {e}")
            return []
    
    def _find_cascade_pairing(self, positions: List[Any]) -> List[HedgeCombination]:
        """üîÑ ‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡πÅ‡∏ö‡∏ö‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á (A+B, A+B+C, A+B+C+D)"""
        try:
            combinations = []
            
            # ‡∏´‡∏≤‡πÑ‡∏°‡πâ‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏µ‡∏¢‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏Å‡πà‡∏≠‡∏ô
            losing_positions = [p for p in positions if getattr(p, 'profit', 0) < 0]
            losing_positions.sort(key=lambda x: getattr(x, 'profit', 0))  # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏™‡∏µ‡∏¢‡∏°‡∏≤‡∏Å‡πÑ‡∏õ‡∏ô‡πâ‡∏≠‡∏¢
            
            # ‡∏´‡∏≤‡πÑ‡∏°‡πâ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡πÑ‡∏£‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
            profitable_positions = [p for p in positions if getattr(p, 'profit', 0) > 0]
            profitable_positions.sort(key=lambda x: getattr(x, 'profit', 0), reverse=True)  # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏à‡∏≤‡∏Å‡∏Å‡∏≥‡πÑ‡∏£‡∏°‡∏≤‡∏Å‡πÑ‡∏õ‡∏ô‡πâ‡∏≠‡∏¢
            
            # Cascade: ‡πÑ‡∏°‡πâ‡πÄ‡∏™‡∏µ‡∏¢ + ‡πÑ‡∏°‡πâ‡∏Å‡∏≥‡πÑ‡∏£ (‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á)
            for losing_pos in losing_positions[:3]:  # ‡πÑ‡∏°‡πâ‡πÄ‡∏™‡∏µ‡∏¢‡∏°‡∏≤‡∏Å 3 ‡∏≠‡∏±‡∏ô‡πÅ‡∏£‡∏Å
                for profit_pos in profitable_positions[:5]:  # ‡πÑ‡∏°‡πâ‡∏Å‡∏≥‡πÑ‡∏£ 5 ‡∏≠‡∏±‡∏ô‡πÅ‡∏£‡∏Å
                    total_profit = getattr(losing_pos, 'profit', 0) + getattr(profit_pos, 'profit', 0)
                    if total_profit >= self.min_net_profit:
                        combinations.append(HedgeCombination(
                            positions=[losing_pos, profit_pos],
                            total_profit=total_profit,
                            combination_type="CASCADE_2",
                            size=2,
                            confidence_score=min(85.0, 65.0 + (total_profit * 12)),
                            reason=f"Cascade 2: ${total_profit:.2f}"
                        ))
            
            return combinations[:5]  # ‡∏™‡πà‡∏á‡∏Ñ‡∏∑‡∏ô‡πÅ‡∏Ñ‡πà 5 ‡∏≠‡∏±‡∏ô‡πÅ‡∏£‡∏Å
            
        except Exception as e:
            logger.error(f"‚ùå Error in cascade pairing: {e}")
            return []
    
    def _find_reverse_pairing(self, positions: List[Any]) -> List[HedgeCombination]:
        """üîÑ ‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö (‡∏´‡∏≤‡πÑ‡∏°‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏à‡∏≤‡∏Å‡πÑ‡∏°‡πâ‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏µ‡∏¢‡∏°‡∏≤‡∏Å)"""
        try:
            combinations = []
            
            # ‡∏´‡∏≤‡πÑ‡∏°‡πâ‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏µ‡∏¢‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
            losing_positions = [p for p in positions if getattr(p, 'profit', 0) < -5.0]  # ‡πÄ‡∏™‡∏µ‡∏¢‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ $5
            losing_positions.sort(key=lambda x: getattr(x, 'profit', 0))  # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏™‡∏µ‡∏¢‡∏°‡∏≤‡∏Å‡πÑ‡∏õ‡∏ô‡πâ‡∏≠‡∏¢
            
            # ‡∏´‡∏≤‡πÑ‡∏°‡πâ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡πÑ‡∏£ (‡πÄ‡∏õ‡πá‡∏ô Helper)
            helper_positions = [p for p in positions if getattr(p, 'profit', 0) > 0]
            helper_positions.sort(key=lambda x: getattr(x, 'profit', 0), reverse=True)  # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏à‡∏≤‡∏Å‡∏Å‡∏≥‡πÑ‡∏£‡∏°‡∏≤‡∏Å‡πÑ‡∏õ‡∏ô‡πâ‡∏≠‡∏¢
            
            # Reverse: ‡πÑ‡∏°‡πâ‡πÄ‡∏™‡∏µ‡∏¢‡∏°‡∏≤‡∏Å + ‡πÑ‡∏°‡πâ‡∏ä‡πà‡∏ß‡∏¢
            for losing_pos in losing_positions[:2]:  # ‡πÑ‡∏°‡πâ‡πÄ‡∏™‡∏µ‡∏¢‡∏°‡∏≤‡∏Å 2 ‡∏≠‡∏±‡∏ô‡πÅ‡∏£‡∏Å
                for helper_pos in helper_positions[:3]:  # ‡πÑ‡∏°‡πâ‡∏ä‡πà‡∏ß‡∏¢ 3 ‡∏≠‡∏±‡∏ô‡πÅ‡∏£‡∏Å
                    total_profit = getattr(losing_pos, 'profit', 0) + getattr(helper_pos, 'profit', 0)
                    if total_profit >= self.min_net_profit:
                        combinations.append(HedgeCombination(
                            positions=[losing_pos, helper_pos],
                            total_profit=total_profit,
                            combination_type="REVERSE_PAIRING",
                            size=2,
                            confidence_score=min(95.0, 75.0 + (total_profit * 15)),
                            reason=f"Reverse pairing: ${total_profit:.2f}"
                        ))
            
            return combinations[:3]  # ‡∏™‡πà‡∏á‡∏Ñ‡∏∑‡∏ô‡πÅ‡∏Ñ‡πà 3 ‡∏≠‡∏±‡∏ô‡πÅ‡∏£‡∏Å
            
        except Exception as e:
            logger.error(f"‚ùå Error in reverse pairing: {e}")
            return []
    
    def _find_smart_priority_pairing(self, positions: List[Any]) -> List[HedgeCombination]:
        """üß† ‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç (‡πÑ‡∏°‡πâ‡πÄ‡∏™‡∏µ‡∏¢‡∏°‡∏≤‡∏Å‡∏Å‡πà‡∏≠‡∏ô)"""
        try:
            combinations = []
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Priority Score ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÑ‡∏°‡πâ
            priority_positions = []
            for pos in positions:
                profit = getattr(pos, 'profit', 0)
                volume = getattr(pos, 'volume', 0.01)
                time_open = getattr(pos, 'time', 0)
                
                # Priority Score = (‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô * ‡∏Ç‡∏ô‡∏≤‡∏î * ‡πÄ‡∏ß‡∏•‡∏≤) / 1000
                priority_score = abs(profit) * volume * (time.time() - time_open) / 1000
                priority_positions.append((pos, priority_score))
            
            # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏° Priority Score (‡∏°‡∏≤‡∏Å‡πÑ‡∏õ‡∏ô‡πâ‡∏≠‡∏¢)
            priority_positions.sort(key=lambda x: x[1], reverse=True)
            
            # ‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡πÑ‡∏°‡πâ‡∏ó‡∏µ‡πà‡∏°‡∏µ Priority ‡∏™‡∏π‡∏á
            for i, (pos1, score1) in enumerate(priority_positions[:5]):
                for j, (pos2, score2) in enumerate(priority_positions[i+1:6]):
                    total_profit = getattr(pos1, 'profit', 0) + getattr(pos2, 'profit', 0)
                    if total_profit >= self.min_net_profit:
                        combinations.append(HedgeCombination(
                            positions=[pos1, pos2],
                            total_profit=total_profit,
                            combination_type="SMART_PRIORITY",
                            size=2,
                            confidence_score=min(90.0, 70.0 + (total_profit * 10)),
                            reason=f"Smart priority: ${total_profit:.2f}"
                        ))
            
            return combinations[:3]  # ‡∏™‡πà‡∏á‡∏Ñ‡∏∑‡∏ô‡πÅ‡∏Ñ‡πà 3 ‡∏≠‡∏±‡∏ô‡πÅ‡∏£‡∏Å
            
        except Exception as e:
            logger.error(f"‚ùå Error in smart priority pairing: {e}")
            return []
    
    def _find_enhanced_helping_combinations(self, positions: List[Any]) -> List[HedgeCombination]:
        """üéØ ‡∏£‡∏∞‡∏ö‡∏ö‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á"""
        try:
            if len(positions) < 2:
                return []
            
            enhanced_combinations = []
            
            # 1. Multi-Helper System - ‡πÑ‡∏°‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏´‡∏•‡∏≤‡∏¢‡∏ï‡∏±‡∏ß
            if self.multi_helper_system:
                multi_helper = self._find_multi_helper_combinations(positions)
                enhanced_combinations.extend(multi_helper)
            
            # 2. Cascade Helping - ‡∏ä‡πà‡∏ß‡∏¢‡πÅ‡∏ö‡∏ö‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á
            if self.cascade_helping:
                cascade_helping = self._find_cascade_helping_combinations(positions)
                enhanced_combinations.extend(cascade_helping)
            
            # 3. Smart Helper Selection - ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏°‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏â‡∏•‡∏≤‡∏î
            if self.smart_helper_selection:
                smart_helper = self._find_smart_helper_combinations(positions)
                enhanced_combinations.extend(smart_helper)
            
            # 4. Emergency Helper Mode - ‡πÇ‡∏´‡∏°‡∏î‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô
            if self.emergency_helper_mode:
                emergency_helper = self._find_emergency_helper_combinations(positions)
                enhanced_combinations.extend(emergency_helper)
            
            # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏Å‡∏≥‡πÑ‡∏£ (‡∏°‡∏≤‡∏Å‡πÑ‡∏õ‡∏ô‡πâ‡∏≠‡∏¢)
            enhanced_combinations.sort(key=lambda x: x.total_profit, reverse=True)
            
            return enhanced_combinations[:8]  # ‡∏™‡πà‡∏á‡∏Ñ‡∏∑‡∏ô‡πÅ‡∏Ñ‡πà 8 ‡∏≠‡∏±‡∏ô‡πÅ‡∏£‡∏Å
            
        except Exception as e:
            logger.error(f"‚ùå Error in enhanced helping: {e}")
            return []
    
    def _find_multi_helper_combinations(self, positions: List[Any]) -> List[HedgeCombination]:
        """ü§ù ‡πÑ‡∏°‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏´‡∏•‡∏≤‡∏¢‡∏ï‡∏±‡∏ß (Helper1+Helper2+Main)"""
        try:
            combinations = []
            
            # ‡∏´‡∏≤‡πÑ‡∏°‡πâ‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏µ‡∏¢‡∏°‡∏≤‡∏Å
            losing_positions = [p for p in positions if getattr(p, 'profit', 0) < -2.0]
            losing_positions.sort(key=lambda x: getattr(x, 'profit', 0))  # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏™‡∏µ‡∏¢‡∏°‡∏≤‡∏Å‡πÑ‡∏õ‡∏ô‡πâ‡∏≠‡∏¢
            
            # ‡∏´‡∏≤‡πÑ‡∏°‡πâ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡πÑ‡∏£ (Helper)
            helper_positions = [p for p in positions if getattr(p, 'profit', 0) > 0]
            helper_positions.sort(key=lambda x: getattr(x, 'profit', 0), reverse=True)  # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏à‡∏≤‡∏Å‡∏Å‡∏≥‡πÑ‡∏£‡∏°‡∏≤‡∏Å‡πÑ‡∏õ‡∏ô‡πâ‡∏≠‡∏¢
            
            # Multi-Helper: ‡πÑ‡∏°‡πâ‡πÄ‡∏™‡∏µ‡∏¢ + Helper1 + Helper2
            for losing_pos in losing_positions[:2]:  # ‡πÑ‡∏°‡πâ‡πÄ‡∏™‡∏µ‡∏¢‡∏°‡∏≤‡∏Å 2 ‡∏≠‡∏±‡∏ô‡πÅ‡∏£‡∏Å
                for helper1 in helper_positions[:3]:  # Helper1
                    for helper2 in helper_positions[1:4]:  # Helper2 (‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ö Helper1)
                        if helper1 != helper2:
                            total_profit = (getattr(losing_pos, 'profit', 0) + 
                                          getattr(helper1, 'profit', 0) + 
                                          getattr(helper2, 'profit', 0))
                            if total_profit >= self.min_net_profit:
                                combinations.append(HedgeCombination(
                                    positions=[losing_pos, helper1, helper2],
                                    total_profit=total_profit,
                                    combination_type="MULTI_HELPER",
                                    size=3,
                                    confidence_score=min(95.0, 80.0 + (total_profit * 8)),
                                    reason=f"Multi-helper: ${total_profit:.2f}"
                                ))
            
            return combinations[:3]  # ‡∏™‡πà‡∏á‡∏Ñ‡∏∑‡∏ô‡πÅ‡∏Ñ‡πà 3 ‡∏≠‡∏±‡∏ô‡πÅ‡∏£‡∏Å
            
        except Exception as e:
            logger.error(f"‚ùå Error in multi-helper combinations: {e}")
            return []
    
    def _find_cascade_helping_combinations(self, positions: List[Any]) -> List[HedgeCombination]:
        """üîÑ ‡∏ä‡πà‡∏ß‡∏¢‡πÅ‡∏ö‡∏ö‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á (Helper‚ÜíMain‚ÜíHelper2)"""
        try:
            combinations = []
            
            # ‡∏´‡∏≤‡πÑ‡∏°‡πâ‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏µ‡∏¢‡∏°‡∏≤‡∏Å
            losing_positions = [p for p in positions if getattr(p, 'profit', 0) < -3.0]
            losing_positions.sort(key=lambda x: getattr(x, 'profit', 0))
            
            # ‡∏´‡∏≤‡πÑ‡∏°‡πâ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡πÑ‡∏£ (Helper)
            helper_positions = [p for p in positions if getattr(p, 'profit', 0) > 0]
            helper_positions.sort(key=lambda x: getattr(x, 'profit', 0), reverse=True)
            
            # Cascade Helping: ‡πÑ‡∏°‡πâ‡πÄ‡∏™‡∏µ‡∏¢ + Helper1 + Helper2 + Helper3
            for losing_pos in losing_positions[:1]:  # ‡πÑ‡∏°‡πâ‡πÄ‡∏™‡∏µ‡∏¢‡∏°‡∏≤‡∏Å 1 ‡∏≠‡∏±‡∏ô‡πÅ‡∏£‡∏Å
                for helper1 in helper_positions[:2]:  # Helper1
                    for helper2 in helper_positions[1:3]:  # Helper2
                        for helper3 in helper_positions[2:4]:  # Helper3
                            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ ticket
                            tickets = [getattr(helper1, 'ticket', 0), getattr(helper2, 'ticket', 0), getattr(helper3, 'ticket', 0)]
                            if len(set(tickets)) == 3:  # ‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô
                                total_profit = (getattr(losing_pos, 'profit', 0) + 
                                              getattr(helper1, 'profit', 0) + 
                                              getattr(helper2, 'profit', 0) + 
                                              getattr(helper3, 'profit', 0))
                                if total_profit >= self.min_net_profit:
                                    combinations.append(HedgeCombination(
                                        positions=[losing_pos, helper1, helper2, helper3],
                                        total_profit=total_profit,
                                        combination_type="CASCADE_HELPING",
                                        size=4,
                                        confidence_score=min(98.0, 85.0 + (total_profit * 6)),
                                        reason=f"Cascade helping: ${total_profit:.2f}"
                                    ))
            
            return combinations[:2]  # ‡∏™‡πà‡∏á‡∏Ñ‡∏∑‡∏ô‡πÅ‡∏Ñ‡πà 2 ‡∏≠‡∏±‡∏ô‡πÅ‡∏£‡∏Å
            
        except Exception as e:
            logger.error(f"‚ùå Error in cascade helping: {e}")
            return []
    
    def _find_smart_helper_combinations(self, positions: List[Any]) -> List[HedgeCombination]:
        """üß† ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏°‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏â‡∏•‡∏≤‡∏î"""
        try:
            combinations = []
            
            # ‡∏´‡∏≤‡πÑ‡∏°‡πâ‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏µ‡∏¢‡∏°‡∏≤‡∏Å
            losing_positions = [p for p in positions if getattr(p, 'profit', 0) < -1.0]
            losing_positions.sort(key=lambda x: getattr(x, 'profit', 0))
            
            # ‡∏´‡∏≤‡πÑ‡∏°‡πâ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡πÑ‡∏£ (Helper) - ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏â‡∏•‡∏≤‡∏î
            helper_positions = [p for p in positions if getattr(p, 'profit', 0) > 0]
            
            # Smart Selection: ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Helper ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏Å‡∏±‡∏ö‡πÑ‡∏°‡πâ‡πÄ‡∏™‡∏µ‡∏¢
            for losing_pos in losing_positions[:3]:
                best_helpers = []
                losing_profit = getattr(losing_pos, 'profit', 0)
                
                for helper_pos in helper_positions:
                    helper_profit = getattr(helper_pos, 'profit', 0)
                    # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Helper ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡πÑ‡∏£‡∏û‡∏≠‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ä‡πà‡∏ß‡∏¢‡πÑ‡∏°‡πâ‡πÄ‡∏™‡∏µ‡∏¢‡πÑ‡∏î‡πâ
                    if helper_profit >= abs(losing_profit) * 0.5:  # ‡∏Å‡∏≥‡πÑ‡∏£‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 50% ‡∏Ç‡∏≠‡∏á‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô
                        best_helpers.append((helper_pos, helper_profit))
                
                # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏Å‡∏≥‡πÑ‡∏£ (‡∏°‡∏≤‡∏Å‡πÑ‡∏õ‡∏ô‡πâ‡∏≠‡∏¢)
                best_helpers.sort(key=lambda x: x[1], reverse=True)
                
                # ‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏Å‡∏±‡∏ö Helper ‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
                for helper_pos, helper_profit in best_helpers[:2]:
                    total_profit = losing_profit + helper_profit
                    if total_profit >= self.min_net_profit:
                        combinations.append(HedgeCombination(
                            positions=[losing_pos, helper_pos],
                            total_profit=total_profit,
                            combination_type="SMART_HELPER",
                            size=2,
                            confidence_score=min(95.0, 75.0 + (total_profit * 12)),
                            reason=f"Smart helper: ${total_profit:.2f}"
                        ))
            
            return combinations[:4]  # ‡∏™‡πà‡∏á‡∏Ñ‡∏∑‡∏ô‡πÅ‡∏Ñ‡πà 4 ‡∏≠‡∏±‡∏ô‡πÅ‡∏£‡∏Å
            
        except Exception as e:
            logger.error(f"‚ùå Error in smart helper: {e}")
            return []
    
    def _find_emergency_helper_combinations(self, positions: List[Any]) -> List[HedgeCombination]:
        """üö® ‡πÇ‡∏´‡∏°‡∏î‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô (‡πÑ‡∏°‡πâ‡πÄ‡∏™‡∏µ‡∏¢‡∏°‡∏≤‡∏Å)"""
        try:
            combinations = []
            
            # ‡∏´‡∏≤‡πÑ‡∏°‡πâ‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏µ‡∏¢‡∏°‡∏≤‡∏Å (Emergency)
            emergency_positions = [p for p in positions if getattr(p, 'profit', 0) < -10.0]
            emergency_positions.sort(key=lambda x: getattr(x, 'profit', 0))
            
            # ‡∏´‡∏≤‡πÑ‡∏°‡πâ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡πÑ‡∏£ (Emergency Helper)
            emergency_helpers = [p for p in positions if getattr(p, 'profit', 0) > 5.0]
            emergency_helpers.sort(key=lambda x: getattr(x, 'profit', 0), reverse=True)
            
            # Emergency: ‡πÑ‡∏°‡πâ‡πÄ‡∏™‡∏µ‡∏¢‡∏°‡∏≤‡∏Å + Emergency Helper
            for emergency_pos in emergency_positions[:2]:  # ‡πÑ‡∏°‡πâ‡πÄ‡∏™‡∏µ‡∏¢‡∏°‡∏≤‡∏Å 2 ‡∏≠‡∏±‡∏ô‡πÅ‡∏£‡∏Å
                for emergency_helper in emergency_helpers[:3]:  # Emergency Helper 3 ‡∏≠‡∏±‡∏ô‡πÅ‡∏£‡∏Å
                    total_profit = (getattr(emergency_pos, 'profit', 0) + 
                                  getattr(emergency_helper, 'profit', 0))
                    if total_profit >= self.min_net_profit:
                        combinations.append(HedgeCombination(
                            positions=[emergency_pos, emergency_helper],
                            total_profit=total_profit,
                            combination_type="EMERGENCY_HELPER",
                            size=2,
                            confidence_score=min(99.0, 90.0 + (total_profit * 5)),
                            reason=f"Emergency helper: ${total_profit:.2f}"
                        ))
            
            return combinations[:2]  # ‡∏™‡πà‡∏á‡∏Ñ‡∏∑‡∏ô‡πÅ‡∏Ñ‡πà 2 ‡∏≠‡∏±‡∏ô‡πÅ‡∏£‡∏Å
            
        except Exception as e:
            logger.error(f"‚ùå Error in emergency helper: {e}")
            return []
    
    def _calculate_confidence_score(self, positions: List[Any], total_profit: float) -> float:
        """üìà ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à"""
        try:
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ï‡∏≤‡∏°‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡∏ï‡πà‡∏≤‡∏á‡πÜ
            profit_score = min(100, max(0, total_profit * 2))  # ‡∏Å‡∏≥‡πÑ‡∏£
            size_score = min(100, max(0, len(positions) * 10))  # ‡∏Ç‡∏ô‡∏≤‡∏î
            balance_score = self._calculate_balance_score(positions)  # ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏°‡∏î‡∏∏‡∏•
            
            # ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏ß‡∏°
            total_score = (profit_score + size_score + balance_score) / 3
            
            return min(100, max(0, total_score))
            
        except Exception as e:
            logger.error(f"‚ùå Error calculating confidence score: {e}")
            return 50.0
    
    def _calculate_balance_score(self, positions: List[Any]) -> float:
        """‚öñÔ∏è ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏°‡∏î‡∏∏‡∏•"""
        try:
            sell_count = sum(1 for pos in positions if getattr(pos, 'type', 0) == 1)
            buy_count = sum(1 for pos in positions if getattr(pos, 'type', 0) == 0)
            total_count = len(positions)
            
            if total_count == 0:
                return 0
            
            # ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏°‡∏î‡∏∏‡∏• (‡∏¢‡∏¥‡πà‡∏á‡∏™‡∏°‡∏î‡∏∏‡∏•‡∏¢‡∏¥‡πà‡∏á‡∏î‡∏µ)
            balance_ratio = min(sell_count, buy_count) / max(sell_count, buy_count)
            balance_score = balance_ratio * 100
            
            return balance_score
            
        except Exception as e:
            logger.error(f"‚ùå Error calculating balance score: {e}")
            return 50.0
    
    def _generate_additional_positions(self, positions: List[Any]) -> List[Any]:
        """üìà ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏°‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà"""
        try:
            additional_positions = []
            
            # ‡∏´‡∏≤‡πÑ‡∏°‡πâ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà
            unmatched_positions = self._find_unmatched_positions(positions)
            
            for pos in unmatched_positions[:self.max_additional_positions]:
                if getattr(pos, 'type', 0) == 1:  # Sell ‡∏ï‡∏¥‡∏î‡∏•‡∏ö
                    # ‡∏™‡∏£‡πâ‡∏≤‡∏á Buy ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà
                    new_buy = self._create_opposite_position(pos, "BUY")
                    if new_buy:
                        additional_positions.append(new_buy)
                
                elif getattr(pos, 'type', 0) == 0:  # Buy ‡∏ï‡∏¥‡∏î‡∏•‡∏ö
                    # ‡∏™‡∏£‡πâ‡∏≤‡∏á Sell ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà
                    new_sell = self._create_opposite_position(pos, "SELL")
                    if new_sell:
                        additional_positions.append(new_sell)
            
            logger.info(f"üìà Generated {len(additional_positions)} additional positions")
            return additional_positions
            
        except Exception as e:
            logger.error(f"‚ùå Error generating additional positions: {e}")
            return []
    
    def _find_unmatched_positions(self, positions: List[Any]) -> List[Any]:
        """üîç ‡∏´‡∏≤‡πÑ‡∏°‡πâ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà"""
        try:
            unmatched_positions = []
            
            for pos in positions:
                profit = getattr(pos, 'profit', 0)
                
                # ‡πÑ‡∏°‡πâ‡∏ï‡∏¥‡∏î‡∏•‡∏ö‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà
                if profit < 0:
                    unmatched_positions.append(pos)
            
            # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô (‡∏°‡∏≤‡∏Å‡∏™‡∏∏‡∏î‡∏Å‡πà‡∏≠‡∏ô)
            unmatched_positions.sort(key=lambda x: getattr(x, 'profit', 0))
            
            logger.info(f"üîç Found {len(unmatched_positions)} unmatched positions")
            return unmatched_positions
            
        except Exception as e:
            logger.error(f"‚ùå Error finding unmatched positions: {e}")
            return []
    
    def _create_opposite_position(self, original_pos: Any, opposite_type: str) -> Optional[Any]:
        """üîÑ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏°‡πâ‡∏ï‡∏£‡∏á‡∏Ç‡πâ‡∏≤‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà"""
        try:
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏°‡πâ‡πÉ‡∏´‡∏°‡πà (‡∏à‡∏≥‡∏•‡∏≠‡∏á)
            new_pos = type('Position', (), {
                'ticket': f"NEW_{int(time.time())}",
                'symbol': getattr(original_pos, 'symbol', 'XAUUSD'),
                'type': 0 if opposite_type == "BUY" else 1,
                'volume': self.additional_position_volume,
                'price_open': getattr(original_pos, 'price_current', 0),
                'price_current': getattr(original_pos, 'price_current', 0),
                'profit': 0.0,  # ‡πÑ‡∏°‡πâ‡πÉ‡∏´‡∏°‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≥‡πÑ‡∏£
                'time': int(time.time()),
                'comment': f"Hedge for {getattr(original_pos, 'ticket', 'unknown')}"
            })()
            
            logger.info(f"üîÑ Created {opposite_type} position for ticket {getattr(original_pos, 'ticket', 'unknown')}")
            return new_pos
            
        except Exception as e:
            logger.error(f"‚ùå Error creating opposite position: {e}")
            return None
    
    def _identify_stale_positions(self, positions: List[Any]) -> List[Any]:
        """üßπ ‡∏£‡∏∞‡∏ö‡∏∏‡πÑ‡∏°‡πâ‡∏Ñ‡πâ‡∏≤‡∏á‡∏û‡∏≠‡∏£‡πå‡∏ï"""
        try:
            stale_positions = []
            current_time = time.time()
            
            for pos in positions:
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏≤‡∏¢‡∏∏‡πÑ‡∏°‡πâ
                pos_time = getattr(pos, 'time', current_time)
                age_hours = (current_time - pos_time) / 3600
                
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô
                profit = getattr(pos, 'profit', 0)
                
                # ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡πÑ‡∏°‡πâ‡∏Ñ‡πâ‡∏≤‡∏á: ‡∏≠‡∏≤‡∏¢‡∏∏ ‚â• threshold ‡∏´‡∏£‡∏∑‡∏≠ ‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡∏´‡∏ô‡∏±‡∏Å
                is_old = age_hours >= self.stale_age_threshold_hours
                is_heavy_loss = profit <= self.stale_loss_threshold
                
                if is_old or is_heavy_loss:
                    stale_positions.append(pos)
                    logger.debug(f"üßπ Stale position: Ticket {getattr(pos, 'ticket', 'N/A')}, "
                               f"Age: {age_hours:.1f}h, Profit: ${profit:.2f}")
            
            if stale_positions:
                logger.info(f"üßπ Found {len(stale_positions)} stale positions")
            
            return stale_positions
            
        except Exception as e:
            logger.error(f"‚ùå Error identifying stale positions: {e}")
            return []
    
    def _should_include_anchors_for_stale_clearing(self, stale_positions: List[Any], all_positions: List[Any]) -> bool:
        """üßπ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡∏ß‡∏£‡πÉ‡∏ä‡πâ Anchor ‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡πÑ‡∏°‡πâ‡∏Ñ‡πâ‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"""
        try:
            if not self.stale_anchor_inclusion_enabled or not stale_positions:
                return False
            
            if self.stale_anchor_threshold_avg:
                # ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡πÑ‡∏°‡πâ‡∏Ñ‡πâ‡∏≤‡∏á
                avg_stale_loss = sum(getattr(pos, 'profit', 0) for pos in stale_positions) / len(stale_positions)
                threshold_met = avg_stale_loss <= self.stale_loss_threshold
                logger.info(f"üßπ Avg stale loss: ${avg_stale_loss:.2f}, threshold: ${self.stale_loss_threshold}")
            else:
                # ‡πÉ‡∏ä‡πâ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÑ‡∏°‡πâ‡∏Ñ‡πâ‡∏≤‡∏á ‚â• 5
                threshold_met = len(stale_positions) >= 5
                logger.info(f"üßπ Stale count: {len(stale_positions)}, threshold: 5")
            
            if threshold_met:
                logger.info("üßπ Anchor inclusion approved for stale clearing")
            
            return threshold_met
            
        except Exception as e:
            logger.error(f"‚ùå Error checking anchor inclusion: {e}")
            return False
    
    def _is_stale_position(self, position: Any) -> bool:
        """üßπ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏°‡πâ‡∏Ñ‡πâ‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"""
        try:
            current_time = time.time()
            pos_time = getattr(position, 'time', current_time)
            age_hours = (current_time - pos_time) / 3600
            profit = getattr(position, 'profit', 0)
            
            is_old = age_hours >= self.stale_age_threshold_hours
            is_heavy_loss = profit <= self.stale_loss_threshold
            
            return is_old or is_heavy_loss
            
        except Exception as e:
            logger.error(f"‚ùå Error checking if stale position: {e}")
            return False
    
    def _find_stale_clearing_combinations(self, positions: List[Any], stale_positions: List[Any]) -> List[HedgeCombination]:
        """üßπ ‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡πÑ‡∏°‡πâ‡∏Ñ‡πâ‡∏≤‡∏á‡∏û‡∏≠‡∏£‡πå‡∏ï"""
        try:
            combinations = []
            
            # ‡πÅ‡∏¢‡∏Å‡πÑ‡∏°‡πâ‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
            stale_pos = stale_positions[:10]  # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÑ‡∏°‡πâ‡∏Ñ‡πâ‡∏≤‡∏á‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 10 ‡∏ï‡∏±‡∏ß
            profitable_pos = [p for p in positions if getattr(p, 'profit', 0) > 0]
            anchor_pos = [p for p in positions if getattr(p, 'magic', None) == 789012]
            
            logger.info(f"üßπ Stale clearing: {len(stale_pos)} stale, {len(profitable_pos)} profitable, {len(anchor_pos)} anchors")
            
            # ‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå 1: ‡πÑ‡∏°‡πâ‡∏Ñ‡πâ‡∏≤‡∏á + ‡πÑ‡∏°‡πâ‡∏Å‡∏≥‡πÑ‡∏£
            for stale_combo_size in range(1, min(len(stale_pos) + 1, 6)):  # 1-5 ‡πÑ‡∏°‡πâ‡∏Ñ‡πâ‡∏≤‡∏á
                for stale_combo in itertools.combinations(stale_pos, stale_combo_size):
                    stale_loss = sum(getattr(p, 'profit', 0) for p in stale_combo)
                    
                    # ‡∏´‡∏≤‡πÑ‡∏°‡πâ‡∏Å‡∏≥‡πÑ‡∏£‡∏ó‡∏µ‡πà‡∏û‡∏≠‡∏ä‡∏î‡πÄ‡∏ä‡∏¢
                    for profit_combo_size in range(1, min(len(profitable_pos) + 1, 6)):
                        for profit_combo in itertools.combinations(profitable_pos, profit_combo_size):
                            profit_gain = sum(getattr(p, 'profit', 0) for p in profit_combo)
                            total_profit = stale_loss + profit_gain
                            
                            if total_profit >= self.min_net_profit:
                                combo_positions = list(stale_combo) + list(profit_combo)
                                
                                # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì priority score (‡πÇ‡∏ö‡∏ô‡∏±‡∏™‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÑ‡∏°‡πâ‡∏Ñ‡πâ‡∏≤‡∏á)
                                base_score = 60.0 + (total_profit * 10)
                                stale_bonus = len(stale_combo) * self.stale_priority_bonus * 100
                                priority_score = min(95.0, base_score + stale_bonus)
                                
                                combinations.append(HedgeCombination(
                                    positions=combo_positions,
                                    total_profit=total_profit,
                                    combination_type=f"STALE_CLEAR_{len(stale_combo)}S+{len(profit_combo)}P",
                                    size=len(combo_positions),
                                    confidence_score=priority_score,
                                    reason=f"Stale clearing: {len(stale_combo)} stale + {len(profit_combo)} profitable = ${total_profit:.2f}"
                                ))
            
            # ‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå 2: ‡πÑ‡∏°‡πâ‡∏Ñ‡πâ‡∏≤‡∏á + ‡πÑ‡∏°‡πâ‡∏Å‡∏≥‡πÑ‡∏£ + Anchor (‡∏ñ‡πâ‡∏≤‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï)
            if anchor_pos:
                for stale_combo_size in range(2, min(len(stale_pos) + 1, 5)):  # 2-4 ‡πÑ‡∏°‡πâ‡∏Ñ‡πâ‡∏≤‡∏á
                    for stale_combo in itertools.combinations(stale_pos, stale_combo_size):
                        stale_loss = sum(getattr(p, 'profit', 0) for p in stale_combo)
                        
                        # ‡∏£‡∏ß‡∏°‡πÑ‡∏°‡πâ‡∏Å‡∏≥‡πÑ‡∏£ + Anchor
                        helper_positions = profitable_pos + anchor_pos
                        for helper_combo_size in range(1, min(len(helper_positions) + 1, 6)):
                            for helper_combo in itertools.combinations(helper_positions, helper_combo_size):
                                helper_gain = sum(getattr(p, 'profit', 0) for p in helper_combo)
                                total_profit = stale_loss + helper_gain
                                
                                if total_profit >= self.min_net_profit:
                                    combo_positions = list(stale_combo) + list(helper_combo)
                                    anchor_count = sum(1 for p in helper_combo if getattr(p, 'magic', None) == 789012)
                                    
                                    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì priority score (‡πÇ‡∏ö‡∏ô‡∏±‡∏™‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Anchor)
                                    base_score = 70.0 + (total_profit * 12)
                                    stale_bonus = len(stale_combo) * self.stale_priority_bonus * 100
                                    anchor_bonus = anchor_count * 20  # ‡πÇ‡∏ö‡∏ô‡∏±‡∏™ Anchor
                                    priority_score = min(98.0, base_score + stale_bonus + anchor_bonus)
                                    
                                    combinations.append(HedgeCombination(
                                        positions=combo_positions,
                                        total_profit=total_profit,
                                        combination_type=f"STALE_CLEAR_{len(stale_combo)}S+{len(helper_combo)-anchor_count}P+{anchor_count}A",
                                        size=len(combo_positions),
                                        confidence_score=priority_score,
                                        reason=f"Stale+Anchor clearing: {len(stale_combo)} stale + {anchor_count} anchors = ${total_profit:.2f}"
                                    ))
            
            # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏° priority score (‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏Å‡πà‡∏≠‡∏ô)
            combinations.sort(key=lambda x: x.confidence_score, reverse=True)
            
            return combinations[:5]  # ‡∏™‡πà‡∏á‡∏Ñ‡∏∑‡∏ô‡πÅ‡∏Ñ‡πà 5 ‡∏≠‡∏±‡∏ô‡πÅ‡∏£‡∏Å
            
        except Exception as e:
            logger.error(f"‚ùå Error finding stale clearing combinations: {e}")
            return []

def create_hedge_pairing_closer(symbol: str = "XAUUSD") -> HedgePairingCloser:
    """‡∏™‡∏£‡πâ‡∏≤‡∏á Hedge Pairing Closer"""
    return HedgePairingCloser(symbol=symbol)
