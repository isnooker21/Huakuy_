# -*- coding: utf-8 -*-
"""
Price Zone Analysis & Smart Distribution System
‡∏£‡∏∞‡∏ö‡∏ö‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÇ‡∏ã‡∏ô‡∏£‡∏≤‡∏Ñ‡∏≤‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏ï‡∏±‡∏ß Orders ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ä‡∏≤‡∏ç‡∏â‡∏•‡∏≤‡∏î
"""

import logging
import MetaTrader5 as mt5
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Tuple, Any
from dataclasses import dataclass, field
from enum import Enum
import math
from calculations import Position

logger = logging.getLogger(__name__)

class ZoneHealth(Enum):
    EXCELLENT = "EXCELLENT"    # ‡∏™‡∏°‡∏î‡∏∏‡∏•‡∏î‡∏µ 80-100%
    GOOD = "GOOD"             # ‡∏™‡∏°‡∏î‡∏∏‡∏•‡∏û‡∏≠‡πÉ‡∏ä‡πâ 60-79%
    FAIR = "FAIR"             # ‡πÑ‡∏°‡πà‡∏™‡∏°‡∏î‡∏∏‡∏•‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢ 40-59%
    POOR = "POOR"             # ‡πÑ‡∏°‡πà‡∏™‡∏°‡∏î‡∏∏‡∏•‡∏°‡∏≤‡∏Å 20-39%
    CRITICAL = "CRITICAL"     # ‡∏ß‡∏¥‡∏Å‡∏§‡∏ï 0-19%

class ZoneType(Enum):
    HOT = "HOT"               # ‡πÇ‡∏ã‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ú‡πà‡∏≤‡∏ô‡∏ö‡πà‡∏≠‡∏¢
    NORMAL = "NORMAL"         # ‡πÇ‡∏ã‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥
    DEAD = "DEAD"             # ‡πÇ‡∏ã‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏≤‡∏Ñ‡∏≤‡πÑ‡∏°‡πà‡∏Ñ‡πà‡∏≠‡∏¢‡πÅ‡∏ï‡∏∞
    SUPPORT = "SUPPORT"       # ‡πÇ‡∏ã‡∏ô Support
    RESISTANCE = "RESISTANCE" # ‡πÇ‡∏ã‡∏ô Resistance

@dataclass
class PriceZone:
    zone_id: int
    price_min: float
    price_max: float
    price_center: float
    buy_orders: List[Position] = field(default_factory=list)
    sell_orders: List[Position] = field(default_factory=list)
    buy_count: int = 0
    sell_count: int = 0
    buy_volume: float = 0.0
    sell_volume: float = 0.0
    total_profit: float = 0.0
    zone_type: ZoneType = ZoneType.NORMAL
    zone_health: ZoneHealth = ZoneHealth.EXCELLENT
    balance_score: float = 100.0
    last_price_visit: Optional[datetime] = None
    visit_frequency: int = 0

@dataclass
class ZoneAnalysisResult:
    total_zones: int
    active_zones: int
    empty_zones: int
    balanced_zones: int
    imbalanced_zones: int
    critical_zones: int
    overall_health_score: float
    distribution_quality: str
    recommendations: List[str]
    zone_map: Dict[int, PriceZone]

@dataclass
class SmartEntryRecommendation:
    recommended_action: str  # BUY, SELL, WAIT
    target_zone_id: int
    target_price_range: Tuple[float, float]
    confidence_score: float
    reason: str
    alternative_zones: List[int]
    lot_size_multiplier: float

class PriceZoneAnalyzer:
    """‡∏£‡∏∞‡∏ö‡∏ö‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÇ‡∏ã‡∏ô‡∏£‡∏≤‡∏Ñ‡∏≤‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏ï‡∏±‡∏ß"""
    
    def __init__(self, symbol: str = "XAUUSD", num_zones: int = 10, zone_width_pips: float = None):
        self.symbol = symbol
        self.num_zones = num_zones
        self.zone_width_pips = zone_width_pips or self._calculate_dynamic_zone_width()
        self.zones: Dict[int, PriceZone] = {}
        self.price_history: List[Tuple[datetime, float]] = []
        self.last_analysis_time = None
        
        # ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
        self.balance_threshold = 0.3  # 30% ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡∏™‡∏°‡∏î‡∏∏‡∏•
        self.critical_threshold = 0.7  # 70% ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡∏ß‡∏¥‡∏Å‡∏§‡∏ï
        self.min_visit_frequency = 5    # ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤ Hot Zone
        self.dead_zone_hours = 24      # ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô 24 ‡∏ä‡∏°. = Dead Zone
        
    def _calculate_dynamic_zone_width(self) -> float:
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡πÇ‡∏ã‡∏ô‡πÅ‡∏ö‡∏ö Dynamic ‡∏ï‡∏≤‡∏° volatility"""
        try:
            # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ATR (Average True Range) ‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á 20 ‡πÅ‡∏ó‡πà‡∏á
            rates = mt5.copy_rates_from_pos(self.symbol, mt5.TIMEFRAME_H1, 0, 20)
            if rates is None or len(rates) == 0:
                return 20.0  # Default 20 pips ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö XAUUSD
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì ATR
            atr_values = []
            for i in range(1, len(rates)):
                high_low = rates[i]['high'] - rates[i]['low']
                high_close = abs(rates[i]['high'] - rates[i-1]['close'])
                low_close = abs(rates[i]['low'] - rates[i-1]['close'])
                true_range = max(high_low, high_close, low_close)
                atr_values.append(true_range)
            
            avg_atr = sum(atr_values) / len(atr_values) if atr_values else 20.0
            
            # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô pips ‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡πÇ‡∏ã‡∏ô
            if 'XAU' in self.symbol.upper():
                zone_width = (avg_atr / 0.1) * 0.5  # XAUUSD: ‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏Ç‡∏≠‡∏á ATR
            else:
                zone_width = (avg_atr / 0.0001) * 0.3  # Forex: 30% ‡∏Ç‡∏≠‡∏á ATR
            
            # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ç‡∏ô‡∏≤‡∏î‡πÇ‡∏ã‡∏ô
            return max(10.0, min(zone_width, 50.0))
            
        except Exception as e:
            logger.error(f"Error calculating dynamic zone width: {e}")
            return 20.0
    
    def initialize_zones(self, current_price: float, price_range_factor: float = 2.0) -> None:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ã‡∏ô‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏≠‡∏ö‡πÜ ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô"""
        try:
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ä‡πà‡∏ß‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÅ‡∏ö‡πà‡∏á‡πÇ‡∏ã‡∏ô
            if 'XAU' in self.symbol.upper():
                pip_value = 0.1  # XAUUSD
            else:
                pip_value = 0.0001  # Forex
            
            zone_width_price = self.zone_width_pips * pip_value
            total_range = zone_width_price * self.num_zones * price_range_factor
            
            # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏•‡∏∞‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î
            range_start = current_price - (total_range / 2)
            range_end = current_price + (total_range / 2)
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ã‡∏ô
            self.zones.clear()
            for i in range(self.num_zones):
                zone_min = range_start + (i * zone_width_price)
                zone_max = zone_min + zone_width_price
                zone_center = (zone_min + zone_max) / 2
                
                self.zones[i] = PriceZone(
                    zone_id=i,
                    price_min=zone_min,
                    price_max=zone_max,
                    price_center=zone_center
                )
            
            logger.info(f"üèóÔ∏è ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ã‡∏ô‡∏£‡∏≤‡∏Ñ‡∏≤ {self.num_zones} ‡πÇ‡∏ã‡∏ô")
            logger.info(f"   ‡∏ä‡πà‡∏ß‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤: {range_start:.2f} - {range_end:.2f}")
            logger.info(f"   ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡πÇ‡∏ã‡∏ô: {self.zone_width_pips:.1f} pips")
            logger.info(f"   ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: {current_price:.2f}")
            
        except Exception as e:
            logger.error(f"Error initializing zones: {e}")
    
    def update_price_history(self, price: float) -> None:
        """‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå"""
        try:
            current_time = datetime.now()
            self.price_history.append((current_time, price))
            
            # ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏Ñ‡πà 24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
            cutoff_time = current_time - timedelta(hours=24)
            self.price_history = [
                (time, p) for time, p in self.price_history 
                if time > cutoff_time
            ]
            
            # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Å‡∏≤‡∏£‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°‡∏ä‡∏°‡πÇ‡∏ã‡∏ô
            self._update_zone_visits(price, current_time)
            
        except Exception as e:
            logger.error(f"Error updating price history: {e}")
    
    def _update_zone_visits(self, price: float, timestamp: datetime) -> None:
        """‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Å‡∏≤‡∏£‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°‡∏ä‡∏°‡πÇ‡∏ã‡∏ô‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏Ñ‡∏≤"""
        try:
            for zone in self.zones.values():
                if zone.price_min <= price <= zone.price_max:
                    zone.last_price_visit = timestamp
                    zone.visit_frequency += 1
                    break
        except Exception as e:
            logger.error(f"Error updating zone visits: {e}")
    
    def classify_zones(self) -> None:
        """‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÇ‡∏ã‡∏ô‡∏ï‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°‡∏ä‡∏°‡πÅ‡∏•‡∏∞‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°"""
        try:
            current_time = datetime.now()
            
            for zone in self.zones.values():
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Dead Zone
                if zone.last_price_visit is None:
                    zone.zone_type = ZoneType.DEAD
                else:
                    time_since_visit = (current_time - zone.last_price_visit).total_seconds() / 3600
                    
                    if time_since_visit > self.dead_zone_hours:
                        zone.zone_type = ZoneType.DEAD
                    elif zone.visit_frequency >= self.min_visit_frequency:
                        zone.zone_type = ZoneType.HOT
                    else:
                        zone.zone_type = ZoneType.NORMAL
                
                # TODO: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Support/Resistance ‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï
                # ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏≤ S/R levels
                
        except Exception as e:
            logger.error(f"Error classifying zones: {e}")
    
    def analyze_position_distribution(self, positions: List[Position]) -> ZoneAnalysisResult:
        """‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏ï‡∏±‡∏ß‡∏Ç‡∏≠‡∏á Positions ‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÇ‡∏ã‡∏ô"""
        try:
            if not self.zones:
                logger.info("üéØ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö Zone: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ã‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô")
                current_price = positions[0].price_open if positions else 2000.0
                self.initialize_zones(current_price)
            
            # ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏ã‡∏ô
            for zone in self.zones.values():
                zone.buy_orders.clear()
                zone.sell_orders.clear()
                zone.buy_count = 0
                zone.sell_count = 0
                zone.buy_volume = 0.0
                zone.sell_volume = 0.0
                zone.total_profit = 0.0
            
            # ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏° Positions ‡πÄ‡∏Ç‡πâ‡∏≤‡πÇ‡∏ã‡∏ô
            for position in positions:
                zone_id = self._find_zone_for_price(position.price_open)
                if zone_id is not None:
                    zone = self.zones[zone_id]
                    
                    if position.type == 0:  # BUY
                        zone.buy_orders.append(position)
                        zone.buy_count += 1
                        zone.buy_volume += position.volume
                    else:  # SELL (type == 1)
                        zone.sell_orders.append(position)
                        zone.sell_count += 1
                        zone.sell_volume += position.volume
                    
                    zone.total_profit += position.profit
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏°‡∏î‡∏∏‡∏•‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÇ‡∏ã‡∏ô
            self._calculate_zone_balance_scores()
            
            # ‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÇ‡∏ã‡∏ô
            self.classify_zones()
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå
            result = self._generate_analysis_result()
            
            self.last_analysis_time = datetime.now()
            
            logger.info(f"üìä ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢ {len(positions)} Positions")
            logger.info(f"   ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏ß‡∏°: {result.overall_health_score:.1f}/100")
            logger.info(f"   ‡πÇ‡∏ã‡∏ô‡∏™‡∏°‡∏î‡∏∏‡∏•: {result.balanced_zones}/{result.total_zones}")
            logger.info(f"   ‡πÇ‡∏ã‡∏ô‡∏ß‡∏¥‡∏Å‡∏§‡∏ï: {result.critical_zones}")
            
            return result
            
        except Exception as e:
            logger.error(f"Error analyzing position distribution: {e}")
            return self._create_empty_result()
    
    def _find_zone_for_price(self, price: float) -> Optional[int]:
        """‡∏´‡∏≤‡πÇ‡∏ã‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î"""
        try:
            for zone_id, zone in self.zones.items():
                if zone.price_min <= price <= zone.price_max:
                    return zone_id
            
            # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÇ‡∏ã‡∏ô‡πÉ‡∏î‡πÜ ‡πÉ‡∏´‡πâ‡∏´‡∏≤‡πÇ‡∏ã‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
            closest_zone_id = None
            min_distance = float('inf')
            
            for zone_id, zone in self.zones.items():
                distance = min(
                    abs(price - zone.price_min),
                    abs(price - zone.price_max),
                    abs(price - zone.price_center)
                )
                
                if distance < min_distance:
                    min_distance = distance
                    closest_zone_id = zone_id
            
            return closest_zone_id
            
        except Exception as e:
            logger.error(f"Error finding zone for price {price}: {e}")
            return None
    
    def _calculate_zone_balance_scores(self) -> None:
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏°‡∏î‡∏∏‡∏•‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÇ‡∏ã‡∏ô"""
        try:
            for zone in self.zones.values():
                total_orders = zone.buy_count + zone.sell_count
                
                if total_orders == 0:
                    # ‡πÇ‡∏ã‡∏ô‡∏ß‡πà‡∏≤‡∏á - ‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡∏™‡∏°‡∏î‡∏∏‡∏•‡∏î‡∏µ
                    zone.balance_score = 100.0
                    zone.zone_health = ZoneHealth.EXCELLENT
                elif total_orders == 1:
                    # ‡∏°‡∏µ order ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß - ‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡∏™‡∏°‡∏î‡∏∏‡∏•‡∏û‡∏≠‡πÉ‡∏ä‡πâ
                    zone.balance_score = 70.0
                    zone.zone_health = ZoneHealth.GOOD
                else:
                    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏°‡πà‡∏™‡∏°‡∏î‡∏∏‡∏•
                    buy_ratio = zone.buy_count / total_orders
                    sell_ratio = zone.sell_count / total_orders
                    imbalance = abs(buy_ratio - sell_ratio)
                    
                    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô (0-100)
                    balance_score = (1 - imbalance) * 100
                    zone.balance_score = balance_score
                    
                    # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î Health Level
                    if balance_score >= 80:
                        zone.zone_health = ZoneHealth.EXCELLENT
                    elif balance_score >= 60:
                        zone.zone_health = ZoneHealth.GOOD
                    elif balance_score >= 40:
                        zone.zone_health = ZoneHealth.FAIR
                    elif balance_score >= 20:
                        zone.zone_health = ZoneHealth.POOR
                    else:
                        zone.zone_health = ZoneHealth.CRITICAL
                        
        except Exception as e:
            logger.error(f"Error calculating zone balance scores: {e}")
    
    def _generate_analysis_result(self) -> ZoneAnalysisResult:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå"""
        try:
            total_zones = len(self.zones)
            active_zones = sum(1 for zone in self.zones.values() 
                             if zone.buy_count + zone.sell_count > 0)
            empty_zones = total_zones - active_zones
            
            # ‡∏ô‡∏±‡∏ö‡πÇ‡∏ã‡∏ô‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
            health_counts = {health: 0 for health in ZoneHealth}
            for zone in self.zones.values():
                health_counts[zone.zone_health] += 1
            
            balanced_zones = (health_counts[ZoneHealth.EXCELLENT] + 
                            health_counts[ZoneHealth.GOOD])
            imbalanced_zones = (health_counts[ZoneHealth.FAIR] + 
                              health_counts[ZoneHealth.POOR])
            critical_zones = health_counts[ZoneHealth.CRITICAL]
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏ß‡∏°
            total_score = sum(zone.balance_score for zone in self.zones.values())
            overall_health_score = total_score / total_zones if total_zones > 0 else 0
            
            # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢
            if overall_health_score >= 80:
                distribution_quality = "‡∏î‡∏µ‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°"
            elif overall_health_score >= 60:
                distribution_quality = "‡∏î‡∏µ"
            elif overall_health_score >= 40:
                distribution_quality = "‡∏û‡∏≠‡πÉ‡∏ä‡πâ"
            elif overall_health_score >= 20:
                distribution_quality = "‡πÅ‡∏¢‡πà"
            else:
                distribution_quality = "‡∏ß‡∏¥‡∏Å‡∏§‡∏ï"
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
            recommendations = self._generate_recommendations(
                empty_zones, imbalanced_zones, critical_zones
            )
            
            return ZoneAnalysisResult(
                total_zones=total_zones,
                active_zones=active_zones,
                empty_zones=empty_zones,
                balanced_zones=balanced_zones,
                imbalanced_zones=imbalanced_zones,
                critical_zones=critical_zones,
                overall_health_score=overall_health_score,
                distribution_quality=distribution_quality,
                recommendations=recommendations,
                zone_map=self.zones.copy()
            )
            
        except Exception as e:
            logger.error(f"Error generating analysis result: {e}")
            return self._create_empty_result()
    
    def _generate_recommendations(self, empty_zones: int, imbalanced_zones: int, 
                                critical_zones: int) -> List[str]:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á"""
        recommendations = []
        
        try:
            if critical_zones > 0:
                recommendations.append(f"üö® ‡∏°‡∏µ {critical_zones} ‡πÇ‡∏ã‡∏ô‡∏ß‡∏¥‡∏Å‡∏§‡∏ï - ‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏™‡∏°‡∏î‡∏∏‡∏•‡∏î‡πà‡∏ß‡∏ô")
            
            if imbalanced_zones > 3:
                recommendations.append(f"‚ö†Ô∏è ‡∏°‡∏µ {imbalanced_zones} ‡πÇ‡∏ã‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏°‡∏î‡∏∏‡∏• - ‡∏Ñ‡∏ß‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢ Orders")
            
            if empty_zones > 5:
                recommendations.append(f"üìç ‡∏°‡∏µ {empty_zones} ‡πÇ‡∏ã‡∏ô‡∏ß‡πà‡∏≤‡∏á - ‡∏Ñ‡∏ß‡∏£‡πÄ‡∏ï‡∏¥‡∏° Orders")
            
            # ‡∏´‡∏≤‡πÇ‡∏ã‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞
            buy_heavy_zones = []
            sell_heavy_zones = []
            
            for zone_id, zone in self.zones.items():
                total = zone.buy_count + zone.sell_count
                if total > 0:
                    buy_ratio = zone.buy_count / total
                    if buy_ratio > 0.7:
                        buy_heavy_zones.append(zone_id)
                    elif buy_ratio < 0.3:
                        sell_heavy_zones.append(zone_id)
            
            if buy_heavy_zones:
                recommendations.append(f"üìà ‡πÇ‡∏ã‡∏ô {buy_heavy_zones} ‡∏Å‡∏£‡∏∞‡∏à‡∏∏‡∏Å BUY - ‡∏Ñ‡∏ß‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏° SELL")
            
            if sell_heavy_zones:
                recommendations.append(f"üìâ ‡πÇ‡∏ã‡∏ô {sell_heavy_zones} ‡∏Å‡∏£‡∏∞‡∏à‡∏∏‡∏Å SELL - ‡∏Ñ‡∏ß‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏° BUY")
            
            if not recommendations:
                recommendations.append("‚úÖ ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏î‡∏µ - ‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏™‡∏°‡∏î‡∏∏‡∏•‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô")
                
        except Exception as e:
            logger.error(f"Error generating recommendations: {e}")
            recommendations.append("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥")
        
        return recommendations
    
    def _create_empty_result(self) -> ZoneAnalysisResult:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏õ‡∏•‡πà‡∏≤‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡∏¥‡∏î error"""
        return ZoneAnalysisResult(
            total_zones=0,
            active_zones=0,
            empty_zones=0,
            balanced_zones=0,
            imbalanced_zones=0,
            critical_zones=0,
            overall_health_score=0.0,
            distribution_quality="‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÑ‡∏î‡πâ",
            recommendations=["‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå"],
            zone_map={}
        )
    
    def get_smart_entry_recommendation(self, signal_direction: str, current_price: float, 
                                     positions: List[Position]) -> SmartEntryRecommendation:
        """‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏à‡∏∏‡∏î‡πÄ‡∏Ç‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ä‡∏≤‡∏ç‡∏â‡∏•‡∏≤‡∏î‡∏ï‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡πÇ‡∏ã‡∏ô"""
        try:
            # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
            analysis = self.analyze_position_distribution(positions)
            
            if not analysis.zone_map:
                return SmartEntryRecommendation(
                    recommended_action="WAIT",
                    target_zone_id=-1,
                    target_price_range=(0, 0),
                    confidence_score=0.0,
                    reason="‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÇ‡∏ã‡∏ô‡πÑ‡∏î‡πâ",
                    alternative_zones=[],
                    lot_size_multiplier=1.0
                )
            
            # ‡∏´‡∏≤‡πÇ‡∏ã‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö entry
            target_zones = self._find_optimal_entry_zones(signal_direction, analysis.zone_map)
            
            if not target_zones:
                return SmartEntryRecommendation(
                    recommended_action="WAIT",
                    target_zone_id=-1,
                    target_price_range=(0, 0),
                    confidence_score=0.0,
                    reason="‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏ã‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤",
                    alternative_zones=[],
                    lot_size_multiplier=1.0
                )
            
            # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏ã‡∏ô‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
            best_zone_id = target_zones[0]
            best_zone = analysis.zone_map[best_zone_id]
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì confidence score
            confidence_score = self._calculate_entry_confidence(
                signal_direction, best_zone, analysis
            )
            
            # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î lot size multiplier
            lot_multiplier = self._calculate_lot_multiplier(best_zone, confidence_score)
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•
            reason = self._generate_entry_reason(signal_direction, best_zone, confidence_score)
            
            return SmartEntryRecommendation(
                recommended_action=signal_direction,
                target_zone_id=best_zone_id,
                target_price_range=(best_zone.price_min, best_zone.price_max),
                confidence_score=confidence_score,
                reason=reason,
                alternative_zones=target_zones[1:3],  # ‡πÄ‡∏≠‡∏≤ 2 ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
                lot_size_multiplier=lot_multiplier
            )
            
        except Exception as e:
            logger.error(f"Error getting smart entry recommendation: {e}")
            return SmartEntryRecommendation(
                recommended_action="WAIT",
                target_zone_id=-1,
                target_price_range=(0, 0),
                confidence_score=0.0,
                reason=f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}",
                alternative_zones=[],
                lot_size_multiplier=1.0
            )
    
    def _find_optimal_entry_zones(self, direction: str, zone_map: Dict[int, PriceZone]) -> List[int]:
        """‡∏´‡∏≤‡πÇ‡∏ã‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤"""
        try:
            zone_scores = []
            
            for zone_id, zone in zone_map.items():
                score = 0.0
                
                # 1. Zone Health Score (40%)
                if zone.zone_health == ZoneHealth.EXCELLENT:
                    score += 40
                elif zone.zone_health == ZoneHealth.GOOD:
                    score += 30
                elif zone.zone_health == ZoneHealth.FAIR:
                    score += 20
                elif zone.zone_health == ZoneHealth.POOR:
                    score += 10
                else:  # CRITICAL
                    score += 0
                
                # 2. Direction Balance Score (35%)
                total_orders = zone.buy_count + zone.sell_count
                if total_orders == 0:
                    # ‡πÇ‡∏ã‡∏ô‡∏ß‡πà‡∏≤‡∏á - ‡∏î‡∏µ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏∏‡∏Å‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á
                    score += 35
                else:
                    if direction.upper() == "BUY":
                        # ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ BUY - ‡πÇ‡∏ã‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ SELL ‡∏°‡∏≤‡∏Å‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏π‡∏á
                        sell_ratio = zone.sell_count / total_orders
                        score += sell_ratio * 35
                    else:  # SELL
                        # ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ SELL - ‡πÇ‡∏ã‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ BUY ‡∏°‡∏≤‡∏Å‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏π‡∏á
                        buy_ratio = zone.buy_count / total_orders
                        score += buy_ratio * 35
                
                # 3. Zone Type Score (15%)
                if zone.zone_type == ZoneType.HOT:
                    score += 15
                elif zone.zone_type == ZoneType.NORMAL:
                    score += 10
                elif zone.zone_type == ZoneType.SUPPORT or zone.zone_type == ZoneType.RESISTANCE:
                    score += 12
                else:  # DEAD
                    score += 5
                
                # 4. Profit Potential Score (10%)
                if zone.total_profit > 0:
                    score += 10
                elif zone.total_profit > -10:
                    score += 5
                else:
                    score += 0
                
                zone_scores.append((zone_id, score))
            
            # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏° score ‡∏à‡∏≤‡∏Å‡∏™‡∏π‡∏á‡πÑ‡∏õ‡∏ï‡πà‡∏≥
            zone_scores.sort(key=lambda x: x[1], reverse=True)
            
            # ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ zone_id ‡∏ó‡∏µ‡πà‡∏°‡∏µ score ‡∏™‡∏π‡∏á
            return [zone_id for zone_id, score in zone_scores if score > 30]
            
        except Exception as e:
            logger.error(f"Error finding optimal entry zones: {e}")
            return []
    
    def _calculate_entry_confidence(self, direction: str, zone: PriceZone, 
                                  analysis: ZoneAnalysisResult) -> float:
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤"""
        try:
            confidence = 0.0
            
            # 1. Zone Health (40%)
            confidence += zone.balance_score * 0.4 / 100
            
            # 2. Overall Portfolio Health (30%)
            confidence += analysis.overall_health_score * 0.3 / 100
            
            # 3. Zone Activity (20%)
            if zone.zone_type == ZoneType.HOT:
                confidence += 20
            elif zone.zone_type == ZoneType.NORMAL:
                confidence += 15
            else:
                confidence += 10
            
            # 4. Direction Alignment (10%)
            total_orders = zone.buy_count + zone.sell_count
            if total_orders > 0:
                if direction.upper() == "BUY" and zone.sell_count > zone.buy_count:
                    confidence += 10
                elif direction.upper() == "SELL" and zone.buy_count > zone.sell_count:
                    confidence += 10
                else:
                    confidence += 5
            else:
                confidence += 10  # ‡πÇ‡∏ã‡∏ô‡∏ß‡πà‡∏≤‡∏á‡∏î‡∏µ
            
            return min(confidence, 100.0)
            
        except Exception as e:
            logger.error(f"Error calculating entry confidence: {e}")
            return 50.0
    
    def _calculate_lot_multiplier(self, zone: PriceZone, confidence: float) -> float:
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ï‡∏±‡∏ß‡∏Ñ‡∏π‡∏ì lot size ‡∏ï‡∏≤‡∏° zone ‡πÅ‡∏•‡∏∞ confidence"""
        try:
            multiplier = 1.0
            
            # ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏° confidence
            if confidence >= 80:
                multiplier *= 1.3
            elif confidence >= 60:
                multiplier *= 1.1
            elif confidence >= 40:
                multiplier *= 1.0
            else:
                multiplier *= 0.8
            
            # ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏° zone type
            if zone.zone_type == ZoneType.HOT:
                multiplier *= 1.2
            elif zone.zone_type == ZoneType.DEAD:
                multiplier *= 0.8
            
            # ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏° zone health
            if zone.zone_health == ZoneHealth.EXCELLENT:
                multiplier *= 1.1
            elif zone.zone_health == ZoneHealth.CRITICAL:
                multiplier *= 0.9
            
            return max(0.5, min(multiplier, 2.0))  # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á 0.5-2.0
            
        except Exception as e:
            logger.error(f"Error calculating lot multiplier: {e}")
            return 1.0
    
    def _generate_entry_reason(self, direction: str, zone: PriceZone, confidence: float) -> str:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ entry"""
        try:
            reasons = []
            
            # Zone health
            reasons.append(f"Zone {zone.zone_id} ({zone.zone_health.value})")
            
            # Balance
            total_orders = zone.buy_count + zone.sell_count
            if total_orders == 0:
                reasons.append("‡πÇ‡∏ã‡∏ô‡∏ß‡πà‡∏≤‡∏á")
            else:
                buy_ratio = zone.buy_count / total_orders
                if direction.upper() == "BUY" and buy_ratio < 0.5:
                    reasons.append(f"‡∏Ç‡∏≤‡∏î BUY ({zone.buy_count}:{zone.sell_count})")
                elif direction.upper() == "SELL" and buy_ratio > 0.5:
                    reasons.append(f"‡∏Ç‡∏≤‡∏î SELL ({zone.buy_count}:{zone.sell_count})")
            
            # Zone type
            if zone.zone_type != ZoneType.NORMAL:
                reasons.append(f"{zone.zone_type.value} zone")
            
            # Confidence
            if confidence >= 80:
                reasons.append("‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡∏™‡∏π‡∏á")
            elif confidence >= 60:
                reasons.append("‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡∏î‡∏µ")
            else:
                reasons.append("‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á")
            
            return " | ".join(reasons)
            
        except Exception as e:
            logger.error(f"Error generating entry reason: {e}")
            return "‡∏Å‡∏≤‡∏£‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÅ‡∏ö‡∏ö‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥"
    
    def get_zone_map_display(self, current_price: float) -> str:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÇ‡∏ã‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•"""
        try:
            if not self.zones:
                return "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏ã‡∏ô"
            
            lines = []
            lines.append("üìä PRICE ZONE MAP")
            lines.append("=" * 50)
            
            # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡πÇ‡∏ã‡∏ô‡∏à‡∏≤‡∏Å‡∏ö‡∏ô‡∏•‡∏á‡∏•‡πà‡∏≤‡∏á (‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏π‡∏á‡πÑ‡∏õ‡∏ï‡πà‡∏≥)
            sorted_zones = sorted(self.zones.items(), key=lambda x: x[1].price_center, reverse=True)
            
            for zone_id, zone in sorted_zones:
                # ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÇ‡∏ã‡∏ô
                if zone.price_min <= current_price <= zone.price_max:
                    price_indicator = "üëâ"
                else:
                    price_indicator = "  "
                
                # Health indicator
                if zone.zone_health == ZoneHealth.EXCELLENT:
                    health_icon = "‚úÖ"
                elif zone.zone_health == ZoneHealth.GOOD:
                    health_icon = "üü¢"
                elif zone.zone_health == ZoneHealth.FAIR:
                    health_icon = "üü°"
                elif zone.zone_health == ZoneHealth.POOR:
                    health_icon = "üü†"
                else:
                    health_icon = "üî¥"
                
                # Orders info
                if zone.buy_count + zone.sell_count == 0:
                    orders_info = "Empty"
                else:
                    orders_info = f"B:{zone.buy_count} S:{zone.sell_count}"
                
                # Zone type
                type_icon = {
                    ZoneType.HOT: "üî•",
                    ZoneType.NORMAL: "‚ö™",
                    ZoneType.DEAD: "üí§",
                    ZoneType.SUPPORT: "üü¢",
                    ZoneType.RESISTANCE: "üî¥"
                }.get(zone.zone_type, "‚ö™")
                
                line = (f"{price_indicator} Zone {zone_id:2d}: "
                       f"[{zone.price_min:7.2f}-{zone.price_max:7.2f}] "
                       f"{health_icon} {type_icon} {orders_info:8s} "
                       f"Score:{zone.balance_score:5.1f}")
                
                lines.append(line)
            
            lines.append("=" * 50)
            lines.append(f"Current Price: {current_price:.2f}")
            
            return "\n".join(lines)
            
        except Exception as e:
            logger.error(f"Error creating zone map display: {e}")
            return "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÇ‡∏ã‡∏ô"
