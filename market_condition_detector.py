# -*- coding: utf-8 -*-
"""
Market Condition Detector
‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏™‡∏†‡∏≤‡∏ß‡∏∞‡∏ï‡∏•‡∏≤‡∏î‡πÅ‡∏ö‡∏ö Real-time
"""

import logging
import time
import numpy as np
from typing import Dict, List, Any, Optional, Tuple
from dataclasses import dataclass
from datetime import datetime, timedelta
from collections import deque

logger = logging.getLogger(__name__)

@dataclass
class MarketCondition:
    """‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏†‡∏≤‡∏ß‡∏∞‡∏ï‡∏•‡∏≤‡∏î"""
    condition: str  # 'volatile', 'trending', 'sideways'
    volatility_level: float
    trend_direction: str  # 'up', 'down', 'sideways'
    strength: float  # 0-1
    confidence: float  # 0-1
    timestamp: float
    parameters: Dict[str, Any]

@dataclass
class VolatilityLevel:
    """‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô"""
    level: str  # 'low', 'medium', 'high'
    threshold: float
    update_frequency: int  # ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
    zone_tolerance: float
    min_zone_strength: float

class MarketConditionDetector:
    """‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏™‡∏†‡∏≤‡∏ß‡∏∞‡∏ï‡∏•‡∏≤‡∏î‡πÅ‡∏ö‡∏ö Real-time"""
    
    def __init__(self):
        self.current_condition = MarketCondition(
            condition='sideways',
            volatility_level=0.01,
            trend_direction='sideways',
            strength=0.5,
            confidence=0.5,
            timestamp=time.time(),
            parameters={}
        )
        
        # üìä Data Storage
        self.price_history = deque(maxlen=1000)  # ‡πÄ‡∏Å‡πá‡∏ö‡∏£‡∏≤‡∏Ñ‡∏≤ 1000 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
        self.volume_history = deque(maxlen=1000)
        self.volatility_history = deque(maxlen=100)
        
        # üéØ Volatility Levels
        self.volatility_levels = {
            'low': VolatilityLevel('low', 0.005, 10, 0.1, 0.03),
            'medium': VolatilityLevel('medium', 0.01, 5, 0.05, 0.02),
            'high': VolatilityLevel('high', 0.02, 2, 0.001, 0.001)
        }
        
        # üîÑ Analysis Parameters
        self.analysis_interval = 5.0  # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ó‡∏∏‡∏Å 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
        self.last_analysis_time = 0.0
        self.min_data_points = 20  # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå
        
        # üìà Trend Detection
        self.trend_periods = [5, 10, 20, 50]  # ‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏ó‡∏£‡∏ô‡∏î‡πå
        self.trend_thresholds = {
            'strong': 0.7,
            'medium': 0.5,
            'weak': 0.3
        }
        
        # üéØ News Event Detection
        self.news_detection_enabled = True
        self.volume_spike_threshold = 2.0  # 2x ‡∏õ‡∏Å‡∏ï‡∏¥
        self.price_jump_threshold = 0.01  # 1%
        
        # üìä Performance Metrics
        self.analysis_count = 0
        self.last_performance_check = 0.0
        
    def update_price_data(self, price: float, volume: float = 0.0, timestamp: float = None):
        """‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏Ñ‡∏≤"""
        try:
            if timestamp is None:
                timestamp = time.time()
            
            # ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏Ñ‡∏≤
            self.price_history.append({
                'price': price,
                'volume': volume,
                'timestamp': timestamp
            })
            
            # ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Volume
            if volume > 0:
                self.volume_history.append({
                    'volume': volume,
                    'timestamp': timestamp
                })
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÉ‡∏´‡∏°‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if timestamp - self.last_analysis_time >= self.analysis_interval:
                self._analyze_market_condition()
                
        except Exception as e:
            logger.error(f"‚ùå Error updating price data: {e}")
    
    def _analyze_market_condition(self):
        """‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏™‡∏†‡∏≤‡∏ß‡∏∞‡∏ï‡∏•‡∏≤‡∏î"""
        try:
            current_time = time.time()
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if len(self.price_history) < self.min_data_points:
                logger.debug("üìä [ANALYSIS] Insufficient data for analysis")
                return
            
            # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô
            volatility_level = self._detect_volatility_level()
            
            # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡πÄ‡∏ó‡∏£‡∏ô‡∏î‡πå
            trend_direction = self._detect_trend_direction()
            
            # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏Å‡∏£‡πà‡∏á
            strength = self._calculate_market_strength()
            
            # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô
            confidence = self._calculate_confidence()
            
            # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏†‡∏≤‡∏ß‡∏∞‡∏ï‡∏•‡∏≤‡∏î
            condition = self._determine_market_condition(volatility_level, trend_direction, strength)
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏Ç‡πà‡∏≤‡∏ß
            news_events = self._detect_news_events()
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á MarketCondition Object
            new_condition = MarketCondition(
                condition=condition,
                volatility_level=volatility_level,
                trend_direction=trend_direction,
                strength=strength,
                confidence=confidence,
                timestamp=current_time,
                parameters={
                    'news_events': news_events,
                    'data_points': len(self.price_history),
                    'analysis_time': current_time - self.last_analysis_time
                }
            )
            
            # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏†‡∏≤‡∏ß‡∏∞‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
            self.current_condition = new_condition
            self.last_analysis_time = current_time
            self.analysis_count += 1
            
            # Log ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå
            self._log_analysis_results(new_condition)
            
            # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó Performance Metrics
            self._update_performance_metrics()
            
        except Exception as e:
            logger.error(f"‚ùå Error analyzing market condition: {e}")
    
    def _detect_volatility_level(self) -> float:
        """‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô"""
        try:
            if len(self.price_history) < 10:
                return 0.01
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Standard Deviation ‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤
            prices = [item['price'] for item in list(self.price_history)[-50:]]  # 50 ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
            volatility = np.std(prices) / np.mean(prices)
            
            # ‡πÄ‡∏Å‡πá‡∏ö‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô
            self.volatility_history.append({
                'volatility': volatility,
                'timestamp': time.time()
            })
            
            return volatility
            
        except Exception as e:
            logger.error(f"‚ùå Error detecting volatility: {e}")
            return 0.01
    
    def _detect_trend_direction(self) -> str:
        """‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡πÄ‡∏ó‡∏£‡∏ô‡∏î‡πå"""
        try:
            if len(self.price_history) < 20:
                return 'sideways'
            
            # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏ó‡∏£‡∏ô‡∏î‡πå‡πÉ‡∏ô‡∏´‡∏•‡∏≤‡∏¢‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤
            trend_scores = []
            
            for period in self.trend_periods:
                if len(self.price_history) >= period:
                    trend_score = self._calculate_trend_score(period)
                    trend_scores.append(trend_score)
            
            if not trend_scores:
                return 'sideways'
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏ó‡∏£‡∏ô‡∏î‡πå‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢
            avg_trend_score = np.mean(trend_scores)
            
            # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡πÄ‡∏ó‡∏£‡∏ô‡∏î‡πå
            if avg_trend_score > self.trend_thresholds['strong']:
                return 'up'
            elif avg_trend_score < -self.trend_thresholds['strong']:
                return 'down'
            else:
                return 'sideways'
                
        except Exception as e:
            logger.error(f"‚ùå Error detecting trend direction: {e}")
            return 'sideways'
    
    def _calculate_trend_score(self, period: int) -> float:
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏ó‡∏£‡∏ô‡∏î‡πå"""
        try:
            recent_prices = [item['price'] for item in list(self.price_history)[-period:]]
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Linear Regression
            x = np.arange(len(recent_prices))
            y = np.array(recent_prices)
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì slope
            slope = np.polyfit(x, y, 1)[0]
            
            # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô -1 ‡∏ñ‡∏∂‡∏á 1
            max_slope = np.std(y) * 0.1  # 10% ‡∏Ç‡∏≠‡∏á standard deviation
            trend_score = np.clip(slope / max_slope, -1, 1)
            
            return trend_score
            
        except Exception as e:
            logger.error(f"‚ùå Error calculating trend score: {e}")
            return 0.0
    
    def _calculate_market_strength(self) -> float:
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏Å‡∏£‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏ï‡∏•‡∏≤‡∏î"""
        try:
            if len(self.price_history) < 10:
                return 0.5
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≤‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô‡πÅ‡∏•‡∏∞‡πÄ‡∏ó‡∏£‡∏ô‡∏î‡πå
            volatility = self._detect_volatility_level()
            trend_score = abs(self._calculate_trend_score(20))
            
            # ‡∏£‡∏ß‡∏°‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô (0-1)
            strength = (volatility * 10 + trend_score) / 2
            strength = np.clip(strength, 0, 1)
            
            return strength
            
        except Exception as e:
            logger.error(f"‚ùå Error calculating market strength: {e}")
            return 0.5
    
    def _calculate_confidence(self) -> float:
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå"""
        try:
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            data_confidence = min(len(self.price_history) / 100, 1.0)
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            if len(self.volatility_history) < 5:
                return data_confidence * 0.5
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô
            recent_volatilities = [item['volatility'] for item in list(self.volatility_history)[-5:]]
            volatility_consistency = 1.0 - (np.std(recent_volatilities) / np.mean(recent_volatilities))
            volatility_consistency = np.clip(volatility_consistency, 0, 1)
            
            # ‡∏£‡∏ß‡∏°‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô
            confidence = (data_confidence + volatility_consistency) / 2
            
            return confidence
            
        except Exception as e:
            logger.error(f"‚ùå Error calculating confidence: {e}")
            return 0.5
    
    def _determine_market_condition(self, volatility: float, trend: str, strength: float) -> str:
        """‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏†‡∏≤‡∏ß‡∏∞‡∏ï‡∏•‡∏≤‡∏î"""
        try:
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô‡∏™‡∏π‡∏á
            if volatility > self.volatility_levels['high'].threshold:
                return 'volatile'
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏ó‡∏£‡∏ô‡∏î‡πå‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏Å‡∏£‡πà‡∏á
            if trend in ['up', 'down'] and strength > 0.7:
                return 'trending'
            
            # ‡∏™‡∏†‡∏≤‡∏ß‡∏∞‡∏õ‡∏Å‡∏ï‡∏¥
            return 'sideways'
            
        except Exception as e:
            logger.error(f"‚ùå Error determining market condition: {e}")
            return 'sideways'
    
    def _detect_news_events(self) -> List[Dict[str, Any]]:
        """‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏Ç‡πà‡∏≤‡∏ß"""
        try:
            if not self.news_detection_enabled:
                return []
            
            events = []
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Volume Spike
            if len(self.volume_history) >= 10:
                recent_volumes = [item['volume'] for item in list(self.volume_history)[-10:]]
                avg_volume = np.mean(recent_volumes[:-1])  # ‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
                current_volume = recent_volumes[-1]
                
                if avg_volume > 0 and current_volume > avg_volume * self.volume_spike_threshold:
                    events.append({
                        'type': 'volume_spike',
                        'severity': 'high',
                        'current_volume': current_volume,
                        'avg_volume': avg_volume,
                        'ratio': current_volume / avg_volume
                    })
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Price Jump
            if len(self.price_history) >= 5:
                recent_prices = [item['price'] for item in list(self.price_history)[-5:]]
                price_change = abs(recent_prices[-1] - recent_prices[-2]) / recent_prices[-2]
                
                if price_change > self.price_jump_threshold:
                    events.append({
                        'type': 'price_jump',
                        'severity': 'high',
                        'price_change': price_change,
                        'current_price': recent_prices[-1],
                        'previous_price': recent_prices[-2]
                    })
            
            return events
            
        except Exception as e:
            logger.error(f"‚ùå Error detecting news events: {e}")
            return []
    
    def _log_analysis_results(self, condition: MarketCondition):
        """Log ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå"""
        try:
            logger.info(f"üìä [MARKET ANALYSIS] {condition.condition.upper()} - "
                       f"Volatility: {condition.volatility_level:.4f}, "
                       f"Trend: {condition.trend_direction}, "
                       f"Strength: {condition.strength:.2f}, "
                       f"Confidence: {condition.confidence:.2f}")
            
            # Log ‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏Ç‡πà‡∏≤‡∏ß
            if condition.parameters.get('news_events'):
                for event in condition.parameters['news_events']:
                    logger.warning(f"üì∞ [NEWS EVENT] {event['type'].upper()} - "
                                 f"Severity: {event['severity']}")
                    
        except Exception as e:
            logger.error(f"‚ùå Error logging analysis results: {e}")
    
    def _update_performance_metrics(self):
        """‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó Performance Metrics"""
        try:
            current_time = time.time()
            
            if current_time - self.last_performance_check >= 60:  # ‡∏ó‡∏∏‡∏Å 1 ‡∏ô‡∏≤‡∏ó‡∏µ
                analysis_rate = self.analysis_count / 60.0
                logger.debug(f"üìà [PERFORMANCE] Analysis rate: {analysis_rate:.2f}/sec")
                
                # Reset counters
                self.analysis_count = 0
                self.last_performance_check = current_time
                
        except Exception as e:
            logger.error(f"‚ùå Error updating performance metrics: {e}")
    
    # üéØ Public Methods
    def get_current_condition(self) -> MarketCondition:
        """‡∏î‡∏∂‡∏á‡∏™‡∏†‡∏≤‡∏ß‡∏∞‡∏ï‡∏•‡∏≤‡∏î‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô"""
        return self.current_condition
    
    def get_volatility_level(self) -> VolatilityLevel:
        """‡∏î‡∏∂‡∏á‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô"""
        try:
            volatility = self.current_condition.volatility_level
            
            if volatility > self.volatility_levels['high'].threshold:
                return self.volatility_levels['high']
            elif volatility > self.volatility_levels['medium'].threshold:
                return self.volatility_levels['medium']
            else:
                return self.volatility_levels['low']
                
        except Exception as e:
            logger.error(f"‚ùå Error getting volatility level: {e}")
            return self.volatility_levels['low']
    
    def get_zone_parameters(self) -> Dict[str, float]:
        """‡∏î‡∏∂‡∏á‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå Zone ‡∏ï‡∏≤‡∏°‡∏™‡∏†‡∏≤‡∏ß‡∏∞‡∏ï‡∏•‡∏≤‡∏î"""
        try:
            volatility_level = self.get_volatility_level()
            
            return {
                'zone_tolerance': volatility_level.zone_tolerance,
                'min_zone_strength': volatility_level.min_zone_strength,
                'update_frequency': volatility_level.update_frequency
            }
            
        except Exception as e:
            logger.error(f"‚ùå Error getting zone parameters: {e}")
            return {
                'zone_tolerance': 0.1,
                'min_zone_strength': 0.03,
                'update_frequency': 10
            }
    
    def is_volatile_market(self) -> bool:
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ï‡∏•‡∏≤‡∏î‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"""
        return self.current_condition.condition == 'volatile'
    
    def is_trending_market(self) -> bool:
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ï‡∏•‡∏≤‡∏î‡∏°‡∏µ‡πÄ‡∏ó‡∏£‡∏ô‡∏î‡πå‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"""
        return self.current_condition.condition == 'trending'
    
    def is_sideways_market(self) -> bool:
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ï‡∏•‡∏≤‡∏î‡πÄ‡∏õ‡πá‡∏ô sideways ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"""
        return self.current_condition.condition == 'sideways'
    
    def get_trend_direction(self) -> str:
        """‡∏î‡∏∂‡∏á‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡πÄ‡∏ó‡∏£‡∏ô‡∏î‡πå"""
        return self.current_condition.trend_direction
    
    def get_market_strength(self) -> float:
        """‡∏î‡∏∂‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏Å‡∏£‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏ï‡∏•‡∏≤‡∏î"""
        return self.current_condition.strength
    
    def get_confidence(self) -> float:
        """‡∏î‡∏∂‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå"""
        return self.current_condition.confidence
    
    def has_news_events(self) -> bool:
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏Ç‡πà‡∏≤‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"""
        return len(self.current_condition.parameters.get('news_events', [])) > 0
    
    def get_news_events(self) -> List[Dict[str, Any]]:
        """‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏Ç‡πà‡∏≤‡∏ß"""
        return self.current_condition.parameters.get('news_events', [])
    
    # üéØ Configuration
    def set_analysis_interval(self, interval: float):
        """‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå"""
        self.analysis_interval = interval
        logger.info(f"üîß [CONFIG] Analysis interval set to {interval} seconds")
    
    def set_volatility_thresholds(self, low: float, medium: float, high: float):
        """‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô"""
        self.volatility_levels['low'].threshold = low
        self.volatility_levels['medium'].threshold = medium
        self.volatility_levels['high'].threshold = high
        logger.info(f"üîß [CONFIG] Volatility thresholds updated")
    
    def set_news_detection(self, enabled: bool):
        """‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Ç‡πà‡∏≤‡∏ß"""
        self.news_detection_enabled = enabled
        logger.info(f"üîß [CONFIG] News detection {'enabled' if enabled else 'disabled'}")
    
    def set_volume_spike_threshold(self, threshold: float):
        """‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏Å‡∏ì‡∏ë‡πå Volume Spike"""
        self.volume_spike_threshold = threshold
        logger.info(f"üîß [CONFIG] Volume spike threshold set to {threshold}x")
    
    def set_price_jump_threshold(self, threshold: float):
        """‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏Å‡∏ì‡∏ë‡πå Price Jump"""
        self.price_jump_threshold = threshold
        logger.info(f"üîß [CONFIG] Price jump threshold set to {threshold*100}%")
    
    # üéØ Utility Methods
    def clear_history(self):
        """‡∏•‡πâ‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"""
        self.price_history.clear()
        self.volume_history.clear()
        self.volatility_history.clear()
        logger.info("üßπ [HISTORY] Cleared all market data history")
    
    def get_data_summary(self) -> Dict[str, Any]:
        """‡∏î‡∏∂‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"""
        return {
            'price_data_points': len(self.price_history),
            'volume_data_points': len(self.volume_history),
            'volatility_data_points': len(self.volatility_history),
            'analysis_count': self.analysis_count,
            'current_condition': self.current_condition.condition,
            'last_analysis': self.last_analysis_time
        }
