import MetaTrader5 as mt5
import numpy as np
from datetime import datetime, timedelta
from typing import List, Dict, Tuple, Optional
import logging

logger = logging.getLogger(__name__)

class ZoneAnalyzer:
    """üîç ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏£‡∏á‡∏Ç‡∏≠‡∏á Support/Resistance Zones"""
    
    def __init__(self, mt5_connection):
        self.mt5_connection = mt5_connection
        self.symbol = None  # ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô analyze_zones
        self.timeframes = [mt5.TIMEFRAME_M5, mt5.TIMEFRAME_M15, mt5.TIMEFRAME_M30, mt5.TIMEFRAME_H1]
        # ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ Daily timeframe ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ array comparison
        
        # Zone Detection Parameters
        self.min_touches = 2  # ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏ï‡∏∞ Zone
        self.zone_tolerance = 5.0  # ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏∑‡∏î‡∏´‡∏¢‡∏∏‡πà‡∏ô‡∏Ç‡∏≠‡∏á Zone (points)
        self.min_zone_strength = 30  # ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏£‡∏á‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥
        
        # Multi-TF Analysis
        self.tf_weights = {
            mt5.TIMEFRAME_M5: 0.1,
            mt5.TIMEFRAME_M15: 0.2,
            mt5.TIMEFRAME_M30: 0.3,
            mt5.TIMEFRAME_H1: 0.4
        }
        
        # Zone Strength Calculation
        self.price_action_weight = 0.4
        self.volume_weight = 0.3
        self.time_weight = 0.3
        
    def analyze_zones(self, symbol: str, lookback_hours: int = 24) -> Dict[str, List[Dict]]:
        """üîç ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå Support/Resistance Zones ‡∏à‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢ Timeframe"""
        try:
            self.symbol = symbol  # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ symbol ‡∏à‡∏≤‡∏Å parameter
            logger.info(f"üîç Analyzing zones for {self.symbol} (lookback: {lookback_hours}h)")
            
            support_zones = []
            resistance_zones = []
            
            for tf in self.timeframes:
                tf_support, tf_resistance = self._analyze_timeframe_zones(tf, lookback_hours)
                support_zones.extend(tf_support)
                resistance_zones.extend(tf_resistance)
            
            # ‡∏£‡∏ß‡∏° Zones ‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡∏Å‡∏±‡∏ô
            merged_support = self._merge_nearby_zones(support_zones)
            merged_resistance = self._merge_nearby_zones(resistance_zones)
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Zone Strength
            for zone in merged_support:
                zone['strength'] = self._calculate_zone_strength(zone, 'support')
                zone['type'] = 'support'
            
            for zone in merged_resistance:
                zone['strength'] = self._calculate_zone_strength(zone, 'resistance')
                zone['type'] = 'resistance'
            
            # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏° Strength
            merged_support.sort(key=lambda x: x['strength'], reverse=True)
            merged_resistance.sort(key=lambda x: x['strength'], reverse=True)
            
            logger.info(f"üîç ZONE ANALYSIS COMPLETE: {len(merged_support)} support zones, {len(merged_resistance)} resistance zones")
            
            # Log details of strongest zones
            if merged_support:
                strongest_support = merged_support[0]
                logger.info(f"üîç Strongest Support: {strongest_support['price']:.2f} (Strength: {strongest_support['strength']:.1f})")
            
            if merged_resistance:
                strongest_resistance = merged_resistance[0]
                logger.info(f"üîç Strongest Resistance: {strongest_resistance['price']:.2f} (Strength: {strongest_resistance['strength']:.1f})")
            
            return {
                'support': merged_support,
                'resistance': merged_resistance
            }
            
        except Exception as e:
            logger.error(f"‚ùå Error analyzing zones: {e}")
            return {'support': [], 'resistance': []}
    
    def _analyze_timeframe_zones(self, timeframe, lookback_hours: int) -> Tuple[List[Dict], List[Dict]]:
        """üîç ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå Zones ‡πÉ‡∏ô Timeframe ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß"""
        try:
            # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏Ñ‡∏≤
            bars_needed = int(lookback_hours * 60 / self._get_timeframe_minutes(timeframe))
            logger.debug(f"üîç Requesting {bars_needed} bars for {timeframe} (lookback: {lookback_hours}h)")
            rates = mt5.copy_rates_from_pos(self.symbol, timeframe, 0, bars_needed)
            
            if rates is None or len(rates) < 50:
                logger.warning(f"‚ö†Ô∏è Insufficient data for timeframe {timeframe} (got {len(rates) if rates else 0} bars, need 50+)")
                return [], []
            
            # ‡∏´‡∏≤ Pivot Points
            pivots = self._find_pivot_points(rates)
            
            # ‡πÅ‡∏¢‡∏Å Support ‡πÅ‡∏•‡∏∞ Resistance
            support_zones = []
            resistance_zones = []
            
            for pivot in pivots:
                if pivot['touches'] >= self.min_touches:
                    zone_data = {
                        'price': pivot['price'],
                        'timeframe': timeframe,
                        'touches': pivot['touches'],
                        'timestamp': pivot['timestamp'],
                        'tf_weight': self.tf_weights.get(timeframe, 0.1)
                    }
                    
                    if pivot['type'] == 'support':
                        support_zones.append(zone_data)
                    else:
                        resistance_zones.append(zone_data)
            
            logger.debug(f"TF {timeframe}: {len(support_zones)} support, {len(resistance_zones)} resistance")
            return support_zones, resistance_zones
            
        except Exception as e:
            logger.error(f"‚ùå Error analyzing timeframe {timeframe}: {e}")
            return [], []
    
    def _find_pivot_points(self, rates) -> List[Dict]:
        """üîç ‡∏´‡∏≤ Pivot Points ‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏Ñ‡∏≤"""
        try:
            pivots = []
            window = 3  # ‡πÉ‡∏ä‡πâ window 3 bars
            
            for i in range(window, len(rates) - window):
                current_high = rates[i]['high']
                current_low = rates[i]['low']
                
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Support Pivot (Low)
                is_support_pivot = True
                for j in range(i - window, i + window + 1):
                    if j != i and j < len(rates) and rates[j]['low'] <= current_low:
                        is_support_pivot = False
                        break
                
                if is_support_pivot:
                    touches = self._count_touches(rates, current_low, 'support', i)
                    if touches >= self.min_touches:
                        pivots.append({
                            'type': 'support',
                            'price': current_low,
                            'touches': touches,
                            'timestamp': rates[i]['time'],
                            'index': i
                        })
                
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Resistance Pivot (High)
                is_resistance_pivot = True
                for j in range(i - window, i + window + 1):
                    if j != i and j < len(rates) and rates[j]['high'] >= current_high:
                        is_resistance_pivot = False
                        break
                
                if is_resistance_pivot:
                    touches = self._count_touches(rates, current_high, 'resistance', i)
                    if touches >= self.min_touches:
                        pivots.append({
                            'type': 'resistance',
                            'price': current_high,
                            'touches': touches,
                            'timestamp': rates[i]['time'],
                            'index': i
                        })
            
            return pivots
            
        except Exception as e:
            logger.error(f"‚ùå Error finding pivot points: {e}")
            return []
    
    def _count_touches(self, rates, price, zone_type, pivot_index) -> int:
        """üîç ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏£‡∏≤‡∏Ñ‡∏≤‡πÅ‡∏ï‡∏∞ Zone"""
        try:
            touches = 1  # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏µ‡πà 1 ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ pivot ‡πÄ‡∏≠‡∏á
            tolerance = self.zone_tolerance
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö bars ‡∏´‡∏•‡∏±‡∏á pivot
            for i in range(pivot_index + 1, len(rates)):
                if i < len(rates):
                    if zone_type == 'support':
                        if abs(rates[i]['low'] - price) <= tolerance:
                            touches += 1
                    else:  # resistance
                        if abs(rates[i]['high'] - price) <= tolerance:
                            touches += 1
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö bars ‡∏Å‡πà‡∏≠‡∏ô pivot (‡πÉ‡∏ô‡∏£‡∏∞‡∏¢‡∏∞‡πÉ‡∏Å‡∏•‡πâ)
            start_idx = max(0, pivot_index - 50)  # ‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á 50 bars
            for i in range(start_idx, pivot_index):
                if i < len(rates):
                    if zone_type == 'support':
                        if abs(rates[i]['low'] - price) <= tolerance:
                            touches += 1
                    else:  # resistance
                        if abs(rates[i]['high'] - price) <= tolerance:
                            touches += 1
            
            return touches
            
        except Exception as e:
            logger.error(f"‚ùå Error counting touches: {e}")
            return 0
    
    def _merge_nearby_zones(self, zones: List[Dict]) -> List[Dict]:
        """üîó ‡∏£‡∏ß‡∏° Zones ‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡∏Å‡∏±‡∏ô"""
        try:
            if not zones:
                return []
            
            # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏£‡∏≤‡∏Ñ‡∏≤
            zones.sort(key=lambda x: x['price'])
            
            merged = []
            current_group = [zones[0]]
            
            for zone in zones[1:]:
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÉ‡∏Å‡∏•‡πâ‡∏Å‡∏±‡∏ö‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                group_avg_price = sum(z['price'] for z in current_group) / len(current_group)
                
                if abs(zone['price'] - group_avg_price) <= self.zone_tolerance:
                    current_group.append(zone)
                else:
                    # ‡∏™‡∏£‡πâ‡∏≤‡∏á merged zone ‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
                    merged_zone = self._create_merged_zone(current_group)
                    merged.append(merged_zone)
                    current_group = [zone]
            
            # ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
            if current_group:
                merged_zone = self._create_merged_zone(current_group)
                merged.append(merged_zone)
            
            logger.debug(f"üîó Merged {len(zones)} zones into {len(merged)} zones")
            return merged
            
        except Exception as e:
            logger.error(f"‚ùå Error merging zones: {e}")
            return zones
    
    def _create_merged_zone(self, zone_group: List[Dict]) -> Dict:
        """üîó ‡∏™‡∏£‡πâ‡∏≤‡∏á merged zone ‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡∏∏‡πà‡∏° zones"""
        try:
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏ñ‡πà‡∏ß‡∏á‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å
            total_weight = sum(z.get('tf_weight', 0.1) * z['touches'] for z in zone_group)
            weighted_price = sum(z['price'] * z.get('tf_weight', 0.1) * z['touches'] for z in zone_group)
            avg_price = weighted_price / total_weight if total_weight > 0 else sum(z['price'] for z in zone_group) / len(zone_group)
            
            # ‡∏£‡∏ß‡∏° touches
            total_touches = sum(z['touches'] for z in zone_group)
            
            # ‡∏´‡∏≤ timestamp ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
            latest_timestamp = max(z['timestamp'] for z in zone_group)
            
            # ‡∏£‡∏ß‡∏° timeframes
            timeframes = list(set(z['timeframe'] for z in zone_group))
            
            return {
                'price': round(avg_price, 2),
                'touches': total_touches,
                'timestamp': latest_timestamp,
                'timeframes': timeframes,
                'zone_count': len(zone_group)
            }
            
        except Exception as e:
            logger.error(f"‚ùå Error creating merged zone: {e}")
            return zone_group[0]
    
    def _calculate_zone_strength(self, zone: Dict, zone_type: str) -> float:
        """üí™ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏£‡∏á‡∏Ç‡∏≠‡∏á Zone"""
        try:
            # Price Action Strength (‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡πÅ‡∏ï‡∏∞)
            max_touches = 10
            price_action_score = min((zone['touches'] / max_touches) * 100, 100)
            
            # Multi-Timeframe Strength
            tf_score = len(zone.get('timeframes', [zone.get('timeframe')])) * 25
            tf_score = min(tf_score, 100)
            
            # Time Freshness (Zone ‡πÉ‡∏´‡∏°‡πà = ‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏£‡∏á‡∏Å‡∏ß‡πà‡∏≤)
            now = datetime.now().timestamp()
            zone_age_hours = (now - zone['timestamp']) / 3600
            time_score = max(100 - (zone_age_hours / 24) * 20, 20)  # ‡∏•‡∏î‡∏•‡∏á 20 points ‡∏ï‡πà‡∏≠‡∏ß‡∏±‡∏ô
            
            # Zone Count Bonus (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏´‡∏•‡∏≤‡∏¢ zones ‡∏£‡∏ß‡∏°‡∏Å‡∏±‡∏ô)
            zone_count_bonus = min(zone.get('zone_count', 1) * 10, 30)
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Zone Strength ‡∏£‡∏ß‡∏°
            total_strength = (
                price_action_score * self.price_action_weight +
                tf_score * 0.3 +
                time_score * self.time_weight +
                zone_count_bonus * 0.1
            )
            
            final_strength = min(total_strength, 100)
            
            logger.debug(f"üí™ Zone {zone['price']}: PA={price_action_score:.1f}, TF={tf_score:.1f}, "
                        f"Time={time_score:.1f}, Bonus={zone_count_bonus:.1f} = {final_strength:.1f}")
            
            return round(final_strength, 1)
            
        except Exception as e:
            logger.error(f"‚ùå Error calculating zone strength: {e}")
            return 0.0
    
    def _get_timeframe_minutes(self, timeframe) -> int:
        """‚è∞ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô Timeframe ‡πÄ‡∏õ‡πá‡∏ô‡∏ô‡∏≤‡∏ó‡∏µ"""
        tf_minutes = {
            mt5.TIMEFRAME_M5: 5,
            mt5.TIMEFRAME_M15: 15,
            mt5.TIMEFRAME_M30: 30,
            mt5.TIMEFRAME_H1: 60
        }
        minutes = tf_minutes.get(timeframe, 5)
        logger.debug(f"üîç Timeframe {timeframe} = {minutes} minutes")
        return minutes
    
    def get_zone_at_price(self, price: float, zones: Dict[str, List[Dict]], tolerance: float = None) -> Optional[Dict]:
        """üéØ ‡∏´‡∏≤ Zone ‡∏ó‡∏µ‡πà‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô"""
        try:
            if tolerance is None:
                tolerance = self.zone_tolerance
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Support Zones
            for zone in zones.get('support', []):
                if abs(zone['price'] - price) <= tolerance:
                    zone['zone_type'] = 'support'
                    return zone
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Resistance Zones
            for zone in zones.get('resistance', []):
                if abs(zone['price'] - price) <= tolerance:
                    zone['zone_type'] = 'resistance'
                    return zone
            
            return None
            
        except Exception as e:
            logger.error(f"‚ùå Error getting zone at price: {e}")
            return None
    
    def get_strongest_zones(self, zones: Dict[str, List[Dict]], count: int = 5) -> Dict[str, List[Dict]]:
        """üèÜ ‡∏´‡∏≤ Zones ‡∏ó‡∏µ‡πà‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏£‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î"""
        try:
            support_zones = sorted(zones.get('support', []), key=lambda x: x.get('strength', 0), reverse=True)
            resistance_zones = sorted(zones.get('resistance', []), key=lambda x: x.get('strength', 0), reverse=True)
            
            return {
                'support': support_zones[:count],
                'resistance': resistance_zones[:count]
            }
            
        except Exception as e:
            logger.error(f"‚ùå Error getting strongest zones: {e}")
            return {'support': [], 'resistance': []}
