# -*- coding: utf-8 -*-
"""
üß† AI Decision Engine Module
‡πÇ‡∏°‡∏î‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö AI Decision Engine ‡∏ó‡∏µ‡πà‡∏£‡∏ß‡∏° AI Intelligence ‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à
"""

import logging
from datetime import datetime
from typing import Dict, List, Optional, Tuple, Any
from dataclasses import dataclass

from ai_position_intelligence import AIPositionIntelligence, AIDecision, PositionScore, PairScore
from ai_entry_intelligence import AIEntryIntelligence, EntryDecision, EntryAnalysis, ZoneScore

logger = logging.getLogger(__name__)

@dataclass
class CombinedDecision:
    """‡∏Ñ‡∏•‡∏≤‡∏™‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏ó‡∏µ‡πà‡∏£‡∏ß‡∏° AI + Traditional"""
    decision_type: str  # "ENTRY", "CLOSE", "HOLD"
    ai_decision: Any  # AI Decision object
    traditional_decision: Any  # Traditional Decision object
    final_decision: Any  # Final combined decision
    confidence: float  # 0-100
    reasoning: str
    timestamp: datetime

class AIDecisionEngine:
    """üß† AI Decision Engine ‡∏ó‡∏µ‡πà‡∏£‡∏ß‡∏° AI Intelligence ‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à"""
    
    def __init__(self):
        self.position_intelligence = AIPositionIntelligence()
        self.entry_intelligence = AIEntryIntelligence()
        self.decision_history = []
        
        # Decision weights (‡∏õ‡∏£‡∏±‡∏ö‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ)
        self.decision_weights = {
            'ai_weight': 0.70,  # AI ‡∏°‡∏µ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å 70%
            'traditional_weight': 0.30  # Traditional ‡∏°‡∏µ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å 30%
        }
    
    def make_entry_decision(self, symbol: str, current_price: float, zones: Dict[str, List[Dict]], 
                          positions: List, market_data: Dict = None, 
                          traditional_analysis: Dict = None) -> CombinedDecision:
        """
        ‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏°‡πâ‡∏î‡πâ‡∏ß‡∏¢ AI + Traditional Logic
        
        Args:
            symbol: ‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå
            current_price: ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
            zones: ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ Zone
            positions: ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ Position ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
            market_data: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏•‡∏≤‡∏î
            traditional_analysis: ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏ö‡∏ö‡πÄ‡∏î‡∏¥‡∏°
            
        Returns:
            CombinedDecision: ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏ó‡∏µ‡πà‡∏£‡∏ß‡∏° AI + Traditional
        """
        try:
            logger.info(f"üß† AI Decision Engine: Making entry decision for {symbol}")
            
            # 1. AI Entry Analysis
            ai_analysis = self.entry_intelligence.analyze_entry_opportunity(
                symbol, current_price, zones, positions, market_data
            )
            
            # 2. AI Entry Decision
            ai_decision = self._create_ai_entry_decision(ai_analysis, current_price)
            
            # 3. Traditional Analysis (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
            traditional_decision = traditional_analysis or {}
            
            # 4. Combine AI + Traditional
            final_decision = self._combine_entry_decisions(ai_decision, traditional_decision)
            
            # 5. Create Combined Decision
            combined_decision = CombinedDecision(
                decision_type="ENTRY",
                ai_decision=ai_decision,
                traditional_decision=traditional_decision,
                final_decision=final_decision,
                confidence=self._calculate_combined_confidence(ai_decision, traditional_decision),
                reasoning=self._generate_combined_reasoning(ai_decision, traditional_decision),
                timestamp=datetime.now()
            )
            
            # 6. Log decision
            self.decision_history.append(combined_decision)
            
            logger.info(f"üß† Entry Decision: {final_decision.get('action', 'UNKNOWN')} - Confidence: {combined_decision.confidence:.1f}%")
            
            return combined_decision
            
        except Exception as e:
            logger.error(f"‚ùå Error in AI entry decision: {e}")
            return CombinedDecision(
                decision_type="ENTRY",
                ai_decision=None,
                traditional_decision=traditional_analysis,
                final_decision={"action": "NO_ENTRY", "reason": f"Error: {str(e)}"},
                confidence=0.0,
                reasoning=f"Error: {str(e)}",
                timestamp=datetime.now()
            )
    
    def make_closing_decision(self, positions: List, current_price: float, 
                            market_data: Dict = None, traditional_analysis: Dict = None) -> CombinedDecision:
        """
        ‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏õ‡∏¥‡∏î‡πÑ‡∏°‡πâ‡∏î‡πâ‡∏ß‡∏¢ AI + Traditional Logic
        
        Args:
            positions: ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ Position
            current_price: ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
            market_data: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏•‡∏≤‡∏î
            traditional_analysis: ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏ö‡∏ö‡πÄ‡∏î‡∏¥‡∏°
            
        Returns:
            CombinedDecision: ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏ó‡∏µ‡πà‡∏£‡∏ß‡∏° AI + Traditional
        """
        try:
            logger.info(f"üß† AI Decision Engine: Making closing decision for {len(positions)} positions")
            
            # 1. AI Position Analysis
            position_scores = []
            for pos in positions:
                score = self.position_intelligence.calculate_position_intelligence_score(
                    pos, current_price, market_data
                )
                position_scores.append(score)
            
            # 2. AI Pair Analysis
            pair_scores = self.position_intelligence.find_optimal_pairs(
                positions, current_price, market_data
            )
            
            # 3. AI Closing Decision
            ai_decision = self._create_ai_closing_decision(position_scores, pair_scores)
            
            # 4. Traditional Analysis (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
            traditional_decision = traditional_analysis or {}
            
            # 5. Combine AI + Traditional
            final_decision = self._combine_closing_decisions(ai_decision, traditional_decision)
            
            # 6. Create Combined Decision
            combined_decision = CombinedDecision(
                decision_type="CLOSE",
                ai_decision=ai_decision,
                traditional_decision=traditional_decision,
                final_decision=final_decision,
                confidence=self._calculate_combined_confidence(ai_decision, traditional_decision),
                reasoning=self._generate_combined_reasoning(ai_decision, traditional_decision),
                timestamp=datetime.now()
            )
            
            # 7. Log decision
            self.decision_history.append(combined_decision)
            
            logger.info(f"üß† Closing Decision: {final_decision.get('action', 'UNKNOWN')} - Confidence: {combined_decision.confidence:.1f}%")
            
            return combined_decision
            
        except Exception as e:
            logger.error(f"‚ùå Error in AI closing decision: {e}")
            return CombinedDecision(
                decision_type="CLOSE",
                ai_decision=None,
                traditional_decision=traditional_analysis,
                final_decision={"action": "HOLD_ALL", "reason": f"Error: {str(e)}"},
                confidence=0.0,
                reasoning=f"Error: {str(e)}",
                timestamp=datetime.now()
            )
    
    def _create_ai_entry_decision(self, ai_analysis: EntryAnalysis, current_price: float) -> EntryDecision:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á AI Entry Decision ‡∏à‡∏≤‡∏Å Analysis"""
        try:
            # ‡∏´‡∏≤ Zone ‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
            best_zone = None
            if ai_analysis.zone_scores:
                best_zone = ai_analysis.zone_scores[0]
            
            # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î Direction
            direction = "BUY"
            if best_zone and best_zone.zone_type == "resistance":
                direction = "SELL"
            elif best_zone and best_zone.zone_type == "support":
                direction = "BUY"
            
            # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î Lot Size
            lot_size = 0.01  # Default
            if ai_analysis.overall_score >= 80:
                lot_size = 0.05  # Strong entry
            elif ai_analysis.overall_score >= 60:
                lot_size = 0.03  # Good entry
            elif ai_analysis.overall_score >= 40:
                lot_size = 0.02  # Weak entry
            
            return EntryDecision(
                decision_type=ai_analysis.recommendation,
                direction=direction,
                zone_id=best_zone.zone_id if best_zone else "unknown",
                entry_price=current_price,
                lot_size=lot_size,
                confidence=ai_analysis.confidence,
                reasoning=ai_analysis.reasoning,
                timestamp=datetime.now()
            )
            
        except Exception as e:
            logger.error(f"‚ùå Error creating AI entry decision: {e}")
            return EntryDecision(
                decision_type="NO_ENTRY",
                direction="BUY",
                zone_id="error",
                entry_price=current_price,
                lot_size=0.0,
                confidence=0.0,
                reasoning=f"Error: {str(e)}",
                timestamp=datetime.now()
            )
    
    def _create_ai_closing_decision(self, position_scores: List[PositionScore], 
                                  pair_scores: List[PairScore]) -> AIDecision:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á AI Closing Decision ‡∏à‡∏≤‡∏Å Scores"""
        try:
            # ‡∏´‡∏≤‡πÑ‡∏°‡πâ‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£‡∏õ‡∏¥‡∏î
            positions_to_close = []
            expected_profit = 0.0
            
            # 1. ‡πÑ‡∏°‡πâ‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß‡∏ó‡∏µ‡πà‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏π‡∏á
            high_score_positions = [ps for ps in position_scores if ps.score >= 70]
            for ps in high_score_positions:
                positions_to_close.append(ps.ticket)
                # ‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏Å‡∏≤‡∏£‡∏Å‡∏≥‡πÑ‡∏£ (‡πÉ‡∏ä‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì)
                expected_profit += ps.score * 0.1  # 1 ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô = $0.1
            
            # 2. ‡∏Ñ‡∏π‡πà‡∏ó‡∏µ‡πà‡∏î‡∏µ
            good_pairs = [ps for ps in pair_scores if ps.recommendation in ["STRONG_PAIR", "GOOD_PAIR"]]
            for pair in good_pairs[:2]:  # ‡πÄ‡∏≠‡∏≤‡πÅ‡∏Ñ‡πà 2 ‡∏Ñ‡∏π‡πà‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
                if pair.position1_ticket not in positions_to_close:
                    positions_to_close.append(pair.position1_ticket)
                if pair.position2_ticket not in positions_to_close:
                    positions_to_close.append(pair.position2_ticket)
                expected_profit += pair.combined_profit
            
            # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à
            if len(positions_to_close) >= 4:
                decision_type = "CLOSE_GROUP"
            elif len(positions_to_close) >= 2:
                decision_type = "CLOSE_PAIR"
            elif len(positions_to_close) == 1:
                decision_type = "CLOSE_SINGLE"
            else:
                decision_type = "HOLD_ALL"
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à
            confidence = 0.0
            if high_score_positions:
                confidence += len(high_score_positions) * 20
            if good_pairs:
                confidence += len(good_pairs) * 15
            confidence = min(100.0, confidence)
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•
            reasoning_parts = []
            if high_score_positions:
                reasoning_parts.append(f"{len(high_score_positions)} high-score positions")
            if good_pairs:
                reasoning_parts.append(f"{len(good_pairs)} good pairs")
            reasoning = "; ".join(reasoning_parts) if reasoning_parts else "No clear closing opportunity"
            
            return AIDecision(
                decision_type=decision_type,
                positions_to_close=positions_to_close,
                expected_profit=expected_profit,
                confidence=confidence,
                reasoning=reasoning,
                timestamp=datetime.now()
            )
            
        except Exception as e:
            logger.error(f"‚ùå Error creating AI closing decision: {e}")
            return AIDecision(
                decision_type="HOLD_ALL",
                positions_to_close=[],
                expected_profit=0.0,
                confidence=0.0,
                reasoning=f"Error: {str(e)}",
                timestamp=datetime.now()
            )
    
    def _combine_entry_decisions(self, ai_decision: EntryDecision, 
                               traditional_decision: Dict) -> Dict[str, Any]:
        """‡∏£‡∏ß‡∏° AI Entry Decision ‡∏Å‡∏±‡∏ö Traditional Decision"""
        try:
            # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å AI Decision
            combined = {
                'action': ai_decision.decision_type,
                'direction': ai_decision.direction,
                'lot_size': ai_decision.lot_size,
                'confidence': ai_decision.confidence,
                'reasoning': ai_decision.reasoning,
                'ai_recommendation': ai_decision.decision_type,
                'traditional_recommendation': traditional_decision.get('recommendation', 'UNKNOWN')
            }
            
            # ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏° Traditional Decision ‡∏ñ‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô‡∏°‡∏≤‡∏Å
            traditional_recommendation = traditional_decision.get('recommendation', 'UNKNOWN')
            
            if ai_decision.decision_type == "NO_ENTRY" and traditional_recommendation == "STRONG_BUY":
                # Traditional ‡∏ö‡∏≠‡∏Å‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤ ‡πÅ‡∏ï‡πà AI ‡∏ö‡∏≠‡∏Å‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤
                combined['action'] = "WEAK_BUY"  # ‡∏•‡∏î‡∏•‡∏á
                combined['lot_size'] = min(combined['lot_size'], 0.02)  # ‡∏•‡∏î lot size
                combined['reasoning'] += "; Traditional suggests entry but AI is cautious"
                
            elif ai_decision.decision_type == "STRONG_ENTRY" and traditional_recommendation == "NO_ENTRY":
                # AI ‡∏ö‡∏≠‡∏Å‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡πÅ‡∏£‡∏á ‡πÅ‡∏ï‡πà Traditional ‡∏ö‡∏≠‡∏Å‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤
                combined['action'] = "BUY"  # ‡∏•‡∏î‡∏•‡∏á
                combined['lot_size'] = min(combined['lot_size'], 0.03)  # ‡∏•‡∏î lot size
                combined['reasoning'] += "; AI suggests strong entry but traditional is cautious"
            
            return combined
            
        except Exception as e:
            logger.error(f"‚ùå Error combining entry decisions: {e}")
            return {
                'action': 'NO_ENTRY',
                'direction': 'BUY',
                'lot_size': 0.0,
                'confidence': 0.0,
                'reasoning': f"Error: {str(e)}"
            }
    
    def _combine_closing_decisions(self, ai_decision: AIDecision, 
                                 traditional_decision: Dict) -> Dict[str, Any]:
        """‡∏£‡∏ß‡∏° AI Closing Decision ‡∏Å‡∏±‡∏ö Traditional Decision"""
        try:
            # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å AI Decision
            combined = {
                'action': ai_decision.decision_type,
                'positions_to_close': ai_decision.positions_to_close,
                'expected_profit': ai_decision.expected_profit,
                'confidence': ai_decision.confidence,
                'reasoning': ai_decision.reasoning,
                'ai_recommendation': ai_decision.decision_type,
                'traditional_recommendation': traditional_decision.get('recommendation', 'UNKNOWN')
            }
            
            # ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏° Traditional Decision
            traditional_recommendation = traditional_decision.get('recommendation', 'UNKNOWN')
            
            if ai_decision.decision_type == "HOLD_ALL" and traditional_recommendation == "CLOSE_ALL":
                # Traditional ‡∏ö‡∏≠‡∏Å‡πÉ‡∏´‡πâ‡∏õ‡∏¥‡∏î‡∏´‡∏°‡∏î ‡πÅ‡∏ï‡πà AI ‡∏ö‡∏≠‡∏Å‡πÉ‡∏´‡πâ‡∏ñ‡∏∑‡∏≠
                combined['action'] = "CLOSE_GROUP"  # ‡∏õ‡∏¥‡∏î‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô
                combined['reasoning'] += "; Traditional suggests closing all but AI is cautious"
                
            elif ai_decision.decision_type == "CLOSE_GROUP" and traditional_recommendation == "HOLD_ALL":
                # AI ‡∏ö‡∏≠‡∏Å‡πÉ‡∏´‡πâ‡∏õ‡∏¥‡∏î‡∏´‡∏•‡∏≤‡∏¢‡πÑ‡∏°‡πâ ‡πÅ‡∏ï‡πà Traditional ‡∏ö‡∏≠‡∏Å‡πÉ‡∏´‡πâ‡∏ñ‡∏∑‡∏≠
                combined['action'] = "CLOSE_SINGLE"  # ‡∏õ‡∏¥‡∏î‡πÅ‡∏Ñ‡πà‡πÑ‡∏°‡πâ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
                combined['positions_to_close'] = ai_decision.positions_to_close[:1]  # ‡πÄ‡∏≠‡∏≤‡πÅ‡∏Ñ‡πà‡∏ï‡∏±‡∏ß‡πÅ‡∏£‡∏Å
                combined['reasoning'] += "; AI suggests closing multiple but traditional is cautious"
            
            return combined
            
        except Exception as e:
            logger.error(f"‚ùå Error combining closing decisions: {e}")
            return {
                'action': 'HOLD_ALL',
                'positions_to_close': [],
                'expected_profit': 0.0,
                'confidence': 0.0,
                'reasoning': f"Error: {str(e)}"
            }
    
    def _calculate_combined_confidence(self, ai_decision: Any, traditional_decision: Dict) -> float:
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡∏£‡∏ß‡∏°"""
        try:
            ai_confidence = getattr(ai_decision, 'confidence', 50.0)
            traditional_confidence = traditional_decision.get('confidence', 50.0)
            
            # ‡∏£‡∏ß‡∏°‡∏î‡πâ‡∏ß‡∏¢‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å
            combined_confidence = (
                ai_confidence * self.decision_weights['ai_weight'] +
                traditional_confidence * self.decision_weights['traditional_weight']
            )
            
            return min(100.0, max(0.0, combined_confidence))
            
        except Exception as e:
            logger.error(f"‚ùå Error calculating combined confidence: {e}")
            return 50.0
    
    def _generate_combined_reasoning(self, ai_decision: Any, traditional_decision: Dict) -> str:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏£‡∏ß‡∏°"""
        try:
            ai_reasoning = getattr(ai_decision, 'reasoning', 'No AI reasoning')
            traditional_reasoning = traditional_decision.get('reasoning', 'No traditional reasoning')
            
            return f"AI: {ai_reasoning} | Traditional: {traditional_reasoning}"
            
        except Exception as e:
            logger.error(f"‚ùå Error generating combined reasoning: {e}")
            return f"Error: {str(e)}"
    
    def log_decision_outcome(self, decision: CombinedDecision, outcome: Dict):
        """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à"""
        try:
            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÉ‡∏ô AI Intelligence
            if decision.decision_type == "ENTRY" and decision.ai_decision:
                self.entry_intelligence.log_entry_decision(decision.ai_decision, outcome)
            elif decision.decision_type == "CLOSE" and decision.ai_decision:
                self.position_intelligence.log_decision(decision.ai_decision, outcome)
            
            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÉ‡∏ô Decision Engine
            decision_record = {
                'timestamp': decision.timestamp.isoformat(),
                'decision_type': decision.decision_type,
                'final_decision': decision.final_decision,
                'confidence': decision.confidence,
                'reasoning': decision.reasoning,
                'outcome': outcome
            }
            
            logger.info(f"üß† Decision outcome logged: {decision.decision_type} - Success: {outcome.get('success', False)}")
            
        except Exception as e:
            logger.error(f"‚ùå Error logging decision outcome: {e}")
    
    def save_all_ai_brains(self):
        """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å AI Brains ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
        try:
            self.position_intelligence.save_ai_brain()
            self.entry_intelligence.save_ai_brain()
            logger.info("üß† All AI Brains saved successfully")
        except Exception as e:
            logger.error(f"‚ùå Error saving AI brains: {e}")
    
    def load_all_ai_brains(self):
        """‡πÇ‡∏´‡∏•‡∏î AI Brains ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
        try:
            self.position_intelligence.load_ai_brain()
            self.entry_intelligence.load_ai_brain()
            logger.info("üß† All AI Brains loaded successfully")
        except Exception as e:
            logger.error(f"‚ùå Error loading AI brains: {e}")
    
    def get_combined_ai_stats(self) -> Dict[str, Any]:
        """‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥ AI ‡∏£‡∏ß‡∏°"""
        try:
            position_stats = self.position_intelligence.get_ai_stats()
            entry_stats = self.entry_intelligence.get_ai_stats()
            
            return {
                'position_intelligence': position_stats,
                'entry_intelligence': entry_stats,
                'total_decisions': len(self.decision_history),
                'decision_weights': self.decision_weights
            }
        except Exception as e:
            logger.error(f"‚ùå Error getting combined AI stats: {e}")
            return {}
    
    def reset_all_ai_brains(self):
        """‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï AI Brains ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
        try:
            self.position_intelligence.reset_ai_brain()
            self.entry_intelligence.reset_ai_brain()
            self.decision_history = []
            logger.info("üß† All AI Brains reset successfully")
        except Exception as e:
            logger.error(f"‚ùå Error resetting all AI brains: {e}")
